{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"contracts/CodeQuillNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CodeQuillNFT is ERC721URIStorage, Ownable {\\n\\n    uint256 private _tokenIdCounter;\\n\\n    constructor(address initialOwner)\\n    ERC721(\\\"Code Quill NFT\\\", \\\"CODEQUILL\\\")\\n    Ownable(initialOwner)\\n    {}\\n\\n    function mintNFT(address recipient,\\n        string memory tokenURI)\\n    public onlyOwner\\n    returns (uint256) {\\n        uint256 tokenId = _tokenIdCounter++;\\n        _mint(recipient, tokenId);\\n        _setTokenURI(tokenId, tokenURI);\\n        return tokenId;\\n    }\\n}\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./IERC721Metadata.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {IERC4906-MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC4906.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(add(buffer, 0x20), length)\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(add(buffer, 0x20), offset))\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(reason, 0x20), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2²⁵⁶ + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC721.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[],\"evmVersion\":\"cancun\"}}",
	"name": "CodeQuillNFT",
	"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CodeQuillNFT.sol\":\"CodeQuillNFT\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"keccak256\":\"0x856ca1885aec23d54da3f2760b5d216d1b28ad20f798000336375a30dbbc1558\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc725c462ccbf284432d3123ab8c9bab24903730cae227ae4945878039d2fe54\",\"dweb:/ipfs/QmdiEVMvm8njp96dm2s4mThYBD74tY59mNP6s7CzKkGHAh\"]},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"keccak256\":\"0xca34c490d41c332106d30b657f00dc028532cb6b9fef2b1729670ce476b36bce\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef5e7685d50ed8aae2104a7eb2c31ae5a3b508f24fadfa7611f92f819201aee9\",\"dweb:/ipfs/QmYbTD32FPrEfP1hkniQmRxVUWp8GTSqFV1Bhwx1HVirse\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3490d794728f5bfecb46820431adaff71ba374141545ec20b650bb60353fac23\",\"dweb:/ipfs/QmPsfxjVpMcZbpE7BH93DzTpEaktESigEw4SmDzkXuJ4WR\"]},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x6ead281d4569c26b3dee7313aefff24add906f3600b57d8aef1255a17d6b34e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aec0f9c9f14f829353663e1946bf0ea00a1771ff6ddb4f7cbe14893397b4b55c\",\"dweb:/ipfs/QmVMR3SdijdM2BpL9Yp3u7Riaxqgs1FnZ1Rfg2CMjKGtVS\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xf78f05f3b8c9f75570e85300d7b4600d7f6f6a198449273f31d44c1641adb46f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e28b872613b45e0e801d4995aa4380be2531147bfe2d85c1d6275f1de514fba3\",\"dweb:/ipfs/QmeeFcfShHYaS3BdgVj78nxR28ZaVUwbvr66ud8bT6kzw9\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x88cd5e3bee2e8c36b8d9058fbcaa81ad5704281b25634122234b55ea853d8055\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8dc7e7ab5b8ea36c15027ab04221b05d1c970f47a53e9fd47ead8ca665d49c7e\",\"dweb:/ipfs/Qmeeph7fsDyfRr8vb2L8KcDEmKPb224TAayMvgqgGAnqpL\"]},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"keccak256\":\"0xb9dc602a845c73d11f1fe38039c0c2cf70fedd2d4afd877c0ed2d0383ffaa232\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59eb46224e996c2f9ecb9a821e65b920c2ecfe9df734613c3df9831de373491c\",\"dweb:/ipfs/QmTsZzJTqRavv64zyaWovcWkUNwfU3uo8uiUjrMFEm8MMj\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0xf46268c37522320bb2119a5a394bc5c739a95c0c574c8d08e8c643f4d06e5c76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://517e4b295f35b9947c72ad7379a6089439ece7bb6f4a2ea0a159da13046c039e\",\"dweb:/ipfs/QmZXzkSfLUbvujig3zVbpDHykpHhqLpvQtdiN3B5j4TA3u\"]},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"keccak256\":\"0xc2dfdc8fbc8fdb142575c90568e237b809a1feaccff23e32d00131887a08dc36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dbc1d283ee77da43d61661b5ba1adeb427d6a6224335494a9a857dce41d9f1d6\",\"dweb:/ipfs/QmTnA35z7XzkxFSRUqB6CGVH1nhmvajwnDNfA5PiKmYuCi\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15e3599867c2182f5831e9268b274b2ef2047825837df6b4d81c9e89254b093e\",\"dweb:/ipfs/QmZbL7XAYr5RmaNaooPgZRmcDXaudfsYQfYD9y5iAECvpS\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://81233d1f98060113d9922180bb0f14f8335856fe9f339134b09335e9f678c377\",\"dweb:/ipfs/QmWh6R35SarhAn4z2wH8SU456jJSYL2FgucfTFgbHJJN4E\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]},\"contracts/CodeQuillNFT.sol\":{\"keccak256\":\"0xab5c35a94d5dd907f550d955cba2d10e95c309908da44cd7c960c3b3180e440f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54256cd6a6da8af8403befef60445bfbe5e8cd8608c5de5a2833a9624a9f6c69\",\"dweb:/ipfs/Qma9dyKr1oUNsj11jC4PfGcTQYkdWW388BNGRYotXGfFyB\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_386": {
				"entryPoint": null,
				"id": 386,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_50": {
				"entryPoint": null,
				"id": 50,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_6715": {
				"entryPoint": null,
				"id": 6715,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_transferOwnership_146": {
				"entryPoint": 340,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"abi_decode_t_address_fromMemory": {
				"entryPoint": 614,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address_fromMemory": {
				"entryPoint": 636,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 1524,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 1541,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_dataslot_t_string_storage": {
				"entryPoint": 836,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 684,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_t_string_storage": {
				"entryPoint": 1145,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"cleanup_t_address": {
				"entryPoint": 570,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 539,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 966,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clear_storage_range_t_bytes1": {
				"entryPoint": 1107,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"convert_t_uint256_to_t_uint256": {
				"entryPoint": 984,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 1296,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"divide_by_32_ceil": {
				"entryPoint": 854,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_byte_array_length": {
				"entryPoint": 784,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": 1267,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"identity": {
				"entryPoint": 975,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"mask_bytes_dynamic": {
				"entryPoint": 1237,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x22": {
				"entryPoint": 739,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 694,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"prepare_store_t_uint256": {
				"entryPoint": 1023,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 535,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"shift_left_dynamic": {
				"entryPoint": 869,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"shift_right_unsigned_dynamic": {
				"entryPoint": 1225,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"storage_set_to_zero_t_uint256": {
				"entryPoint": 1079,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"update_byte_slice_dynamic32": {
				"entryPoint": 881,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"update_storage_value_t_uint256_to_t_uint256": {
				"entryPoint": 1032,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 589,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"zero_value_for_split_t_uint256": {
				"entryPoint": 1075,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:6778:20",
					"nodeType": "YulBlock",
					"src": "0:6778:20",
					"statements": [
						{
							"body": {
								"nativeSrc": "47:35:20",
								"nodeType": "YulBlock",
								"src": "47:35:20",
								"statements": [
									{
										"nativeSrc": "57:19:20",
										"nodeType": "YulAssignment",
										"src": "57:19:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "73:2:20",
													"nodeType": "YulLiteral",
													"src": "73:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "67:5:20",
												"nodeType": "YulIdentifier",
												"src": "67:5:20"
											},
											"nativeSrc": "67:9:20",
											"nodeType": "YulFunctionCall",
											"src": "67:9:20"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nativeSrc": "57:6:20",
												"nodeType": "YulIdentifier",
												"src": "57:6:20"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nativeSrc": "7:75:20",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nativeSrc": "40:6:20",
									"nodeType": "YulTypedName",
									"src": "40:6:20",
									"type": ""
								}
							],
							"src": "7:75:20"
						},
						{
							"body": {
								"nativeSrc": "177:28:20",
								"nodeType": "YulBlock",
								"src": "177:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "194:1:20",
													"nodeType": "YulLiteral",
													"src": "194:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "197:1:20",
													"nodeType": "YulLiteral",
													"src": "197:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "187:6:20",
												"nodeType": "YulIdentifier",
												"src": "187:6:20"
											},
											"nativeSrc": "187:12:20",
											"nodeType": "YulFunctionCall",
											"src": "187:12:20"
										},
										"nativeSrc": "187:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "187:12:20"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nativeSrc": "88:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "88:117:20"
						},
						{
							"body": {
								"nativeSrc": "300:28:20",
								"nodeType": "YulBlock",
								"src": "300:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "317:1:20",
													"nodeType": "YulLiteral",
													"src": "317:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "320:1:20",
													"nodeType": "YulLiteral",
													"src": "320:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "310:6:20",
												"nodeType": "YulIdentifier",
												"src": "310:6:20"
											},
											"nativeSrc": "310:12:20",
											"nodeType": "YulFunctionCall",
											"src": "310:12:20"
										},
										"nativeSrc": "310:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "310:12:20"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nativeSrc": "211:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "211:117:20"
						},
						{
							"body": {
								"nativeSrc": "379:81:20",
								"nodeType": "YulBlock",
								"src": "379:81:20",
								"statements": [
									{
										"nativeSrc": "389:65:20",
										"nodeType": "YulAssignment",
										"src": "389:65:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "404:5:20",
													"nodeType": "YulIdentifier",
													"src": "404:5:20"
												},
												{
													"kind": "number",
													"nativeSrc": "411:42:20",
													"nodeType": "YulLiteral",
													"src": "411:42:20",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "400:3:20",
												"nodeType": "YulIdentifier",
												"src": "400:3:20"
											},
											"nativeSrc": "400:54:20",
											"nodeType": "YulFunctionCall",
											"src": "400:54:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "389:7:20",
												"nodeType": "YulIdentifier",
												"src": "389:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "334:126:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "361:5:20",
									"nodeType": "YulTypedName",
									"src": "361:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "371:7:20",
									"nodeType": "YulTypedName",
									"src": "371:7:20",
									"type": ""
								}
							],
							"src": "334:126:20"
						},
						{
							"body": {
								"nativeSrc": "511:51:20",
								"nodeType": "YulBlock",
								"src": "511:51:20",
								"statements": [
									{
										"nativeSrc": "521:35:20",
										"nodeType": "YulAssignment",
										"src": "521:35:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "550:5:20",
													"nodeType": "YulIdentifier",
													"src": "550:5:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "532:17:20",
												"nodeType": "YulIdentifier",
												"src": "532:17:20"
											},
											"nativeSrc": "532:24:20",
											"nodeType": "YulFunctionCall",
											"src": "532:24:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "521:7:20",
												"nodeType": "YulIdentifier",
												"src": "521:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "466:96:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "493:5:20",
									"nodeType": "YulTypedName",
									"src": "493:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "503:7:20",
									"nodeType": "YulTypedName",
									"src": "503:7:20",
									"type": ""
								}
							],
							"src": "466:96:20"
						},
						{
							"body": {
								"nativeSrc": "611:79:20",
								"nodeType": "YulBlock",
								"src": "611:79:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "668:16:20",
											"nodeType": "YulBlock",
											"src": "668:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "677:1:20",
																"nodeType": "YulLiteral",
																"src": "677:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "680:1:20",
																"nodeType": "YulLiteral",
																"src": "680:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "670:6:20",
															"nodeType": "YulIdentifier",
															"src": "670:6:20"
														},
														"nativeSrc": "670:12:20",
														"nodeType": "YulFunctionCall",
														"src": "670:12:20"
													},
													"nativeSrc": "670:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "670:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "634:5:20",
															"nodeType": "YulIdentifier",
															"src": "634:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "659:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "659:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nativeSrc": "641:17:20",
																"nodeType": "YulIdentifier",
																"src": "641:17:20"
															},
															"nativeSrc": "641:24:20",
															"nodeType": "YulFunctionCall",
															"src": "641:24:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "631:2:20",
														"nodeType": "YulIdentifier",
														"src": "631:2:20"
													},
													"nativeSrc": "631:35:20",
													"nodeType": "YulFunctionCall",
													"src": "631:35:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "624:6:20",
												"nodeType": "YulIdentifier",
												"src": "624:6:20"
											},
											"nativeSrc": "624:43:20",
											"nodeType": "YulFunctionCall",
											"src": "624:43:20"
										},
										"nativeSrc": "621:63:20",
										"nodeType": "YulIf",
										"src": "621:63:20"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nativeSrc": "568:122:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "604:5:20",
									"nodeType": "YulTypedName",
									"src": "604:5:20",
									"type": ""
								}
							],
							"src": "568:122:20"
						},
						{
							"body": {
								"nativeSrc": "759:80:20",
								"nodeType": "YulBlock",
								"src": "759:80:20",
								"statements": [
									{
										"nativeSrc": "769:22:20",
										"nodeType": "YulAssignment",
										"src": "769:22:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "784:6:20",
													"nodeType": "YulIdentifier",
													"src": "784:6:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "778:5:20",
												"nodeType": "YulIdentifier",
												"src": "778:5:20"
											},
											"nativeSrc": "778:13:20",
											"nodeType": "YulFunctionCall",
											"src": "778:13:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "769:5:20",
												"nodeType": "YulIdentifier",
												"src": "769:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "827:5:20",
													"nodeType": "YulIdentifier",
													"src": "827:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nativeSrc": "800:26:20",
												"nodeType": "YulIdentifier",
												"src": "800:26:20"
											},
											"nativeSrc": "800:33:20",
											"nodeType": "YulFunctionCall",
											"src": "800:33:20"
										},
										"nativeSrc": "800:33:20",
										"nodeType": "YulExpressionStatement",
										"src": "800:33:20"
									}
								]
							},
							"name": "abi_decode_t_address_fromMemory",
							"nativeSrc": "696:143:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "737:6:20",
									"nodeType": "YulTypedName",
									"src": "737:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "745:3:20",
									"nodeType": "YulTypedName",
									"src": "745:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "753:5:20",
									"nodeType": "YulTypedName",
									"src": "753:5:20",
									"type": ""
								}
							],
							"src": "696:143:20"
						},
						{
							"body": {
								"nativeSrc": "922:274:20",
								"nodeType": "YulBlock",
								"src": "922:274:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "968:83:20",
											"nodeType": "YulBlock",
											"src": "968:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "970:77:20",
															"nodeType": "YulIdentifier",
															"src": "970:77:20"
														},
														"nativeSrc": "970:79:20",
														"nodeType": "YulFunctionCall",
														"src": "970:79:20"
													},
													"nativeSrc": "970:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "970:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "943:7:20",
															"nodeType": "YulIdentifier",
															"src": "943:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "952:9:20",
															"nodeType": "YulIdentifier",
															"src": "952:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "939:3:20",
														"nodeType": "YulIdentifier",
														"src": "939:3:20"
													},
													"nativeSrc": "939:23:20",
													"nodeType": "YulFunctionCall",
													"src": "939:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "964:2:20",
													"nodeType": "YulLiteral",
													"src": "964:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "935:3:20",
												"nodeType": "YulIdentifier",
												"src": "935:3:20"
											},
											"nativeSrc": "935:32:20",
											"nodeType": "YulFunctionCall",
											"src": "935:32:20"
										},
										"nativeSrc": "932:119:20",
										"nodeType": "YulIf",
										"src": "932:119:20"
									},
									{
										"nativeSrc": "1061:128:20",
										"nodeType": "YulBlock",
										"src": "1061:128:20",
										"statements": [
											{
												"nativeSrc": "1076:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "1076:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "1090:1:20",
													"nodeType": "YulLiteral",
													"src": "1090:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "1080:6:20",
														"nodeType": "YulTypedName",
														"src": "1080:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "1105:74:20",
												"nodeType": "YulAssignment",
												"src": "1105:74:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "1151:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "1151:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "1162:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1162:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "1147:3:20",
																"nodeType": "YulIdentifier",
																"src": "1147:3:20"
															},
															"nativeSrc": "1147:22:20",
															"nodeType": "YulFunctionCall",
															"src": "1147:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "1171:7:20",
															"nodeType": "YulIdentifier",
															"src": "1171:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nativeSrc": "1115:31:20",
														"nodeType": "YulIdentifier",
														"src": "1115:31:20"
													},
													"nativeSrc": "1115:64:20",
													"nodeType": "YulFunctionCall",
													"src": "1115:64:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "1105:6:20",
														"nodeType": "YulIdentifier",
														"src": "1105:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address_fromMemory",
							"nativeSrc": "845:351:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "892:9:20",
									"nodeType": "YulTypedName",
									"src": "892:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "903:7:20",
									"nodeType": "YulTypedName",
									"src": "903:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "915:6:20",
									"nodeType": "YulTypedName",
									"src": "915:6:20",
									"type": ""
								}
							],
							"src": "845:351:20"
						},
						{
							"body": {
								"nativeSrc": "1261:40:20",
								"nodeType": "YulBlock",
								"src": "1261:40:20",
								"statements": [
									{
										"nativeSrc": "1272:22:20",
										"nodeType": "YulAssignment",
										"src": "1272:22:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1288:5:20",
													"nodeType": "YulIdentifier",
													"src": "1288:5:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "1282:5:20",
												"nodeType": "YulIdentifier",
												"src": "1282:5:20"
											},
											"nativeSrc": "1282:12:20",
											"nodeType": "YulFunctionCall",
											"src": "1282:12:20"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "1272:6:20",
												"nodeType": "YulIdentifier",
												"src": "1272:6:20"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nativeSrc": "1202:99:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1244:5:20",
									"nodeType": "YulTypedName",
									"src": "1244:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "1254:6:20",
									"nodeType": "YulTypedName",
									"src": "1254:6:20",
									"type": ""
								}
							],
							"src": "1202:99:20"
						},
						{
							"body": {
								"nativeSrc": "1335:152:20",
								"nodeType": "YulBlock",
								"src": "1335:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1352:1:20",
													"nodeType": "YulLiteral",
													"src": "1352:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "1355:77:20",
													"nodeType": "YulLiteral",
													"src": "1355:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1345:6:20",
												"nodeType": "YulIdentifier",
												"src": "1345:6:20"
											},
											"nativeSrc": "1345:88:20",
											"nodeType": "YulFunctionCall",
											"src": "1345:88:20"
										},
										"nativeSrc": "1345:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "1345:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1449:1:20",
													"nodeType": "YulLiteral",
													"src": "1449:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "1452:4:20",
													"nodeType": "YulLiteral",
													"src": "1452:4:20",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1442:6:20",
												"nodeType": "YulIdentifier",
												"src": "1442:6:20"
											},
											"nativeSrc": "1442:15:20",
											"nodeType": "YulFunctionCall",
											"src": "1442:15:20"
										},
										"nativeSrc": "1442:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "1442:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1473:1:20",
													"nodeType": "YulLiteral",
													"src": "1473:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "1476:4:20",
													"nodeType": "YulLiteral",
													"src": "1476:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "1466:6:20",
												"nodeType": "YulIdentifier",
												"src": "1466:6:20"
											},
											"nativeSrc": "1466:15:20",
											"nodeType": "YulFunctionCall",
											"src": "1466:15:20"
										},
										"nativeSrc": "1466:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "1466:15:20"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "1307:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "1307:180:20"
						},
						{
							"body": {
								"nativeSrc": "1521:152:20",
								"nodeType": "YulBlock",
								"src": "1521:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1538:1:20",
													"nodeType": "YulLiteral",
													"src": "1538:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "1541:77:20",
													"nodeType": "YulLiteral",
													"src": "1541:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1531:6:20",
												"nodeType": "YulIdentifier",
												"src": "1531:6:20"
											},
											"nativeSrc": "1531:88:20",
											"nodeType": "YulFunctionCall",
											"src": "1531:88:20"
										},
										"nativeSrc": "1531:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "1531:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1635:1:20",
													"nodeType": "YulLiteral",
													"src": "1635:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "1638:4:20",
													"nodeType": "YulLiteral",
													"src": "1638:4:20",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1628:6:20",
												"nodeType": "YulIdentifier",
												"src": "1628:6:20"
											},
											"nativeSrc": "1628:15:20",
											"nodeType": "YulFunctionCall",
											"src": "1628:15:20"
										},
										"nativeSrc": "1628:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "1628:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "1659:1:20",
													"nodeType": "YulLiteral",
													"src": "1659:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "1662:4:20",
													"nodeType": "YulLiteral",
													"src": "1662:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "1652:6:20",
												"nodeType": "YulIdentifier",
												"src": "1652:6:20"
											},
											"nativeSrc": "1652:15:20",
											"nodeType": "YulFunctionCall",
											"src": "1652:15:20"
										},
										"nativeSrc": "1652:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "1652:15:20"
									}
								]
							},
							"name": "panic_error_0x22",
							"nativeSrc": "1493:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "1493:180:20"
						},
						{
							"body": {
								"nativeSrc": "1730:269:20",
								"nodeType": "YulBlock",
								"src": "1730:269:20",
								"statements": [
									{
										"nativeSrc": "1740:22:20",
										"nodeType": "YulAssignment",
										"src": "1740:22:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "1754:4:20",
													"nodeType": "YulIdentifier",
													"src": "1754:4:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1760:1:20",
													"nodeType": "YulLiteral",
													"src": "1760:1:20",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "1750:3:20",
												"nodeType": "YulIdentifier",
												"src": "1750:3:20"
											},
											"nativeSrc": "1750:12:20",
											"nodeType": "YulFunctionCall",
											"src": "1750:12:20"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "1740:6:20",
												"nodeType": "YulIdentifier",
												"src": "1740:6:20"
											}
										]
									},
									{
										"nativeSrc": "1771:38:20",
										"nodeType": "YulVariableDeclaration",
										"src": "1771:38:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "1801:4:20",
													"nodeType": "YulIdentifier",
													"src": "1801:4:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1807:1:20",
													"nodeType": "YulLiteral",
													"src": "1807:1:20",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "1797:3:20",
												"nodeType": "YulIdentifier",
												"src": "1797:3:20"
											},
											"nativeSrc": "1797:12:20",
											"nodeType": "YulFunctionCall",
											"src": "1797:12:20"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "1775:18:20",
												"nodeType": "YulTypedName",
												"src": "1775:18:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "1848:51:20",
											"nodeType": "YulBlock",
											"src": "1848:51:20",
											"statements": [
												{
													"nativeSrc": "1862:27:20",
													"nodeType": "YulAssignment",
													"src": "1862:27:20",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "1876:6:20",
																"nodeType": "YulIdentifier",
																"src": "1876:6:20"
															},
															{
																"kind": "number",
																"nativeSrc": "1884:4:20",
																"nodeType": "YulLiteral",
																"src": "1884:4:20",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "1872:3:20",
															"nodeType": "YulIdentifier",
															"src": "1872:3:20"
														},
														"nativeSrc": "1872:17:20",
														"nodeType": "YulFunctionCall",
														"src": "1872:17:20"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "1862:6:20",
															"nodeType": "YulIdentifier",
															"src": "1862:6:20"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "1828:18:20",
													"nodeType": "YulIdentifier",
													"src": "1828:18:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "1821:6:20",
												"nodeType": "YulIdentifier",
												"src": "1821:6:20"
											},
											"nativeSrc": "1821:26:20",
											"nodeType": "YulFunctionCall",
											"src": "1821:26:20"
										},
										"nativeSrc": "1818:81:20",
										"nodeType": "YulIf",
										"src": "1818:81:20"
									},
									{
										"body": {
											"nativeSrc": "1951:42:20",
											"nodeType": "YulBlock",
											"src": "1951:42:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nativeSrc": "1965:16:20",
															"nodeType": "YulIdentifier",
															"src": "1965:16:20"
														},
														"nativeSrc": "1965:18:20",
														"nodeType": "YulFunctionCall",
														"src": "1965:18:20"
													},
													"nativeSrc": "1965:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "1965:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "1915:18:20",
													"nodeType": "YulIdentifier",
													"src": "1915:18:20"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "1938:6:20",
															"nodeType": "YulIdentifier",
															"src": "1938:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "1946:2:20",
															"nodeType": "YulLiteral",
															"src": "1946:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "1935:2:20",
														"nodeType": "YulIdentifier",
														"src": "1935:2:20"
													},
													"nativeSrc": "1935:14:20",
													"nodeType": "YulFunctionCall",
													"src": "1935:14:20"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "1912:2:20",
												"nodeType": "YulIdentifier",
												"src": "1912:2:20"
											},
											"nativeSrc": "1912:38:20",
											"nodeType": "YulFunctionCall",
											"src": "1912:38:20"
										},
										"nativeSrc": "1909:84:20",
										"nodeType": "YulIf",
										"src": "1909:84:20"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "1679:320:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "1714:4:20",
									"nodeType": "YulTypedName",
									"src": "1714:4:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "1723:6:20",
									"nodeType": "YulTypedName",
									"src": "1723:6:20",
									"type": ""
								}
							],
							"src": "1679:320:20"
						},
						{
							"body": {
								"nativeSrc": "2059:87:20",
								"nodeType": "YulBlock",
								"src": "2059:87:20",
								"statements": [
									{
										"nativeSrc": "2069:11:20",
										"nodeType": "YulAssignment",
										"src": "2069:11:20",
										"value": {
											"name": "ptr",
											"nativeSrc": "2077:3:20",
											"nodeType": "YulIdentifier",
											"src": "2077:3:20"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "2069:4:20",
												"nodeType": "YulIdentifier",
												"src": "2069:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "2097:1:20",
													"nodeType": "YulLiteral",
													"src": "2097:1:20",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nativeSrc": "2100:3:20",
													"nodeType": "YulIdentifier",
													"src": "2100:3:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2090:6:20",
												"nodeType": "YulIdentifier",
												"src": "2090:6:20"
											},
											"nativeSrc": "2090:14:20",
											"nodeType": "YulFunctionCall",
											"src": "2090:14:20"
										},
										"nativeSrc": "2090:14:20",
										"nodeType": "YulExpressionStatement",
										"src": "2090:14:20"
									},
									{
										"nativeSrc": "2113:26:20",
										"nodeType": "YulAssignment",
										"src": "2113:26:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "2131:1:20",
													"nodeType": "YulLiteral",
													"src": "2131:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "2134:4:20",
													"nodeType": "YulLiteral",
													"src": "2134:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nativeSrc": "2121:9:20",
												"nodeType": "YulIdentifier",
												"src": "2121:9:20"
											},
											"nativeSrc": "2121:18:20",
											"nodeType": "YulFunctionCall",
											"src": "2121:18:20"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "2113:4:20",
												"nodeType": "YulIdentifier",
												"src": "2113:4:20"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_string_storage",
							"nativeSrc": "2005:141:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "2046:3:20",
									"nodeType": "YulTypedName",
									"src": "2046:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "2054:4:20",
									"nodeType": "YulTypedName",
									"src": "2054:4:20",
									"type": ""
								}
							],
							"src": "2005:141:20"
						},
						{
							"body": {
								"nativeSrc": "2196:49:20",
								"nodeType": "YulBlock",
								"src": "2196:49:20",
								"statements": [
									{
										"nativeSrc": "2206:33:20",
										"nodeType": "YulAssignment",
										"src": "2206:33:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "2224:5:20",
															"nodeType": "YulIdentifier",
															"src": "2224:5:20"
														},
														{
															"kind": "number",
															"nativeSrc": "2231:2:20",
															"nodeType": "YulLiteral",
															"src": "2231:2:20",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2220:3:20",
														"nodeType": "YulIdentifier",
														"src": "2220:3:20"
													},
													"nativeSrc": "2220:14:20",
													"nodeType": "YulFunctionCall",
													"src": "2220:14:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2236:2:20",
													"nodeType": "YulLiteral",
													"src": "2236:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "2216:3:20",
												"nodeType": "YulIdentifier",
												"src": "2216:3:20"
											},
											"nativeSrc": "2216:23:20",
											"nodeType": "YulFunctionCall",
											"src": "2216:23:20"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "2206:6:20",
												"nodeType": "YulIdentifier",
												"src": "2206:6:20"
											}
										]
									}
								]
							},
							"name": "divide_by_32_ceil",
							"nativeSrc": "2152:93:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2179:5:20",
									"nodeType": "YulTypedName",
									"src": "2179:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "2189:6:20",
									"nodeType": "YulTypedName",
									"src": "2189:6:20",
									"type": ""
								}
							],
							"src": "2152:93:20"
						},
						{
							"body": {
								"nativeSrc": "2304:54:20",
								"nodeType": "YulBlock",
								"src": "2304:54:20",
								"statements": [
									{
										"nativeSrc": "2314:37:20",
										"nodeType": "YulAssignment",
										"src": "2314:37:20",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nativeSrc": "2339:4:20",
													"nodeType": "YulIdentifier",
													"src": "2339:4:20"
												},
												{
													"name": "value",
													"nativeSrc": "2345:5:20",
													"nodeType": "YulIdentifier",
													"src": "2345:5:20"
												}
											],
											"functionName": {
												"name": "shl",
												"nativeSrc": "2335:3:20",
												"nodeType": "YulIdentifier",
												"src": "2335:3:20"
											},
											"nativeSrc": "2335:16:20",
											"nodeType": "YulFunctionCall",
											"src": "2335:16:20"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "2314:8:20",
												"nodeType": "YulIdentifier",
												"src": "2314:8:20"
											}
										]
									}
								]
							},
							"name": "shift_left_dynamic",
							"nativeSrc": "2251:107:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nativeSrc": "2279:4:20",
									"nodeType": "YulTypedName",
									"src": "2279:4:20",
									"type": ""
								},
								{
									"name": "value",
									"nativeSrc": "2285:5:20",
									"nodeType": "YulTypedName",
									"src": "2285:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "2295:8:20",
									"nodeType": "YulTypedName",
									"src": "2295:8:20",
									"type": ""
								}
							],
							"src": "2251:107:20"
						},
						{
							"body": {
								"nativeSrc": "2440:317:20",
								"nodeType": "YulBlock",
								"src": "2440:317:20",
								"statements": [
									{
										"nativeSrc": "2450:35:20",
										"nodeType": "YulVariableDeclaration",
										"src": "2450:35:20",
										"value": {
											"arguments": [
												{
													"name": "shiftBytes",
													"nativeSrc": "2471:10:20",
													"nodeType": "YulIdentifier",
													"src": "2471:10:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2483:1:20",
													"nodeType": "YulLiteral",
													"src": "2483:1:20",
													"type": "",
													"value": "8"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "2467:3:20",
												"nodeType": "YulIdentifier",
												"src": "2467:3:20"
											},
											"nativeSrc": "2467:18:20",
											"nodeType": "YulFunctionCall",
											"src": "2467:18:20"
										},
										"variables": [
											{
												"name": "shiftBits",
												"nativeSrc": "2454:9:20",
												"nodeType": "YulTypedName",
												"src": "2454:9:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "2494:109:20",
										"nodeType": "YulVariableDeclaration",
										"src": "2494:109:20",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nativeSrc": "2525:9:20",
													"nodeType": "YulIdentifier",
													"src": "2525:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2536:66:20",
													"nodeType": "YulLiteral",
													"src": "2536:66:20",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nativeSrc": "2506:18:20",
												"nodeType": "YulIdentifier",
												"src": "2506:18:20"
											},
											"nativeSrc": "2506:97:20",
											"nodeType": "YulFunctionCall",
											"src": "2506:97:20"
										},
										"variables": [
											{
												"name": "mask",
												"nativeSrc": "2498:4:20",
												"nodeType": "YulTypedName",
												"src": "2498:4:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "2612:51:20",
										"nodeType": "YulAssignment",
										"src": "2612:51:20",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nativeSrc": "2643:9:20",
													"nodeType": "YulIdentifier",
													"src": "2643:9:20"
												},
												{
													"name": "toInsert",
													"nativeSrc": "2654:8:20",
													"nodeType": "YulIdentifier",
													"src": "2654:8:20"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nativeSrc": "2624:18:20",
												"nodeType": "YulIdentifier",
												"src": "2624:18:20"
											},
											"nativeSrc": "2624:39:20",
											"nodeType": "YulFunctionCall",
											"src": "2624:39:20"
										},
										"variableNames": [
											{
												"name": "toInsert",
												"nativeSrc": "2612:8:20",
												"nodeType": "YulIdentifier",
												"src": "2612:8:20"
											}
										]
									},
									{
										"nativeSrc": "2672:30:20",
										"nodeType": "YulAssignment",
										"src": "2672:30:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2685:5:20",
													"nodeType": "YulIdentifier",
													"src": "2685:5:20"
												},
												{
													"arguments": [
														{
															"name": "mask",
															"nativeSrc": "2696:4:20",
															"nodeType": "YulIdentifier",
															"src": "2696:4:20"
														}
													],
													"functionName": {
														"name": "not",
														"nativeSrc": "2692:3:20",
														"nodeType": "YulIdentifier",
														"src": "2692:3:20"
													},
													"nativeSrc": "2692:9:20",
													"nodeType": "YulFunctionCall",
													"src": "2692:9:20"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "2681:3:20",
												"nodeType": "YulIdentifier",
												"src": "2681:3:20"
											},
											"nativeSrc": "2681:21:20",
											"nodeType": "YulFunctionCall",
											"src": "2681:21:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "2672:5:20",
												"nodeType": "YulIdentifier",
												"src": "2672:5:20"
											}
										]
									},
									{
										"nativeSrc": "2711:40:20",
										"nodeType": "YulAssignment",
										"src": "2711:40:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2724:5:20",
													"nodeType": "YulIdentifier",
													"src": "2724:5:20"
												},
												{
													"arguments": [
														{
															"name": "toInsert",
															"nativeSrc": "2735:8:20",
															"nodeType": "YulIdentifier",
															"src": "2735:8:20"
														},
														{
															"name": "mask",
															"nativeSrc": "2745:4:20",
															"nodeType": "YulIdentifier",
															"src": "2745:4:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "2731:3:20",
														"nodeType": "YulIdentifier",
														"src": "2731:3:20"
													},
													"nativeSrc": "2731:19:20",
													"nodeType": "YulFunctionCall",
													"src": "2731:19:20"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "2721:2:20",
												"nodeType": "YulIdentifier",
												"src": "2721:2:20"
											},
											"nativeSrc": "2721:30:20",
											"nodeType": "YulFunctionCall",
											"src": "2721:30:20"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "2711:6:20",
												"nodeType": "YulIdentifier",
												"src": "2711:6:20"
											}
										]
									}
								]
							},
							"name": "update_byte_slice_dynamic32",
							"nativeSrc": "2364:393:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2401:5:20",
									"nodeType": "YulTypedName",
									"src": "2401:5:20",
									"type": ""
								},
								{
									"name": "shiftBytes",
									"nativeSrc": "2408:10:20",
									"nodeType": "YulTypedName",
									"src": "2408:10:20",
									"type": ""
								},
								{
									"name": "toInsert",
									"nativeSrc": "2420:8:20",
									"nodeType": "YulTypedName",
									"src": "2420:8:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "2433:6:20",
									"nodeType": "YulTypedName",
									"src": "2433:6:20",
									"type": ""
								}
							],
							"src": "2364:393:20"
						},
						{
							"body": {
								"nativeSrc": "2808:32:20",
								"nodeType": "YulBlock",
								"src": "2808:32:20",
								"statements": [
									{
										"nativeSrc": "2818:16:20",
										"nodeType": "YulAssignment",
										"src": "2818:16:20",
										"value": {
											"name": "value",
											"nativeSrc": "2829:5:20",
											"nodeType": "YulIdentifier",
											"src": "2829:5:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "2818:7:20",
												"nodeType": "YulIdentifier",
												"src": "2818:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nativeSrc": "2763:77:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2790:5:20",
									"nodeType": "YulTypedName",
									"src": "2790:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "2800:7:20",
									"nodeType": "YulTypedName",
									"src": "2800:7:20",
									"type": ""
								}
							],
							"src": "2763:77:20"
						},
						{
							"body": {
								"nativeSrc": "2878:28:20",
								"nodeType": "YulBlock",
								"src": "2878:28:20",
								"statements": [
									{
										"nativeSrc": "2888:12:20",
										"nodeType": "YulAssignment",
										"src": "2888:12:20",
										"value": {
											"name": "value",
											"nativeSrc": "2895:5:20",
											"nodeType": "YulIdentifier",
											"src": "2895:5:20"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "2888:3:20",
												"nodeType": "YulIdentifier",
												"src": "2888:3:20"
											}
										]
									}
								]
							},
							"name": "identity",
							"nativeSrc": "2846:60:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2864:5:20",
									"nodeType": "YulTypedName",
									"src": "2864:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "2874:3:20",
									"nodeType": "YulTypedName",
									"src": "2874:3:20",
									"type": ""
								}
							],
							"src": "2846:60:20"
						},
						{
							"body": {
								"nativeSrc": "2972:82:20",
								"nodeType": "YulBlock",
								"src": "2972:82:20",
								"statements": [
									{
										"nativeSrc": "2982:66:20",
										"nodeType": "YulAssignment",
										"src": "2982:66:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "3040:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "3040:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nativeSrc": "3022:17:20",
																"nodeType": "YulIdentifier",
																"src": "3022:17:20"
															},
															"nativeSrc": "3022:24:20",
															"nodeType": "YulFunctionCall",
															"src": "3022:24:20"
														}
													],
													"functionName": {
														"name": "identity",
														"nativeSrc": "3013:8:20",
														"nodeType": "YulIdentifier",
														"src": "3013:8:20"
													},
													"nativeSrc": "3013:34:20",
													"nodeType": "YulFunctionCall",
													"src": "3013:34:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "2995:17:20",
												"nodeType": "YulIdentifier",
												"src": "2995:17:20"
											},
											"nativeSrc": "2995:53:20",
											"nodeType": "YulFunctionCall",
											"src": "2995:53:20"
										},
										"variableNames": [
											{
												"name": "converted",
												"nativeSrc": "2982:9:20",
												"nodeType": "YulIdentifier",
												"src": "2982:9:20"
											}
										]
									}
								]
							},
							"name": "convert_t_uint256_to_t_uint256",
							"nativeSrc": "2912:142:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2952:5:20",
									"nodeType": "YulTypedName",
									"src": "2952:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "converted",
									"nativeSrc": "2962:9:20",
									"nodeType": "YulTypedName",
									"src": "2962:9:20",
									"type": ""
								}
							],
							"src": "2912:142:20"
						},
						{
							"body": {
								"nativeSrc": "3107:28:20",
								"nodeType": "YulBlock",
								"src": "3107:28:20",
								"statements": [
									{
										"nativeSrc": "3117:12:20",
										"nodeType": "YulAssignment",
										"src": "3117:12:20",
										"value": {
											"name": "value",
											"nativeSrc": "3124:5:20",
											"nodeType": "YulIdentifier",
											"src": "3124:5:20"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "3117:3:20",
												"nodeType": "YulIdentifier",
												"src": "3117:3:20"
											}
										]
									}
								]
							},
							"name": "prepare_store_t_uint256",
							"nativeSrc": "3060:75:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3093:5:20",
									"nodeType": "YulTypedName",
									"src": "3093:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "3103:3:20",
									"nodeType": "YulTypedName",
									"src": "3103:3:20",
									"type": ""
								}
							],
							"src": "3060:75:20"
						},
						{
							"body": {
								"nativeSrc": "3217:193:20",
								"nodeType": "YulBlock",
								"src": "3217:193:20",
								"statements": [
									{
										"nativeSrc": "3227:63:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3227:63:20",
										"value": {
											"arguments": [
												{
													"name": "value_0",
													"nativeSrc": "3282:7:20",
													"nodeType": "YulIdentifier",
													"src": "3282:7:20"
												}
											],
											"functionName": {
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "3251:30:20",
												"nodeType": "YulIdentifier",
												"src": "3251:30:20"
											},
											"nativeSrc": "3251:39:20",
											"nodeType": "YulFunctionCall",
											"src": "3251:39:20"
										},
										"variables": [
											{
												"name": "convertedValue_0",
												"nativeSrc": "3231:16:20",
												"nodeType": "YulTypedName",
												"src": "3231:16:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "3306:4:20",
													"nodeType": "YulIdentifier",
													"src": "3306:4:20"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nativeSrc": "3346:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "3346:4:20"
																}
															],
															"functionName": {
																"name": "sload",
																"nativeSrc": "3340:5:20",
																"nodeType": "YulIdentifier",
																"src": "3340:5:20"
															},
															"nativeSrc": "3340:11:20",
															"nodeType": "YulFunctionCall",
															"src": "3340:11:20"
														},
														{
															"name": "offset",
															"nativeSrc": "3353:6:20",
															"nodeType": "YulIdentifier",
															"src": "3353:6:20"
														},
														{
															"arguments": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "3385:16:20",
																	"nodeType": "YulIdentifier",
																	"src": "3385:16:20"
																}
															],
															"functionName": {
																"name": "prepare_store_t_uint256",
																"nativeSrc": "3361:23:20",
																"nodeType": "YulIdentifier",
																"src": "3361:23:20"
															},
															"nativeSrc": "3361:41:20",
															"nodeType": "YulFunctionCall",
															"src": "3361:41:20"
														}
													],
													"functionName": {
														"name": "update_byte_slice_dynamic32",
														"nativeSrc": "3312:27:20",
														"nodeType": "YulIdentifier",
														"src": "3312:27:20"
													},
													"nativeSrc": "3312:91:20",
													"nodeType": "YulFunctionCall",
													"src": "3312:91:20"
												}
											],
											"functionName": {
												"name": "sstore",
												"nativeSrc": "3299:6:20",
												"nodeType": "YulIdentifier",
												"src": "3299:6:20"
											},
											"nativeSrc": "3299:105:20",
											"nodeType": "YulFunctionCall",
											"src": "3299:105:20"
										},
										"nativeSrc": "3299:105:20",
										"nodeType": "YulExpressionStatement",
										"src": "3299:105:20"
									}
								]
							},
							"name": "update_storage_value_t_uint256_to_t_uint256",
							"nativeSrc": "3141:269:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "3194:4:20",
									"nodeType": "YulTypedName",
									"src": "3194:4:20",
									"type": ""
								},
								{
									"name": "offset",
									"nativeSrc": "3200:6:20",
									"nodeType": "YulTypedName",
									"src": "3200:6:20",
									"type": ""
								},
								{
									"name": "value_0",
									"nativeSrc": "3208:7:20",
									"nodeType": "YulTypedName",
									"src": "3208:7:20",
									"type": ""
								}
							],
							"src": "3141:269:20"
						},
						{
							"body": {
								"nativeSrc": "3465:24:20",
								"nodeType": "YulBlock",
								"src": "3465:24:20",
								"statements": [
									{
										"nativeSrc": "3475:8:20",
										"nodeType": "YulAssignment",
										"src": "3475:8:20",
										"value": {
											"kind": "number",
											"nativeSrc": "3482:1:20",
											"nodeType": "YulLiteral",
											"src": "3482:1:20",
											"type": "",
											"value": "0"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "3475:3:20",
												"nodeType": "YulIdentifier",
												"src": "3475:3:20"
											}
										]
									}
								]
							},
							"name": "zero_value_for_split_t_uint256",
							"nativeSrc": "3416:73:20",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "3461:3:20",
									"nodeType": "YulTypedName",
									"src": "3461:3:20",
									"type": ""
								}
							],
							"src": "3416:73:20"
						},
						{
							"body": {
								"nativeSrc": "3548:136:20",
								"nodeType": "YulBlock",
								"src": "3548:136:20",
								"statements": [
									{
										"nativeSrc": "3558:46:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3558:46:20",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "3572:30:20",
												"nodeType": "YulIdentifier",
												"src": "3572:30:20"
											},
											"nativeSrc": "3572:32:20",
											"nodeType": "YulFunctionCall",
											"src": "3572:32:20"
										},
										"variables": [
											{
												"name": "zero_0",
												"nativeSrc": "3562:6:20",
												"nodeType": "YulTypedName",
												"src": "3562:6:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "3657:4:20",
													"nodeType": "YulIdentifier",
													"src": "3657:4:20"
												},
												{
													"name": "offset",
													"nativeSrc": "3663:6:20",
													"nodeType": "YulIdentifier",
													"src": "3663:6:20"
												},
												{
													"name": "zero_0",
													"nativeSrc": "3671:6:20",
													"nodeType": "YulIdentifier",
													"src": "3671:6:20"
												}
											],
											"functionName": {
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "3613:43:20",
												"nodeType": "YulIdentifier",
												"src": "3613:43:20"
											},
											"nativeSrc": "3613:65:20",
											"nodeType": "YulFunctionCall",
											"src": "3613:65:20"
										},
										"nativeSrc": "3613:65:20",
										"nodeType": "YulExpressionStatement",
										"src": "3613:65:20"
									}
								]
							},
							"name": "storage_set_to_zero_t_uint256",
							"nativeSrc": "3495:189:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "3534:4:20",
									"nodeType": "YulTypedName",
									"src": "3534:4:20",
									"type": ""
								},
								{
									"name": "offset",
									"nativeSrc": "3540:6:20",
									"nodeType": "YulTypedName",
									"src": "3540:6:20",
									"type": ""
								}
							],
							"src": "3495:189:20"
						},
						{
							"body": {
								"nativeSrc": "3740:136:20",
								"nodeType": "YulBlock",
								"src": "3740:136:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "3807:63:20",
											"nodeType": "YulBlock",
											"src": "3807:63:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "3851:5:20",
																"nodeType": "YulIdentifier",
																"src": "3851:5:20"
															},
															{
																"kind": "number",
																"nativeSrc": "3858:1:20",
																"nodeType": "YulLiteral",
																"src": "3858:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "storage_set_to_zero_t_uint256",
															"nativeSrc": "3821:29:20",
															"nodeType": "YulIdentifier",
															"src": "3821:29:20"
														},
														"nativeSrc": "3821:39:20",
														"nodeType": "YulFunctionCall",
														"src": "3821:39:20"
													},
													"nativeSrc": "3821:39:20",
													"nodeType": "YulExpressionStatement",
													"src": "3821:39:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "start",
													"nativeSrc": "3760:5:20",
													"nodeType": "YulIdentifier",
													"src": "3760:5:20"
												},
												{
													"name": "end",
													"nativeSrc": "3767:3:20",
													"nodeType": "YulIdentifier",
													"src": "3767:3:20"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "3757:2:20",
												"nodeType": "YulIdentifier",
												"src": "3757:2:20"
											},
											"nativeSrc": "3757:14:20",
											"nodeType": "YulFunctionCall",
											"src": "3757:14:20"
										},
										"nativeSrc": "3750:120:20",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "3772:26:20",
											"nodeType": "YulBlock",
											"src": "3772:26:20",
											"statements": [
												{
													"nativeSrc": "3774:22:20",
													"nodeType": "YulAssignment",
													"src": "3774:22:20",
													"value": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "3787:5:20",
																"nodeType": "YulIdentifier",
																"src": "3787:5:20"
															},
															{
																"kind": "number",
																"nativeSrc": "3794:1:20",
																"nodeType": "YulLiteral",
																"src": "3794:1:20",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "3783:3:20",
															"nodeType": "YulIdentifier",
															"src": "3783:3:20"
														},
														"nativeSrc": "3783:13:20",
														"nodeType": "YulFunctionCall",
														"src": "3783:13:20"
													},
													"variableNames": [
														{
															"name": "start",
															"nativeSrc": "3774:5:20",
															"nodeType": "YulIdentifier",
															"src": "3774:5:20"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "3754:2:20",
											"nodeType": "YulBlock",
											"src": "3754:2:20",
											"statements": []
										},
										"src": "3750:120:20"
									}
								]
							},
							"name": "clear_storage_range_t_bytes1",
							"nativeSrc": "3690:186:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "start",
									"nativeSrc": "3728:5:20",
									"nodeType": "YulTypedName",
									"src": "3728:5:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "3735:3:20",
									"nodeType": "YulTypedName",
									"src": "3735:3:20",
									"type": ""
								}
							],
							"src": "3690:186:20"
						},
						{
							"body": {
								"nativeSrc": "3961:464:20",
								"nodeType": "YulBlock",
								"src": "3961:464:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "3987:431:20",
											"nodeType": "YulBlock",
											"src": "3987:431:20",
											"statements": [
												{
													"nativeSrc": "4001:54:20",
													"nodeType": "YulVariableDeclaration",
													"src": "4001:54:20",
													"value": {
														"arguments": [
															{
																"name": "array",
																"nativeSrc": "4049:5:20",
																"nodeType": "YulIdentifier",
																"src": "4049:5:20"
															}
														],
														"functionName": {
															"name": "array_dataslot_t_string_storage",
															"nativeSrc": "4017:31:20",
															"nodeType": "YulIdentifier",
															"src": "4017:31:20"
														},
														"nativeSrc": "4017:38:20",
														"nodeType": "YulFunctionCall",
														"src": "4017:38:20"
													},
													"variables": [
														{
															"name": "dataArea",
															"nativeSrc": "4005:8:20",
															"nodeType": "YulTypedName",
															"src": "4005:8:20",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "4068:63:20",
													"nodeType": "YulVariableDeclaration",
													"src": "4068:63:20",
													"value": {
														"arguments": [
															{
																"name": "dataArea",
																"nativeSrc": "4091:8:20",
																"nodeType": "YulIdentifier",
																"src": "4091:8:20"
															},
															{
																"arguments": [
																	{
																		"name": "startIndex",
																		"nativeSrc": "4119:10:20",
																		"nodeType": "YulIdentifier",
																		"src": "4119:10:20"
																	}
																],
																"functionName": {
																	"name": "divide_by_32_ceil",
																	"nativeSrc": "4101:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "4101:17:20"
																},
																"nativeSrc": "4101:29:20",
																"nodeType": "YulFunctionCall",
																"src": "4101:29:20"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "4087:3:20",
															"nodeType": "YulIdentifier",
															"src": "4087:3:20"
														},
														"nativeSrc": "4087:44:20",
														"nodeType": "YulFunctionCall",
														"src": "4087:44:20"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nativeSrc": "4072:11:20",
															"nodeType": "YulTypedName",
															"src": "4072:11:20",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "4288:27:20",
														"nodeType": "YulBlock",
														"src": "4288:27:20",
														"statements": [
															{
																"nativeSrc": "4290:23:20",
																"nodeType": "YulAssignment",
																"src": "4290:23:20",
																"value": {
																	"name": "dataArea",
																	"nativeSrc": "4305:8:20",
																	"nodeType": "YulIdentifier",
																	"src": "4305:8:20"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nativeSrc": "4290:11:20",
																		"nodeType": "YulIdentifier",
																		"src": "4290:11:20"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nativeSrc": "4272:10:20",
																"nodeType": "YulIdentifier",
																"src": "4272:10:20"
															},
															{
																"kind": "number",
																"nativeSrc": "4284:2:20",
																"nodeType": "YulLiteral",
																"src": "4284:2:20",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "4269:2:20",
															"nodeType": "YulIdentifier",
															"src": "4269:2:20"
														},
														"nativeSrc": "4269:18:20",
														"nodeType": "YulFunctionCall",
														"src": "4269:18:20"
													},
													"nativeSrc": "4266:49:20",
													"nodeType": "YulIf",
													"src": "4266:49:20"
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "deleteStart",
																"nativeSrc": "4357:11:20",
																"nodeType": "YulIdentifier",
																"src": "4357:11:20"
															},
															{
																"arguments": [
																	{
																		"name": "dataArea",
																		"nativeSrc": "4374:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "4374:8:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nativeSrc": "4402:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "4402:3:20"
																			}
																		],
																		"functionName": {
																			"name": "divide_by_32_ceil",
																			"nativeSrc": "4384:17:20",
																			"nodeType": "YulIdentifier",
																			"src": "4384:17:20"
																		},
																		"nativeSrc": "4384:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4384:22:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4370:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4370:3:20"
																},
																"nativeSrc": "4370:37:20",
																"nodeType": "YulFunctionCall",
																"src": "4370:37:20"
															}
														],
														"functionName": {
															"name": "clear_storage_range_t_bytes1",
															"nativeSrc": "4328:28:20",
															"nodeType": "YulIdentifier",
															"src": "4328:28:20"
														},
														"nativeSrc": "4328:80:20",
														"nodeType": "YulFunctionCall",
														"src": "4328:80:20"
													},
													"nativeSrc": "4328:80:20",
													"nodeType": "YulExpressionStatement",
													"src": "4328:80:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nativeSrc": "3978:3:20",
													"nodeType": "YulIdentifier",
													"src": "3978:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3983:2:20",
													"nodeType": "YulLiteral",
													"src": "3983:2:20",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "3975:2:20",
												"nodeType": "YulIdentifier",
												"src": "3975:2:20"
											},
											"nativeSrc": "3975:11:20",
											"nodeType": "YulFunctionCall",
											"src": "3975:11:20"
										},
										"nativeSrc": "3972:446:20",
										"nodeType": "YulIf",
										"src": "3972:446:20"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_t_string_storage",
							"nativeSrc": "3882:543:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "3937:5:20",
									"nodeType": "YulTypedName",
									"src": "3937:5:20",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "3944:3:20",
									"nodeType": "YulTypedName",
									"src": "3944:3:20",
									"type": ""
								},
								{
									"name": "startIndex",
									"nativeSrc": "3949:10:20",
									"nodeType": "YulTypedName",
									"src": "3949:10:20",
									"type": ""
								}
							],
							"src": "3882:543:20"
						},
						{
							"body": {
								"nativeSrc": "4494:54:20",
								"nodeType": "YulBlock",
								"src": "4494:54:20",
								"statements": [
									{
										"nativeSrc": "4504:37:20",
										"nodeType": "YulAssignment",
										"src": "4504:37:20",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nativeSrc": "4529:4:20",
													"nodeType": "YulIdentifier",
													"src": "4529:4:20"
												},
												{
													"name": "value",
													"nativeSrc": "4535:5:20",
													"nodeType": "YulIdentifier",
													"src": "4535:5:20"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "4525:3:20",
												"nodeType": "YulIdentifier",
												"src": "4525:3:20"
											},
											"nativeSrc": "4525:16:20",
											"nodeType": "YulFunctionCall",
											"src": "4525:16:20"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "4504:8:20",
												"nodeType": "YulIdentifier",
												"src": "4504:8:20"
											}
										]
									}
								]
							},
							"name": "shift_right_unsigned_dynamic",
							"nativeSrc": "4431:117:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nativeSrc": "4469:4:20",
									"nodeType": "YulTypedName",
									"src": "4469:4:20",
									"type": ""
								},
								{
									"name": "value",
									"nativeSrc": "4475:5:20",
									"nodeType": "YulTypedName",
									"src": "4475:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "4485:8:20",
									"nodeType": "YulTypedName",
									"src": "4485:8:20",
									"type": ""
								}
							],
							"src": "4431:117:20"
						},
						{
							"body": {
								"nativeSrc": "4605:118:20",
								"nodeType": "YulBlock",
								"src": "4605:118:20",
								"statements": [
									{
										"nativeSrc": "4615:68:20",
										"nodeType": "YulVariableDeclaration",
										"src": "4615:68:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "4664:1:20",
																	"nodeType": "YulLiteral",
																	"src": "4664:1:20",
																	"type": "",
																	"value": "8"
																},
																{
																	"name": "bytes",
																	"nativeSrc": "4667:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4667:5:20"
																}
															],
															"functionName": {
																"name": "mul",
																"nativeSrc": "4660:3:20",
																"nodeType": "YulIdentifier",
																"src": "4660:3:20"
															},
															"nativeSrc": "4660:13:20",
															"nodeType": "YulFunctionCall",
															"src": "4660:13:20"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "4679:1:20",
																	"nodeType": "YulLiteral",
																	"src": "4679:1:20",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "4675:3:20",
																"nodeType": "YulIdentifier",
																"src": "4675:3:20"
															},
															"nativeSrc": "4675:6:20",
															"nodeType": "YulFunctionCall",
															"src": "4675:6:20"
														}
													],
													"functionName": {
														"name": "shift_right_unsigned_dynamic",
														"nativeSrc": "4631:28:20",
														"nodeType": "YulIdentifier",
														"src": "4631:28:20"
													},
													"nativeSrc": "4631:51:20",
													"nodeType": "YulFunctionCall",
													"src": "4631:51:20"
												}
											],
											"functionName": {
												"name": "not",
												"nativeSrc": "4627:3:20",
												"nodeType": "YulIdentifier",
												"src": "4627:3:20"
											},
											"nativeSrc": "4627:56:20",
											"nodeType": "YulFunctionCall",
											"src": "4627:56:20"
										},
										"variables": [
											{
												"name": "mask",
												"nativeSrc": "4619:4:20",
												"nodeType": "YulTypedName",
												"src": "4619:4:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "4692:25:20",
										"nodeType": "YulAssignment",
										"src": "4692:25:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "4706:4:20",
													"nodeType": "YulIdentifier",
													"src": "4706:4:20"
												},
												{
													"name": "mask",
													"nativeSrc": "4712:4:20",
													"nodeType": "YulIdentifier",
													"src": "4712:4:20"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "4702:3:20",
												"nodeType": "YulIdentifier",
												"src": "4702:3:20"
											},
											"nativeSrc": "4702:15:20",
											"nodeType": "YulFunctionCall",
											"src": "4702:15:20"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "4692:6:20",
												"nodeType": "YulIdentifier",
												"src": "4692:6:20"
											}
										]
									}
								]
							},
							"name": "mask_bytes_dynamic",
							"nativeSrc": "4554:169:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "4582:4:20",
									"nodeType": "YulTypedName",
									"src": "4582:4:20",
									"type": ""
								},
								{
									"name": "bytes",
									"nativeSrc": "4588:5:20",
									"nodeType": "YulTypedName",
									"src": "4588:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "4598:6:20",
									"nodeType": "YulTypedName",
									"src": "4598:6:20",
									"type": ""
								}
							],
							"src": "4554:169:20"
						},
						{
							"body": {
								"nativeSrc": "4809:214:20",
								"nodeType": "YulBlock",
								"src": "4809:214:20",
								"statements": [
									{
										"nativeSrc": "4942:37:20",
										"nodeType": "YulAssignment",
										"src": "4942:37:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "4969:4:20",
													"nodeType": "YulIdentifier",
													"src": "4969:4:20"
												},
												{
													"name": "len",
													"nativeSrc": "4975:3:20",
													"nodeType": "YulIdentifier",
													"src": "4975:3:20"
												}
											],
											"functionName": {
												"name": "mask_bytes_dynamic",
												"nativeSrc": "4950:18:20",
												"nodeType": "YulIdentifier",
												"src": "4950:18:20"
											},
											"nativeSrc": "4950:29:20",
											"nodeType": "YulFunctionCall",
											"src": "4950:29:20"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "4942:4:20",
												"nodeType": "YulIdentifier",
												"src": "4942:4:20"
											}
										]
									},
									{
										"nativeSrc": "4988:29:20",
										"nodeType": "YulAssignment",
										"src": "4988:29:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "4999:4:20",
													"nodeType": "YulIdentifier",
													"src": "4999:4:20"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "5009:1:20",
															"nodeType": "YulLiteral",
															"src": "5009:1:20",
															"type": "",
															"value": "2"
														},
														{
															"name": "len",
															"nativeSrc": "5012:3:20",
															"nodeType": "YulIdentifier",
															"src": "5012:3:20"
														}
													],
													"functionName": {
														"name": "mul",
														"nativeSrc": "5005:3:20",
														"nodeType": "YulIdentifier",
														"src": "5005:3:20"
													},
													"nativeSrc": "5005:11:20",
													"nodeType": "YulFunctionCall",
													"src": "5005:11:20"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "4996:2:20",
												"nodeType": "YulIdentifier",
												"src": "4996:2:20"
											},
											"nativeSrc": "4996:21:20",
											"nodeType": "YulFunctionCall",
											"src": "4996:21:20"
										},
										"variableNames": [
											{
												"name": "used",
												"nativeSrc": "4988:4:20",
												"nodeType": "YulIdentifier",
												"src": "4988:4:20"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nativeSrc": "4728:295:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "4790:4:20",
									"nodeType": "YulTypedName",
									"src": "4790:4:20",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "4796:3:20",
									"nodeType": "YulTypedName",
									"src": "4796:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nativeSrc": "4804:4:20",
									"nodeType": "YulTypedName",
									"src": "4804:4:20",
									"type": ""
								}
							],
							"src": "4728:295:20"
						},
						{
							"body": {
								"nativeSrc": "5120:1303:20",
								"nodeType": "YulBlock",
								"src": "5120:1303:20",
								"statements": [
									{
										"nativeSrc": "5131:51:20",
										"nodeType": "YulVariableDeclaration",
										"src": "5131:51:20",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "5178:3:20",
													"nodeType": "YulIdentifier",
													"src": "5178:3:20"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "5145:32:20",
												"nodeType": "YulIdentifier",
												"src": "5145:32:20"
											},
											"nativeSrc": "5145:37:20",
											"nodeType": "YulFunctionCall",
											"src": "5145:37:20"
										},
										"variables": [
											{
												"name": "newLen",
												"nativeSrc": "5135:6:20",
												"nodeType": "YulTypedName",
												"src": "5135:6:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "5267:22:20",
											"nodeType": "YulBlock",
											"src": "5267:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "5269:16:20",
															"nodeType": "YulIdentifier",
															"src": "5269:16:20"
														},
														"nativeSrc": "5269:18:20",
														"nodeType": "YulFunctionCall",
														"src": "5269:18:20"
													},
													"nativeSrc": "5269:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "5269:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "5239:6:20",
													"nodeType": "YulIdentifier",
													"src": "5239:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "5247:18:20",
													"nodeType": "YulLiteral",
													"src": "5247:18:20",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "5236:2:20",
												"nodeType": "YulIdentifier",
												"src": "5236:2:20"
											},
											"nativeSrc": "5236:30:20",
											"nodeType": "YulFunctionCall",
											"src": "5236:30:20"
										},
										"nativeSrc": "5233:56:20",
										"nodeType": "YulIf",
										"src": "5233:56:20"
									},
									{
										"nativeSrc": "5299:52:20",
										"nodeType": "YulVariableDeclaration",
										"src": "5299:52:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "slot",
															"nativeSrc": "5345:4:20",
															"nodeType": "YulIdentifier",
															"src": "5345:4:20"
														}
													],
													"functionName": {
														"name": "sload",
														"nativeSrc": "5339:5:20",
														"nodeType": "YulIdentifier",
														"src": "5339:5:20"
													},
													"nativeSrc": "5339:11:20",
													"nodeType": "YulFunctionCall",
													"src": "5339:11:20"
												}
											],
											"functionName": {
												"name": "extract_byte_array_length",
												"nativeSrc": "5313:25:20",
												"nodeType": "YulIdentifier",
												"src": "5313:25:20"
											},
											"nativeSrc": "5313:38:20",
											"nodeType": "YulFunctionCall",
											"src": "5313:38:20"
										},
										"variables": [
											{
												"name": "oldLen",
												"nativeSrc": "5303:6:20",
												"nodeType": "YulTypedName",
												"src": "5303:6:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "5444:4:20",
													"nodeType": "YulIdentifier",
													"src": "5444:4:20"
												},
												{
													"name": "oldLen",
													"nativeSrc": "5450:6:20",
													"nodeType": "YulIdentifier",
													"src": "5450:6:20"
												},
												{
													"name": "newLen",
													"nativeSrc": "5458:6:20",
													"nodeType": "YulIdentifier",
													"src": "5458:6:20"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "5398:45:20",
												"nodeType": "YulIdentifier",
												"src": "5398:45:20"
											},
											"nativeSrc": "5398:67:20",
											"nodeType": "YulFunctionCall",
											"src": "5398:67:20"
										},
										"nativeSrc": "5398:67:20",
										"nodeType": "YulExpressionStatement",
										"src": "5398:67:20"
									},
									{
										"nativeSrc": "5475:18:20",
										"nodeType": "YulVariableDeclaration",
										"src": "5475:18:20",
										"value": {
											"kind": "number",
											"nativeSrc": "5492:1:20",
											"nodeType": "YulLiteral",
											"src": "5492:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nativeSrc": "5479:9:20",
												"nodeType": "YulTypedName",
												"src": "5479:9:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "5503:17:20",
										"nodeType": "YulAssignment",
										"src": "5503:17:20",
										"value": {
											"kind": "number",
											"nativeSrc": "5516:4:20",
											"nodeType": "YulLiteral",
											"src": "5516:4:20",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nativeSrc": "5503:9:20",
												"nodeType": "YulIdentifier",
												"src": "5503:9:20"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "5567:611:20",
													"nodeType": "YulBlock",
													"src": "5567:611:20",
													"statements": [
														{
															"nativeSrc": "5581:37:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5581:37:20",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5600:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5600:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5612:4:20",
																				"nodeType": "YulLiteral",
																				"src": "5612:4:20",
																				"type": "",
																				"value": "0x1f"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "5608:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5608:3:20"
																		},
																		"nativeSrc": "5608:9:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5608:9:20"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5596:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5596:3:20"
																},
																"nativeSrc": "5596:22:20",
																"nodeType": "YulFunctionCall",
																"src": "5596:22:20"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nativeSrc": "5585:7:20",
																	"nodeType": "YulTypedName",
																	"src": "5585:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5632:51:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5632:51:20",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5678:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "5678:4:20"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_string_storage",
																	"nativeSrc": "5646:31:20",
																	"nodeType": "YulIdentifier",
																	"src": "5646:31:20"
																},
																"nativeSrc": "5646:37:20",
																"nodeType": "YulFunctionCall",
																"src": "5646:37:20"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nativeSrc": "5636:6:20",
																	"nodeType": "YulTypedName",
																	"src": "5636:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5696:10:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5696:10:20",
															"value": {
																"kind": "number",
																"nativeSrc": "5705:1:20",
																"nodeType": "YulLiteral",
																"src": "5705:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "5700:1:20",
																	"nodeType": "YulTypedName",
																	"src": "5700:1:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5764:163:20",
																"nodeType": "YulBlock",
																"src": "5764:163:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "5789:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "5789:6:20"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "5807:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "5807:3:20"
																								},
																								{
																									"name": "srcOffset",
																									"nativeSrc": "5812:9:20",
																									"nodeType": "YulIdentifier",
																									"src": "5812:9:20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "5803:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "5803:3:20"
																							},
																							"nativeSrc": "5803:19:20",
																							"nodeType": "YulFunctionCall",
																							"src": "5803:19:20"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "5797:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "5797:5:20"
																					},
																					"nativeSrc": "5797:26:20",
																					"nodeType": "YulFunctionCall",
																					"src": "5797:26:20"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "5782:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5782:6:20"
																			},
																			"nativeSrc": "5782:42:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5782:42:20"
																		},
																		"nativeSrc": "5782:42:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5782:42:20"
																	},
																	{
																		"nativeSrc": "5841:24:20",
																		"nodeType": "YulAssignment",
																		"src": "5841:24:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "5855:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "5855:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5863:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5863:1:20",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "5851:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "5851:3:20"
																			},
																			"nativeSrc": "5851:14:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5851:14:20"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nativeSrc": "5841:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5841:6:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "5882:31:20",
																		"nodeType": "YulAssignment",
																		"src": "5882:31:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nativeSrc": "5899:9:20",
																					"nodeType": "YulIdentifier",
																					"src": "5899:9:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5910:2:20",
																					"nodeType": "YulLiteral",
																					"src": "5910:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "5895:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "5895:3:20"
																			},
																			"nativeSrc": "5895:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5895:18:20"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nativeSrc": "5882:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5882:9:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "5730:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "5730:1:20"
																	},
																	{
																		"name": "loopEnd",
																		"nativeSrc": "5733:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "5733:7:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "5727:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "5727:2:20"
																},
																"nativeSrc": "5727:14:20",
																"nodeType": "YulFunctionCall",
																"src": "5727:14:20"
															},
															"nativeSrc": "5719:208:20",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "5742:21:20",
																"nodeType": "YulBlock",
																"src": "5742:21:20",
																"statements": [
																	{
																		"nativeSrc": "5744:17:20",
																		"nodeType": "YulAssignment",
																		"src": "5744:17:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "5753:1:20",
																					"nodeType": "YulIdentifier",
																					"src": "5753:1:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5756:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5756:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "5749:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "5749:3:20"
																			},
																			"nativeSrc": "5749:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5749:12:20"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "5744:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "5744:1:20"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "5723:3:20",
																"nodeType": "YulBlock",
																"src": "5723:3:20",
																"statements": []
															},
															"src": "5719:208:20"
														},
														{
															"body": {
																"nativeSrc": "5963:156:20",
																"nodeType": "YulBlock",
																"src": "5963:156:20",
																"statements": [
																	{
																		"nativeSrc": "5981:43:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "5981:43:20",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "6008:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6008:3:20"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "6013:9:20",
																							"nodeType": "YulIdentifier",
																							"src": "6013:9:20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "6004:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "6004:3:20"
																					},
																					"nativeSrc": "6004:19:20",
																					"nodeType": "YulFunctionCall",
																					"src": "6004:19:20"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "5998:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "5998:5:20"
																			},
																			"nativeSrc": "5998:26:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5998:26:20"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nativeSrc": "5985:9:20",
																				"nodeType": "YulTypedName",
																				"src": "5985:9:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "6048:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "6048:6:20"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nativeSrc": "6075:9:20",
																							"nodeType": "YulIdentifier",
																							"src": "6075:9:20"
																						},
																						{
																							"arguments": [
																								{
																									"name": "newLen",
																									"nativeSrc": "6090:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "6090:6:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "6098:4:20",
																									"nodeType": "YulLiteral",
																									"src": "6098:4:20",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nativeSrc": "6086:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "6086:3:20"
																							},
																							"nativeSrc": "6086:17:20",
																							"nodeType": "YulFunctionCall",
																							"src": "6086:17:20"
																						}
																					],
																					"functionName": {
																						"name": "mask_bytes_dynamic",
																						"nativeSrc": "6056:18:20",
																						"nodeType": "YulIdentifier",
																						"src": "6056:18:20"
																					},
																					"nativeSrc": "6056:48:20",
																					"nodeType": "YulFunctionCall",
																					"src": "6056:48:20"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "6041:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6041:6:20"
																			},
																			"nativeSrc": "6041:64:20",
																			"nodeType": "YulFunctionCall",
																			"src": "6041:64:20"
																		},
																		"nativeSrc": "6041:64:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "6041:64:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nativeSrc": "5946:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "5946:7:20"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "5955:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5955:6:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "5943:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "5943:2:20"
																},
																"nativeSrc": "5943:19:20",
																"nodeType": "YulFunctionCall",
																"src": "5943:19:20"
															},
															"nativeSrc": "5940:179:20",
															"nodeType": "YulIf",
															"src": "5940:179:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "6139:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "6139:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "newLen",
																						"nativeSrc": "6153:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "6153:6:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6161:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6161:1:20",
																						"type": "",
																						"value": "2"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "6149:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6149:3:20"
																				},
																				"nativeSrc": "6149:14:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6149:14:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6165:1:20",
																				"nodeType": "YulLiteral",
																				"src": "6165:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6145:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6145:3:20"
																		},
																		"nativeSrc": "6145:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6145:22:20"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "6132:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6132:6:20"
																},
																"nativeSrc": "6132:36:20",
																"nodeType": "YulFunctionCall",
																"src": "6132:36:20"
															},
															"nativeSrc": "6132:36:20",
															"nodeType": "YulExpressionStatement",
															"src": "6132:36:20"
														}
													]
												},
												"nativeSrc": "5560:618:20",
												"nodeType": "YulCase",
												"src": "5560:618:20",
												"value": {
													"kind": "number",
													"nativeSrc": "5565:1:20",
													"nodeType": "YulLiteral",
													"src": "5565:1:20",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "6195:222:20",
													"nodeType": "YulBlock",
													"src": "6195:222:20",
													"statements": [
														{
															"nativeSrc": "6209:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "6209:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "6222:1:20",
																"nodeType": "YulLiteral",
																"src": "6222:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "6213:5:20",
																	"nodeType": "YulTypedName",
																	"src": "6213:5:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6246:67:20",
																"nodeType": "YulBlock",
																"src": "6246:67:20",
																"statements": [
																	{
																		"nativeSrc": "6264:35:20",
																		"nodeType": "YulAssignment",
																		"src": "6264:35:20",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "6283:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6283:3:20"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "6288:9:20",
																							"nodeType": "YulIdentifier",
																							"src": "6288:9:20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "6279:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "6279:3:20"
																					},
																					"nativeSrc": "6279:19:20",
																					"nodeType": "YulFunctionCall",
																					"src": "6279:19:20"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "6273:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "6273:5:20"
																			},
																			"nativeSrc": "6273:26:20",
																			"nodeType": "YulFunctionCall",
																			"src": "6273:26:20"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "6264:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "6264:5:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nativeSrc": "6239:6:20",
																"nodeType": "YulIdentifier",
																"src": "6239:6:20"
															},
															"nativeSrc": "6236:77:20",
															"nodeType": "YulIf",
															"src": "6236:77:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "6333:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "6333:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6392:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "6392:5:20"
																			},
																			{
																				"name": "newLen",
																				"nativeSrc": "6399:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6399:6:20"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nativeSrc": "6339:52:20",
																			"nodeType": "YulIdentifier",
																			"src": "6339:52:20"
																		},
																		"nativeSrc": "6339:67:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6339:67:20"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "6326:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6326:6:20"
																},
																"nativeSrc": "6326:81:20",
																"nodeType": "YulFunctionCall",
																"src": "6326:81:20"
															},
															"nativeSrc": "6326:81:20",
															"nodeType": "YulExpressionStatement",
															"src": "6326:81:20"
														}
													]
												},
												"nativeSrc": "6187:230:20",
												"nodeType": "YulCase",
												"src": "6187:230:20",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "5540:6:20",
													"nodeType": "YulIdentifier",
													"src": "5540:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "5548:2:20",
													"nodeType": "YulLiteral",
													"src": "5548:2:20",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "5537:2:20",
												"nodeType": "YulIdentifier",
												"src": "5537:2:20"
											},
											"nativeSrc": "5537:14:20",
											"nodeType": "YulFunctionCall",
											"src": "5537:14:20"
										},
										"nativeSrc": "5530:887:20",
										"nodeType": "YulSwitch",
										"src": "5530:887:20"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nativeSrc": "5028:1395:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "5109:4:20",
									"nodeType": "YulTypedName",
									"src": "5109:4:20",
									"type": ""
								},
								{
									"name": "src",
									"nativeSrc": "5115:3:20",
									"nodeType": "YulTypedName",
									"src": "5115:3:20",
									"type": ""
								}
							],
							"src": "5028:1395:20"
						},
						{
							"body": {
								"nativeSrc": "6494:53:20",
								"nodeType": "YulBlock",
								"src": "6494:53:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6511:3:20",
													"nodeType": "YulIdentifier",
													"src": "6511:3:20"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "6534:5:20",
															"nodeType": "YulIdentifier",
															"src": "6534:5:20"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nativeSrc": "6516:17:20",
														"nodeType": "YulIdentifier",
														"src": "6516:17:20"
													},
													"nativeSrc": "6516:24:20",
													"nodeType": "YulFunctionCall",
													"src": "6516:24:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6504:6:20",
												"nodeType": "YulIdentifier",
												"src": "6504:6:20"
											},
											"nativeSrc": "6504:37:20",
											"nodeType": "YulFunctionCall",
											"src": "6504:37:20"
										},
										"nativeSrc": "6504:37:20",
										"nodeType": "YulExpressionStatement",
										"src": "6504:37:20"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nativeSrc": "6429:118:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "6482:5:20",
									"nodeType": "YulTypedName",
									"src": "6482:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "6489:3:20",
									"nodeType": "YulTypedName",
									"src": "6489:3:20",
									"type": ""
								}
							],
							"src": "6429:118:20"
						},
						{
							"body": {
								"nativeSrc": "6651:124:20",
								"nodeType": "YulBlock",
								"src": "6651:124:20",
								"statements": [
									{
										"nativeSrc": "6661:26:20",
										"nodeType": "YulAssignment",
										"src": "6661:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6673:9:20",
													"nodeType": "YulIdentifier",
													"src": "6673:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "6684:2:20",
													"nodeType": "YulLiteral",
													"src": "6684:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6669:3:20",
												"nodeType": "YulIdentifier",
												"src": "6669:3:20"
											},
											"nativeSrc": "6669:18:20",
											"nodeType": "YulFunctionCall",
											"src": "6669:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6661:4:20",
												"nodeType": "YulIdentifier",
												"src": "6661:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "6741:6:20",
													"nodeType": "YulIdentifier",
													"src": "6741:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6754:9:20",
															"nodeType": "YulIdentifier",
															"src": "6754:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6765:1:20",
															"nodeType": "YulLiteral",
															"src": "6765:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6750:3:20",
														"nodeType": "YulIdentifier",
														"src": "6750:3:20"
													},
													"nativeSrc": "6750:17:20",
													"nodeType": "YulFunctionCall",
													"src": "6750:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "6697:43:20",
												"nodeType": "YulIdentifier",
												"src": "6697:43:20"
											},
											"nativeSrc": "6697:71:20",
											"nodeType": "YulFunctionCall",
											"src": "6697:71:20"
										},
										"nativeSrc": "6697:71:20",
										"nodeType": "YulExpressionStatement",
										"src": "6697:71:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "6553:222:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6623:9:20",
									"nodeType": "YulTypedName",
									"src": "6623:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6635:6:20",
									"nodeType": "YulTypedName",
									"src": "6635:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6646:4:20",
									"nodeType": "YulTypedName",
									"src": "6646:4:20",
									"type": ""
								}
							],
							"src": "6553:222:20"
						}
					]
				},
				"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
				"id": 20,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "608060405234801562000010575f80fd5b5060405162002b9738038062002b9783398181016040528101906200003691906200027c565b806040518060400160405280600e81526020017f436f6465205175696c6c204e46540000000000000000000000000000000000008152506040518060400160405280600981526020017f434f44455155494c4c0000000000000000000000000000000000000000000000815250815f9081620000b3919062000510565b508060019081620000c5919062000510565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013b575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162000132919062000605565b60405180910390fd5b6200014c816200015460201b60201c565b505062000620565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f62000246826200021b565b9050919050565b62000258816200023a565b811462000263575f80fd5b50565b5f8151905062000276816200024d565b92915050565b5f6020828403121562000294576200029362000217565b5b5f620002a38482850162000266565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200032857607f821691505b6020821081036200033e576200033d620002e3565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620003a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000365565b620003ae868362000365565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620003f8620003f2620003ec84620003c6565b620003cf565b620003c6565b9050919050565b5f819050919050565b6200041383620003d8565b6200042b6200042282620003ff565b84845462000371565b825550505050565b5f90565b6200044162000433565b6200044e81848462000408565b505050565b5b818110156200047557620004695f8262000437565b60018101905062000454565b5050565b601f821115620004c4576200048e8162000344565b620004998462000356565b81016020851015620004a9578190505b620004c1620004b88562000356565b83018262000453565b50505b505050565b5f82821c905092915050565b5f620004e65f1984600802620004c9565b1980831691505092915050565b5f620005008383620004d5565b9150826002028217905092915050565b6200051b82620002ac565b67ffffffffffffffff811115620005375762000536620002b6565b5b62000543825462000310565b6200055082828562000479565b5f60209050601f83116001811462000586575f841562000571578287015190505b6200057d8582620004f3565b865550620005ec565b601f198416620005968662000344565b5f5b82811015620005bf5784890151825560018201915060208501945060208101905062000598565b86831015620005df5784890151620005db601f891682620004d5565b8355505b6001600288020188555050505b505050505050565b620005ff816200023a565b82525050565b5f6020820190506200061a5f830184620005f4565b92915050565b612569806200062e5f395ff3fe608060405234801561000f575f80fd5b5060043610610109575f3560e01c8063715018a6116100a0578063b88d4fde1161006f578063b88d4fde146102a1578063c87b56dd146102bd578063e985e9c5146102ed578063eacabe141461031d578063f2fde38b1461034d57610109565b8063715018a61461023f5780638da5cb5b1461024957806395d89b4114610267578063a22cb4651461028557610109565b806323b872dd116100dc57806323b872dd146101a757806342842e0e146101c35780636352211e146101df57806370a082311461020f57610109565b806301ffc9a71461010d57806306fdde031461013d578063081812fc1461015b578063095ea7b31461018b575b5f80fd5b61012760048036038101906101229190611a22565b610369565b6040516101349190611a67565b60405180910390f35b6101456103c9565b6040516101529190611b0a565b60405180910390f35b61017560048036038101906101709190611b5d565b610458565b6040516101829190611bc7565b60405180910390f35b6101a560048036038101906101a09190611c0a565b610473565b005b6101c160048036038101906101bc9190611c48565b610489565b005b6101dd60048036038101906101d89190611c48565b610588565b005b6101f960048036038101906101f49190611b5d565b6105a7565b6040516102069190611bc7565b60405180910390f35b61022960048036038101906102249190611c98565b6105b8565b6040516102369190611cd2565b60405180910390f35b61024761066e565b005b610251610681565b60405161025e9190611bc7565b60405180910390f35b61026f6106a9565b60405161027c9190611b0a565b60405180910390f35b61029f600480360381019061029a9190611d15565b610739565b005b6102bb60048036038101906102b69190611e7f565b61074f565b005b6102d760048036038101906102d29190611b5d565b610774565b6040516102e49190611b0a565b60405180910390f35b61030760048036038101906103029190611eff565b61087f565b6040516103149190611a67565b60405180910390f35b61033760048036038101906103329190611fdb565b61090d565b6040516103449190611cd2565b60405180910390f35b61036760048036038101906103629190611c98565b61094d565b005b5f634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103c257506103c1826109d1565b5b9050919050565b60605f80546103d790612062565b80601f016020809104026020016040519081016040528092919081815260200182805461040390612062565b801561044e5780601f106104255761010080835404028352916020019161044e565b820191905f5260205f20905b81548152906001019060200180831161043157829003601f168201915b5050505050905090565b5f61046282610ab2565b5061046c82610b38565b9050919050565b6104858282610480610b71565b610b78565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104f9575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016104f09190611bc7565b60405180910390fd5b5f61050c8383610507610b71565b610b8a565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610582578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161057993929190612092565b60405180910390fd5b50505050565b6105a283838360405180602001604052805f81525061074f565b505050565b5f6105b182610ab2565b9050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610629575f6040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016106209190611bc7565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610676610d95565b61067f5f610e1c565b565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546106b890612062565b80601f01602080910402602001604051908101604052809291908181526020018280546106e490612062565b801561072f5780601f106107065761010080835404028352916020019161072f565b820191905f5260205f20905b81548152906001019060200180831161071257829003601f168201915b5050505050905090565b61074b610744610b71565b8383610edf565b5050565b61075a848484610489565b61076e610765610b71565b85858585611048565b50505050565b606061077f82610ab2565b505f60065f8481526020019081526020015f20805461079d90612062565b80601f01602080910402602001604051908101604052809291908181526020018280546107c990612062565b80156108145780601f106107eb57610100808354040283529160200191610814565b820191905f5260205f20905b8154815290600101906020018083116107f757829003601f168201915b505050505090505f6108246111f4565b90505f81510361083857819250505061087a565b5f8251111561086c578082604051602001610854929190612101565b6040516020818303038152906040529250505061087a565b6108758461120a565b925050505b919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f610916610d95565b5f60085f81548092919061092990612151565b9190505590506109398482611270565b6109438184611363565b8091505092915050565b610955610d95565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109c5575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109bc9190611bc7565b60405180910390fd5b6109ce81610e1c565b50565b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a9b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610aab5750610aaa826113bd565b5b9050919050565b5f80610abd83611426565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b2f57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610b269190611cd2565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b610b85838383600161145f565b505050565b5f80610b9584611426565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610bd657610bd581848661161e565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c6157610c155f855f8061145f565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610ce057600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b610d9d610b71565b73ffffffffffffffffffffffffffffffffffffffff16610dbb610681565b73ffffffffffffffffffffffffffffffffffffffff1614610e1a57610dde610b71565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610e119190611bc7565b60405180910390fd5b565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f4f57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610f469190611bc7565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161103b9190611a67565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b11156111ed578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b81526004016110a694939291906121ea565b6020604051808303815f875af19250505080156110e157506040513d601f19601f820116820180604052508101906110de9190612248565b60015b611162573d805f811461110f576040519150601f19603f3d011682016040523d82523d5f602084013e611114565b606091505b505f81510361115a57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016111519190611bc7565b60405180910390fd5b805160208201fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146111eb57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016111e29190611bc7565b60405180910390fd5b505b5050505050565b606060405180602001604052805f815250905090565b606061121582610ab2565b505f61121f6111f4565b90505f81511161123d5760405180602001604052805f815250611268565b80611247846116e1565b604051602001611258929190612101565b6040516020818303038152906040525b915050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112e0575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016112d79190611bc7565b60405180910390fd5b5f6112ec83835f610b8a565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461135e575f6040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016113559190611bc7565b60405180910390fd5b505050565b8060065f8481526020019081526020015f2090816113819190612410565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516113b19190611cd2565b60405180910390a15050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061149757505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156115c9575f6114a684610ab2565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561151057508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156115235750611521818461087f565b155b1561156557826040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161155c9190611bc7565b60405180910390fd5b81156115c757838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6116298383836117ab565b6116dc575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361169d57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016116949190611cd2565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016116d39291906124df565b60405180910390fd5b505050565b60605f60016116ef8461186b565b0190505f8167ffffffffffffffff81111561170d5761170c611d5b565b5b6040519080825280601f01601f19166020018201604052801561173f5781602001600182028036833780820191505090505b5090505f82602083010190505b6001156117a0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161179557611794612506565b5b0494505f850361174c575b819350505050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561186257508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806118235750611822848461087f565b5b8061186157508273ffffffffffffffffffffffffffffffffffffffff1661184983610b38565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106118c7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816118bd576118bc612506565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611904576d04ee2d6d415b85acef810000000083816118fa576118f9612506565b5b0492506020810190505b662386f26fc10000831061193357662386f26fc10000838161192957611928612506565b5b0492506010810190505b6305f5e100831061195c576305f5e100838161195257611951612506565b5b0492506008810190505b612710831061198157612710838161197757611976612506565b5b0492506004810190505b606483106119a4576064838161199a57611999612506565b5b0492506002810190505b600a83106119b3576001810190505b80915050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a01816119cd565b8114611a0b575f80fd5b50565b5f81359050611a1c816119f8565b92915050565b5f60208284031215611a3757611a366119c5565b5b5f611a4484828501611a0e565b91505092915050565b5f8115159050919050565b611a6181611a4d565b82525050565b5f602082019050611a7a5f830184611a58565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611ab7578082015181840152602081019050611a9c565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611adc82611a80565b611ae68185611a8a565b9350611af6818560208601611a9a565b611aff81611ac2565b840191505092915050565b5f6020820190508181035f830152611b228184611ad2565b905092915050565b5f819050919050565b611b3c81611b2a565b8114611b46575f80fd5b50565b5f81359050611b5781611b33565b92915050565b5f60208284031215611b7257611b716119c5565b5b5f611b7f84828501611b49565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611bb182611b88565b9050919050565b611bc181611ba7565b82525050565b5f602082019050611bda5f830184611bb8565b92915050565b611be981611ba7565b8114611bf3575f80fd5b50565b5f81359050611c0481611be0565b92915050565b5f8060408385031215611c2057611c1f6119c5565b5b5f611c2d85828601611bf6565b9250506020611c3e85828601611b49565b9150509250929050565b5f805f60608486031215611c5f57611c5e6119c5565b5b5f611c6c86828701611bf6565b9350506020611c7d86828701611bf6565b9250506040611c8e86828701611b49565b9150509250925092565b5f60208284031215611cad57611cac6119c5565b5b5f611cba84828501611bf6565b91505092915050565b611ccc81611b2a565b82525050565b5f602082019050611ce55f830184611cc3565b92915050565b611cf481611a4d565b8114611cfe575f80fd5b50565b5f81359050611d0f81611ceb565b92915050565b5f8060408385031215611d2b57611d2a6119c5565b5b5f611d3885828601611bf6565b9250506020611d4985828601611d01565b9150509250929050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611d9182611ac2565b810181811067ffffffffffffffff82111715611db057611daf611d5b565b5b80604052505050565b5f611dc26119bc565b9050611dce8282611d88565b919050565b5f67ffffffffffffffff821115611ded57611dec611d5b565b5b611df682611ac2565b9050602081019050919050565b828183375f83830152505050565b5f611e23611e1e84611dd3565b611db9565b905082815260208101848484011115611e3f57611e3e611d57565b5b611e4a848285611e03565b509392505050565b5f82601f830112611e6657611e65611d53565b5b8135611e76848260208601611e11565b91505092915050565b5f805f8060808587031215611e9757611e966119c5565b5b5f611ea487828801611bf6565b9450506020611eb587828801611bf6565b9350506040611ec687828801611b49565b925050606085013567ffffffffffffffff811115611ee757611ee66119c9565b5b611ef387828801611e52565b91505092959194509250565b5f8060408385031215611f1557611f146119c5565b5b5f611f2285828601611bf6565b9250506020611f3385828601611bf6565b9150509250929050565b5f67ffffffffffffffff821115611f5757611f56611d5b565b5b611f6082611ac2565b9050602081019050919050565b5f611f7f611f7a84611f3d565b611db9565b905082815260208101848484011115611f9b57611f9a611d57565b5b611fa6848285611e03565b509392505050565b5f82601f830112611fc257611fc1611d53565b5b8135611fd2848260208601611f6d565b91505092915050565b5f8060408385031215611ff157611ff06119c5565b5b5f611ffe85828601611bf6565b925050602083013567ffffffffffffffff81111561201f5761201e6119c9565b5b61202b85828601611fae565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061207957607f821691505b60208210810361208c5761208b612035565b5b50919050565b5f6060820190506120a55f830186611bb8565b6120b26020830185611cc3565b6120bf6040830184611bb8565b949350505050565b5f81905092915050565b5f6120db82611a80565b6120e581856120c7565b93506120f5818560208601611a9a565b80840191505092915050565b5f61210c82856120d1565b915061211882846120d1565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61215b82611b2a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361218d5761218c612124565b5b600182019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f6121bc82612198565b6121c681856121a2565b93506121d6818560208601611a9a565b6121df81611ac2565b840191505092915050565b5f6080820190506121fd5f830187611bb8565b61220a6020830186611bb8565b6122176040830185611cc3565b818103606083015261222981846121b2565b905095945050505050565b5f81519050612242816119f8565b92915050565b5f6020828403121561225d5761225c6119c5565b5b5f61226a84828501612234565b91505092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026122cf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612294565b6122d98683612294565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61231461230f61230a84611b2a565b6122f1565b611b2a565b9050919050565b5f819050919050565b61232d836122fa565b6123416123398261231b565b8484546122a0565b825550505050565b5f90565b612355612349565b612360818484612324565b505050565b5b81811015612383576123785f8261234d565b600181019050612366565b5050565b601f8211156123c85761239981612273565b6123a284612285565b810160208510156123b1578190505b6123c56123bd85612285565b830182612365565b50505b505050565b5f82821c905092915050565b5f6123e85f19846008026123cd565b1980831691505092915050565b5f61240083836123d9565b9150826002028217905092915050565b61241982611a80565b67ffffffffffffffff81111561243257612431611d5b565b5b61243c8254612062565b612447828285612387565b5f60209050601f831160018114612478575f8415612466578287015190505b61247085826123f5565b8655506124d7565b601f19841661248686612273565b5f5b828110156124ad57848901518255600182019150602085019450602081019050612488565b868310156124ca57848901516124c6601f8916826123d9565b8355505b6001600288020188555050505b505050505050565b5f6040820190506124f25f830185611bb8565b6124ff6020830184611cc3565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea2646970667358221220016be9930617ef0bf09c87a014f77f4aa09785ff7e2f83d13ed49608b2f08ee164736f6c63430008180033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2B97 CODESIZE SUB DUP1 PUSH3 0x2B97 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x36 SWAP2 SWAP1 PUSH3 0x27C JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x436F6465205175696C6C204E4654000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x434F44455155494C4C0000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH0 SWAP1 DUP2 PUSH3 0xB3 SWAP2 SWAP1 PUSH3 0x510 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xC5 SWAP2 SWAP1 PUSH3 0x510 JUMP JUMPDEST POP POP POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x13B JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x132 SWAP2 SWAP1 PUSH3 0x605 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x14C DUP2 PUSH3 0x154 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP PUSH3 0x620 JUMP JUMPDEST PUSH0 PUSH1 0x7 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0x246 DUP3 PUSH3 0x21B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x258 DUP2 PUSH3 0x23A JUMP JUMPDEST DUP2 EQ PUSH3 0x263 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH3 0x276 DUP2 PUSH3 0x24D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x294 JUMPI PUSH3 0x293 PUSH3 0x217 JUMP JUMPDEST JUMPDEST PUSH0 PUSH3 0x2A3 DUP5 DUP3 DUP6 ADD PUSH3 0x266 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x328 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x33E JUMPI PUSH3 0x33D PUSH3 0x2E3 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH3 0x3A2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x365 JUMP JUMPDEST PUSH3 0x3AE DUP7 DUP4 PUSH3 0x365 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0x3F8 PUSH3 0x3F2 PUSH3 0x3EC DUP5 PUSH3 0x3C6 JUMP JUMPDEST PUSH3 0x3CF JUMP JUMPDEST PUSH3 0x3C6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x413 DUP4 PUSH3 0x3D8 JUMP JUMPDEST PUSH3 0x42B PUSH3 0x422 DUP3 PUSH3 0x3FF JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x371 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH3 0x441 PUSH3 0x433 JUMP JUMPDEST PUSH3 0x44E DUP2 DUP5 DUP5 PUSH3 0x408 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x475 JUMPI PUSH3 0x469 PUSH0 DUP3 PUSH3 0x437 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x454 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x4C4 JUMPI PUSH3 0x48E DUP2 PUSH3 0x344 JUMP JUMPDEST PUSH3 0x499 DUP5 PUSH3 0x356 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x4A9 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x4C1 PUSH3 0x4B8 DUP6 PUSH3 0x356 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x453 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0x4E6 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x4C9 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0x500 DUP4 DUP4 PUSH3 0x4D5 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x51B DUP3 PUSH3 0x2AC JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x537 JUMPI PUSH3 0x536 PUSH3 0x2B6 JUMP JUMPDEST JUMPDEST PUSH3 0x543 DUP3 SLOAD PUSH3 0x310 JUMP JUMPDEST PUSH3 0x550 DUP3 DUP3 DUP6 PUSH3 0x479 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x586 JUMPI PUSH0 DUP5 ISZERO PUSH3 0x571 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x57D DUP6 DUP3 PUSH3 0x4F3 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x5EC JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x596 DUP7 PUSH3 0x344 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x5BF JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x598 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x5DF JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x5DB PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x4D5 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x5FF DUP2 PUSH3 0x23A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x61A PUSH0 DUP4 ADD DUP5 PUSH3 0x5F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2569 DUP1 PUSH3 0x62E PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x109 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0xEACABE14 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x34D JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x285 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x20F JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x18B JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x127 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x122 SWAP2 SWAP1 PUSH2 0x1A22 JUMP JUMPDEST PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x145 PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1B0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0x1C0A JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x1C48 JUMP JUMPDEST PUSH2 0x489 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0x1C48 JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x229 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x224 SWAP2 SWAP1 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x5B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x247 PUSH2 0x66E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x251 PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26F PUSH2 0x6A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27C SWAP2 SWAP1 PUSH2 0x1B0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x29F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29A SWAP2 SWAP1 PUSH2 0x1D15 JUMP JUMPDEST PUSH2 0x739 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST PUSH2 0x74F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D2 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x774 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E4 SWAP2 SWAP1 PUSH2 0x1B0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x302 SWAP2 SWAP1 PUSH2 0x1EFF JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x314 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x337 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x1FDB JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x344 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x367 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x94D JUMP JUMPDEST STOP JUMPDEST PUSH0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x3C2 JUMPI POP PUSH2 0x3C1 DUP3 PUSH2 0x9D1 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 SLOAD PUSH2 0x3D7 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x403 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x44E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x425 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x44E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x431 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x462 DUP3 PUSH2 0xAB2 JUMP JUMPDEST POP PUSH2 0x46C DUP3 PUSH2 0xB38 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x485 DUP3 DUP3 PUSH2 0x480 PUSH2 0xB71 JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F9 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F0 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x50C DUP4 DUP4 PUSH2 0x507 PUSH2 0xB71 JUMP JUMPDEST PUSH2 0xB8A JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x582 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x579 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2092 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x5A2 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x74F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x5B1 DUP3 PUSH2 0xAB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x629 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x620 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x676 PUSH2 0xD95 JUMP JUMPDEST PUSH2 0x67F PUSH0 PUSH2 0xE1C JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x7 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x6B8 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6E4 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x72F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x706 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x72F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x712 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x74B PUSH2 0x744 PUSH2 0xB71 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xEDF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x75A DUP5 DUP5 DUP5 PUSH2 0x489 JUMP JUMPDEST PUSH2 0x76E PUSH2 0x765 PUSH2 0xB71 JUMP JUMPDEST DUP6 DUP6 DUP6 DUP6 PUSH2 0x1048 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x77F DUP3 PUSH2 0xAB2 JUMP JUMPDEST POP PUSH0 PUSH1 0x6 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH2 0x79D SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7C9 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x814 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7EB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x814 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7F7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH0 PUSH2 0x824 PUSH2 0x11F4 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD SUB PUSH2 0x838 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x87A JUMP JUMPDEST PUSH0 DUP3 MLOAD GT ISZERO PUSH2 0x86C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x854 SWAP3 SWAP2 SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x87A JUMP JUMPDEST PUSH2 0x875 DUP5 PUSH2 0x120A JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x916 PUSH2 0xD95 JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x929 SWAP1 PUSH2 0x2151 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0x939 DUP5 DUP3 PUSH2 0x1270 JUMP JUMPDEST PUSH2 0x943 DUP2 DUP5 PUSH2 0x1363 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x955 PUSH2 0xD95 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9C5 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BC SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9CE DUP2 PUSH2 0xE1C JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xA9B JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0xAAB JUMPI POP PUSH2 0xAAA DUP3 PUSH2 0x13BD JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xABD DUP4 PUSH2 0x1426 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB2F JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB26 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x4 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB85 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x145F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB95 DUP5 PUSH2 0x1426 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD6 JUMPI PUSH2 0xBD5 DUP2 DUP5 DUP7 PUSH2 0x161E JUMP JUMPDEST JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC61 JUMPI PUSH2 0xC15 PUSH0 DUP6 PUSH0 DUP1 PUSH2 0x145F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCE0 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD9D PUSH2 0xB71 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDBB PUSH2 0x681 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE1A JUMPI PUSH2 0xDDE PUSH2 0xB71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE11 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x7 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF4F JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF46 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x103B SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x11ED JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 DUP7 DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10A6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21EA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x10E1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10DE SWAP2 SWAP1 PUSH2 0x2248 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1162 JUMPI RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x110F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1114 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH0 DUP2 MLOAD SUB PUSH2 0x115A JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1151 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x11EB JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11E2 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1215 DUP3 PUSH2 0xAB2 JUMP JUMPDEST POP PUSH0 PUSH2 0x121F PUSH2 0x11F4 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT PUSH2 0x123D JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x1268 JUMP JUMPDEST DUP1 PUSH2 0x1247 DUP5 PUSH2 0x16E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1258 SWAP3 SWAP2 SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x12E0 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D7 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x12EC DUP4 DUP4 PUSH0 PUSH2 0xB8A JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x135E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1355 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x6 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SWAP1 DUP2 PUSH2 0x1381 SWAP2 SWAP1 PUSH2 0x2410 JUMP JUMPDEST POP PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 DUP3 PUSH1 0x40 MLOAD PUSH2 0x13B1 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x2 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1497 JUMPI POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x15C9 JUMPI PUSH0 PUSH2 0x14A6 DUP5 PUSH2 0xAB2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1510 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1523 JUMPI POP PUSH2 0x1521 DUP2 DUP5 PUSH2 0x87F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1565 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x155C SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x15C7 JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1629 DUP4 DUP4 DUP4 PUSH2 0x17AB JUMP JUMPDEST PUSH2 0x16DC JUMPI PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x169D JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1694 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16D3 SWAP3 SWAP2 SWAP1 PUSH2 0x24DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH1 0x1 PUSH2 0x16EF DUP5 PUSH2 0x186B JUMP JUMPDEST ADD SWAP1 POP PUSH0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x170D JUMPI PUSH2 0x170C PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x173F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 DUP3 PUSH1 0x20 DUP4 ADD ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x17A0 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1795 JUMPI PUSH2 0x1794 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH0 DUP6 SUB PUSH2 0x174C JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1862 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1823 JUMPI POP PUSH2 0x1822 DUP5 DUP5 PUSH2 0x87F JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1861 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1849 DUP4 PUSH2 0xB38 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x18C7 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x18BD JUMPI PUSH2 0x18BC PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1904 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x18FA JUMPI PUSH2 0x18F9 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1933 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1929 JUMPI PUSH2 0x1928 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x195C JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1952 JUMPI PUSH2 0x1951 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1981 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1977 JUMPI PUSH2 0x1976 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x19A4 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x199A JUMPI PUSH2 0x1999 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x19B3 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A01 DUP2 PUSH2 0x19CD JUMP JUMPDEST DUP2 EQ PUSH2 0x1A0B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A1C DUP2 PUSH2 0x19F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A37 JUMPI PUSH2 0x1A36 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1A44 DUP5 DUP3 DUP6 ADD PUSH2 0x1A0E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A61 DUP2 PUSH2 0x1A4D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A7A PUSH0 DUP4 ADD DUP5 PUSH2 0x1A58 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1AB7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A9C JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1ADC DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x1AE6 DUP2 DUP6 PUSH2 0x1A8A JUMP JUMPDEST SWAP4 POP PUSH2 0x1AF6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A9A JUMP JUMPDEST PUSH2 0x1AFF DUP2 PUSH2 0x1AC2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1B22 DUP2 DUP5 PUSH2 0x1AD2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B3C DUP2 PUSH2 0x1B2A JUMP JUMPDEST DUP2 EQ PUSH2 0x1B46 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B57 DUP2 PUSH2 0x1B33 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B72 JUMPI PUSH2 0x1B71 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1B7F DUP5 DUP3 DUP6 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BB1 DUP3 PUSH2 0x1B88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC1 DUP2 PUSH2 0x1BA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BDA PUSH0 DUP4 ADD DUP5 PUSH2 0x1BB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BE9 DUP2 PUSH2 0x1BA7 JUMP JUMPDEST DUP2 EQ PUSH2 0x1BF3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C04 DUP2 PUSH2 0x1BE0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C20 JUMPI PUSH2 0x1C1F PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C2D DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1C3E DUP6 DUP3 DUP7 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C5F JUMPI PUSH2 0x1C5E PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C6C DUP7 DUP3 DUP8 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1C7D DUP7 DUP3 DUP8 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1C8E DUP7 DUP3 DUP8 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CAD JUMPI PUSH2 0x1CAC PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1CBA DUP5 DUP3 DUP6 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CCC DUP2 PUSH2 0x1B2A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CE5 PUSH0 DUP4 ADD DUP5 PUSH2 0x1CC3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CF4 DUP2 PUSH2 0x1A4D JUMP JUMPDEST DUP2 EQ PUSH2 0x1CFE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D0F DUP2 PUSH2 0x1CEB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D2B JUMPI PUSH2 0x1D2A PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1D38 DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D49 DUP6 DUP3 DUP7 ADD PUSH2 0x1D01 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x1D91 DUP3 PUSH2 0x1AC2 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1DB0 JUMPI PUSH2 0x1DAF PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1DC2 PUSH2 0x19BC JUMP JUMPDEST SWAP1 POP PUSH2 0x1DCE DUP3 DUP3 PUSH2 0x1D88 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1DED JUMPI PUSH2 0x1DEC PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST PUSH2 0x1DF6 DUP3 PUSH2 0x1AC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1E23 PUSH2 0x1E1E DUP5 PUSH2 0x1DD3 JUMP JUMPDEST PUSH2 0x1DB9 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1E3F JUMPI PUSH2 0x1E3E PUSH2 0x1D57 JUMP JUMPDEST JUMPDEST PUSH2 0x1E4A DUP5 DUP3 DUP6 PUSH2 0x1E03 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E66 JUMPI PUSH2 0x1E65 PUSH2 0x1D53 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1E76 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1E11 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E97 JUMPI PUSH2 0x1E96 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EA4 DUP8 DUP3 DUP9 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1EB5 DUP8 DUP3 DUP9 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1EC6 DUP8 DUP3 DUP9 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EE7 JUMPI PUSH2 0x1EE6 PUSH2 0x19C9 JUMP JUMPDEST JUMPDEST PUSH2 0x1EF3 DUP8 DUP3 DUP9 ADD PUSH2 0x1E52 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F15 JUMPI PUSH2 0x1F14 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F22 DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F33 DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1F57 JUMPI PUSH2 0x1F56 PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST PUSH2 0x1F60 DUP3 PUSH2 0x1AC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1F7F PUSH2 0x1F7A DUP5 PUSH2 0x1F3D JUMP JUMPDEST PUSH2 0x1DB9 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x1F9A PUSH2 0x1D57 JUMP JUMPDEST JUMPDEST PUSH2 0x1FA6 DUP5 DUP3 DUP6 PUSH2 0x1E03 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1FC2 JUMPI PUSH2 0x1FC1 PUSH2 0x1D53 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1FD2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1F6D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FF1 JUMPI PUSH2 0x1FF0 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FFE DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x201F JUMPI PUSH2 0x201E PUSH2 0x19C9 JUMP JUMPDEST JUMPDEST PUSH2 0x202B DUP6 DUP3 DUP7 ADD PUSH2 0x1FAE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2079 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x208C JUMPI PUSH2 0x208B PUSH2 0x2035 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x20A5 PUSH0 DUP4 ADD DUP7 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x20B2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0x20BF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1BB8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x20DB DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x20E5 DUP2 DUP6 PUSH2 0x20C7 JUMP JUMPDEST SWAP4 POP PUSH2 0x20F5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A9A JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x210C DUP3 DUP6 PUSH2 0x20D1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2118 DUP3 DUP5 PUSH2 0x20D1 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x215B DUP3 PUSH2 0x1B2A JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x218D JUMPI PUSH2 0x218C PUSH2 0x2124 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x21BC DUP3 PUSH2 0x2198 JUMP JUMPDEST PUSH2 0x21C6 DUP2 DUP6 PUSH2 0x21A2 JUMP JUMPDEST SWAP4 POP PUSH2 0x21D6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A9A JUMP JUMPDEST PUSH2 0x21DF DUP2 PUSH2 0x1AC2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x21FD PUSH0 DUP4 ADD DUP8 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x220A PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x2217 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1CC3 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2229 DUP2 DUP5 PUSH2 0x21B2 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2242 DUP2 PUSH2 0x19F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x225D JUMPI PUSH2 0x225C PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x226A DUP5 DUP3 DUP6 ADD PUSH2 0x2234 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x22CF PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2294 JUMP JUMPDEST PUSH2 0x22D9 DUP7 DUP4 PUSH2 0x2294 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2314 PUSH2 0x230F PUSH2 0x230A DUP5 PUSH2 0x1B2A JUMP JUMPDEST PUSH2 0x22F1 JUMP JUMPDEST PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x232D DUP4 PUSH2 0x22FA JUMP JUMPDEST PUSH2 0x2341 PUSH2 0x2339 DUP3 PUSH2 0x231B JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x22A0 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x2355 PUSH2 0x2349 JUMP JUMPDEST PUSH2 0x2360 DUP2 DUP5 DUP5 PUSH2 0x2324 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2383 JUMPI PUSH2 0x2378 PUSH0 DUP3 PUSH2 0x234D JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2366 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x23C8 JUMPI PUSH2 0x2399 DUP2 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x23A2 DUP5 PUSH2 0x2285 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x23B1 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x23C5 PUSH2 0x23BD DUP6 PUSH2 0x2285 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x2365 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x23E8 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x23CD JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2400 DUP4 DUP4 PUSH2 0x23D9 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2419 DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2432 JUMPI PUSH2 0x2431 PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST PUSH2 0x243C DUP3 SLOAD PUSH2 0x2062 JUMP JUMPDEST PUSH2 0x2447 DUP3 DUP3 DUP6 PUSH2 0x2387 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2478 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x2466 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x2470 DUP6 DUP3 PUSH2 0x23F5 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x24D7 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x2486 DUP7 PUSH2 0x2273 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x24AD JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2488 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x24CA JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x24C6 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x23D9 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x24F2 PUSH0 DUP4 ADD DUP6 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x24FF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CC3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD PUSH12 0xE9930617EF0BF09C87A014F7 PUSH32 0x4AA09785FF7E2F83D13ED49608B2F08EE164736F6C6343000818003300000000 ",
		"sourceMap": "248:475:19:-:0;;;344:108;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;432:12;1380:113:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1454:5;1446;:13;;;;;;:::i;:::-;;1479:7;1469;:17;;;;;;:::i;:::-;;1380:113;;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;344:108:19;248:475;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;88:117:20:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:99::-;1254:6;1288:5;1282:12;1272:22;;1202:99;;;:::o;1307:180::-;1355:77;1352:1;1345:88;1452:4;1449:1;1442:15;1476:4;1473:1;1466:15;1493:180;1541:77;1538:1;1531:88;1638:4;1635:1;1628:15;1662:4;1659:1;1652:15;1679:320;1723:6;1760:1;1754:4;1750:12;1740:22;;1807:1;1801:4;1797:12;1828:18;1818:81;;1884:4;1876:6;1872:17;1862:27;;1818:81;1946:2;1938:6;1935:14;1915:18;1912:38;1909:84;;1965:18;;:::i;:::-;1909:84;1730:269;1679:320;;;:::o;2005:141::-;2054:4;2077:3;2069:11;;2100:3;2097:1;2090:14;2134:4;2131:1;2121:18;2113:26;;2005:141;;;:::o;2152:93::-;2189:6;2236:2;2231;2224:5;2220:14;2216:23;2206:33;;2152:93;;;:::o;2251:107::-;2295:8;2345:5;2339:4;2335:16;2314:37;;2251:107;;;;:::o;2364:393::-;2433:6;2483:1;2471:10;2467:18;2506:97;2536:66;2525:9;2506:97;:::i;:::-;2624:39;2654:8;2643:9;2624:39;:::i;:::-;2612:51;;2696:4;2692:9;2685:5;2681:21;2672:30;;2745:4;2735:8;2731:19;2724:5;2721:30;2711:40;;2440:317;;2364:393;;;;;:::o;2763:77::-;2800:7;2829:5;2818:16;;2763:77;;;:::o;2846:60::-;2874:3;2895:5;2888:12;;2846:60;;;:::o;2912:142::-;2962:9;2995:53;3013:34;3022:24;3040:5;3022:24;:::i;:::-;3013:34;:::i;:::-;2995:53;:::i;:::-;2982:66;;2912:142;;;:::o;3060:75::-;3103:3;3124:5;3117:12;;3060:75;;;:::o;3141:269::-;3251:39;3282:7;3251:39;:::i;:::-;3312:91;3361:41;3385:16;3361:41;:::i;:::-;3353:6;3346:4;3340:11;3312:91;:::i;:::-;3306:4;3299:105;3217:193;3141:269;;;:::o;3416:73::-;3461:3;3416:73;:::o;3495:189::-;3572:32;;:::i;:::-;3613:65;3671:6;3663;3657:4;3613:65;:::i;:::-;3548:136;3495:189;;:::o;3690:186::-;3750:120;3767:3;3760:5;3757:14;3750:120;;;3821:39;3858:1;3851:5;3821:39;:::i;:::-;3794:1;3787:5;3783:13;3774:22;;3750:120;;;3690:186;;:::o;3882:543::-;3983:2;3978:3;3975:11;3972:446;;;4017:38;4049:5;4017:38;:::i;:::-;4101:29;4119:10;4101:29;:::i;:::-;4091:8;4087:44;4284:2;4272:10;4269:18;4266:49;;;4305:8;4290:23;;4266:49;4328:80;4384:22;4402:3;4384:22;:::i;:::-;4374:8;4370:37;4357:11;4328:80;:::i;:::-;3987:431;;3972:446;3882:543;;;:::o;4431:117::-;4485:8;4535:5;4529:4;4525:16;4504:37;;4431:117;;;;:::o;4554:169::-;4598:6;4631:51;4679:1;4675:6;4667:5;4664:1;4660:13;4631:51;:::i;:::-;4627:56;4712:4;4706;4702:15;4692:25;;4605:118;4554:169;;;;:::o;4728:295::-;4804:4;4950:29;4975:3;4969:4;4950:29;:::i;:::-;4942:37;;5012:3;5009:1;5005:11;4999:4;4996:21;4988:29;;4728:295;;;;:::o;5028:1395::-;5145:37;5178:3;5145:37;:::i;:::-;5247:18;5239:6;5236:30;5233:56;;;5269:18;;:::i;:::-;5233:56;5313:38;5345:4;5339:11;5313:38;:::i;:::-;5398:67;5458:6;5450;5444:4;5398:67;:::i;:::-;5492:1;5516:4;5503:17;;5548:2;5540:6;5537:14;5565:1;5560:618;;;;6222:1;6239:6;6236:77;;;6288:9;6283:3;6279:19;6273:26;6264:35;;6236:77;6339:67;6399:6;6392:5;6339:67;:::i;:::-;6333:4;6326:81;6195:222;5530:887;;5560:618;5612:4;5608:9;5600:6;5596:22;5646:37;5678:4;5646:37;:::i;:::-;5705:1;5719:208;5733:7;5730:1;5727:14;5719:208;;;5812:9;5807:3;5803:19;5797:26;5789:6;5782:42;5863:1;5855:6;5851:14;5841:24;;5910:2;5899:9;5895:18;5882:31;;5756:4;5753:1;5749:12;5744:17;;5719:208;;;5955:6;5946:7;5943:19;5940:179;;;6013:9;6008:3;6004:19;5998:26;6056:48;6098:4;6090:6;6086:17;6075:9;6056:48;:::i;:::-;6048:6;6041:64;5963:156;5940:179;6165:1;6161;6153:6;6149:14;6145:22;6139:4;6132:36;5567:611;;;5530:887;;5120:1303;;;5028:1395;;:::o;6429:118::-;6516:24;6534:5;6516:24;:::i;:::-;6511:3;6504:37;6429:118;;:::o;6553:222::-;6646:4;6684:2;6673:9;6669:18;6661:26;;6697:71;6765:1;6754:9;6750:17;6741:6;6697:71;:::i;:::-;6553:222;;;;:::o;248:475:19:-;;;;;;;"
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "initialOwner",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ERC721IncorrectOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ERC721InsufficientApproval",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "approver",
					"type": "address"
				}
			],
			"name": "ERC721InvalidApprover",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				}
			],
			"name": "ERC721InvalidOperator",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ERC721InvalidOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC721InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "ERC721InvalidSender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ERC721NonexistentToken",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "recipient",
					"type": "address"
				},
				{
					"internalType": "string",
					"name": "tokenURI",
					"type": "string"
				}
			],
			"name": "mintNFT",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "OwnableInvalidOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "OwnableUnauthorizedAccount",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "approved",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "ApprovalForAll",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "_fromTokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "_toTokenId",
					"type": "uint256"
				}
			],
			"name": "BatchMetadataUpdate",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "MetadataUpdate",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "data",
					"type": "bytes"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "setApprovalForAll",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "getApproved",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				}
			],
			"name": "isApprovedForAll",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ownerOf",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "tokenURI",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 349,
				"contract": "contracts/CodeQuillNFT.sol:CodeQuillNFT",
				"label": "_name",
				"offset": 0,
				"slot": "0",
				"type": "t_string_storage"
			},
			{
				"astId": 351,
				"contract": "contracts/CodeQuillNFT.sol:CodeQuillNFT",
				"label": "_symbol",
				"offset": 0,
				"slot": "1",
				"type": "t_string_storage"
			},
			{
				"astId": 355,
				"contract": "contracts/CodeQuillNFT.sol:CodeQuillNFT",
				"label": "_owners",
				"offset": 0,
				"slot": "2",
				"type": "t_mapping(t_uint256,t_address)"
			},
			{
				"astId": 359,
				"contract": "contracts/CodeQuillNFT.sol:CodeQuillNFT",
				"label": "_balances",
				"offset": 0,
				"slot": "3",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 363,
				"contract": "contracts/CodeQuillNFT.sol:CodeQuillNFT",
				"label": "_tokenApprovals",
				"offset": 0,
				"slot": "4",
				"type": "t_mapping(t_uint256,t_address)"
			},
			{
				"astId": 369,
				"contract": "contracts/CodeQuillNFT.sol:CodeQuillNFT",
				"label": "_operatorApprovals",
				"offset": 0,
				"slot": "5",
				"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
			},
			{
				"astId": 1438,
				"contract": "contracts/CodeQuillNFT.sol:CodeQuillNFT",
				"label": "_tokenURIs",
				"offset": 0,
				"slot": "6",
				"type": "t_mapping(t_uint256,t_string_storage)"
			},
			{
				"astId": 8,
				"contract": "contracts/CodeQuillNFT.sol:CodeQuillNFT",
				"label": "_owner",
				"offset": 0,
				"slot": "7",
				"type": "t_address"
			},
			{
				"astId": 6702,
				"contract": "contracts/CodeQuillNFT.sol:CodeQuillNFT",
				"label": "_tokenIdCounter",
				"offset": 0,
				"slot": "8",
				"type": "t_uint256"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_mapping(t_address,t_bool)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => bool)",
				"numberOfBytes": "32",
				"value": "t_bool"
			},
			"t_mapping(t_address,t_mapping(t_address,t_bool))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => bool))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_bool)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_mapping(t_uint256,t_address)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => address)",
				"numberOfBytes": "32",
				"value": "t_address"
			},
			"t_mapping(t_uint256,t_string_storage)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => string)",
				"numberOfBytes": "32",
				"value": "t_string_storage"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var initialOwner = /* var of type address here */ ;\nvar codequillnftContract = new web3.eth.Contract([{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\nvar codequillnft = codequillnftContract.deploy({\n     data: '0x608060405234801562000010575f80fd5b5060405162002b9738038062002b9783398181016040528101906200003691906200027c565b806040518060400160405280600e81526020017f436f6465205175696c6c204e46540000000000000000000000000000000000008152506040518060400160405280600981526020017f434f44455155494c4c0000000000000000000000000000000000000000000000815250815f9081620000b3919062000510565b508060019081620000c5919062000510565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013b575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162000132919062000605565b60405180910390fd5b6200014c816200015460201b60201c565b505062000620565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f62000246826200021b565b9050919050565b62000258816200023a565b811462000263575f80fd5b50565b5f8151905062000276816200024d565b92915050565b5f6020828403121562000294576200029362000217565b5b5f620002a38482850162000266565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200032857607f821691505b6020821081036200033e576200033d620002e3565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620003a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000365565b620003ae868362000365565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620003f8620003f2620003ec84620003c6565b620003cf565b620003c6565b9050919050565b5f819050919050565b6200041383620003d8565b6200042b6200042282620003ff565b84845462000371565b825550505050565b5f90565b6200044162000433565b6200044e81848462000408565b505050565b5b818110156200047557620004695f8262000437565b60018101905062000454565b5050565b601f821115620004c4576200048e8162000344565b620004998462000356565b81016020851015620004a9578190505b620004c1620004b88562000356565b83018262000453565b50505b505050565b5f82821c905092915050565b5f620004e65f1984600802620004c9565b1980831691505092915050565b5f620005008383620004d5565b9150826002028217905092915050565b6200051b82620002ac565b67ffffffffffffffff811115620005375762000536620002b6565b5b62000543825462000310565b6200055082828562000479565b5f60209050601f83116001811462000586575f841562000571578287015190505b6200057d8582620004f3565b865550620005ec565b601f198416620005968662000344565b5f5b82811015620005bf5784890151825560018201915060208501945060208101905062000598565b86831015620005df5784890151620005db601f891682620004d5565b8355505b6001600288020188555050505b505050505050565b620005ff816200023a565b82525050565b5f6020820190506200061a5f830184620005f4565b92915050565b612569806200062e5f395ff3fe608060405234801561000f575f80fd5b5060043610610109575f3560e01c8063715018a6116100a0578063b88d4fde1161006f578063b88d4fde146102a1578063c87b56dd146102bd578063e985e9c5146102ed578063eacabe141461031d578063f2fde38b1461034d57610109565b8063715018a61461023f5780638da5cb5b1461024957806395d89b4114610267578063a22cb4651461028557610109565b806323b872dd116100dc57806323b872dd146101a757806342842e0e146101c35780636352211e146101df57806370a082311461020f57610109565b806301ffc9a71461010d57806306fdde031461013d578063081812fc1461015b578063095ea7b31461018b575b5f80fd5b61012760048036038101906101229190611a22565b610369565b6040516101349190611a67565b60405180910390f35b6101456103c9565b6040516101529190611b0a565b60405180910390f35b61017560048036038101906101709190611b5d565b610458565b6040516101829190611bc7565b60405180910390f35b6101a560048036038101906101a09190611c0a565b610473565b005b6101c160048036038101906101bc9190611c48565b610489565b005b6101dd60048036038101906101d89190611c48565b610588565b005b6101f960048036038101906101f49190611b5d565b6105a7565b6040516102069190611bc7565b60405180910390f35b61022960048036038101906102249190611c98565b6105b8565b6040516102369190611cd2565b60405180910390f35b61024761066e565b005b610251610681565b60405161025e9190611bc7565b60405180910390f35b61026f6106a9565b60405161027c9190611b0a565b60405180910390f35b61029f600480360381019061029a9190611d15565b610739565b005b6102bb60048036038101906102b69190611e7f565b61074f565b005b6102d760048036038101906102d29190611b5d565b610774565b6040516102e49190611b0a565b60405180910390f35b61030760048036038101906103029190611eff565b61087f565b6040516103149190611a67565b60405180910390f35b61033760048036038101906103329190611fdb565b61090d565b6040516103449190611cd2565b60405180910390f35b61036760048036038101906103629190611c98565b61094d565b005b5f634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103c257506103c1826109d1565b5b9050919050565b60605f80546103d790612062565b80601f016020809104026020016040519081016040528092919081815260200182805461040390612062565b801561044e5780601f106104255761010080835404028352916020019161044e565b820191905f5260205f20905b81548152906001019060200180831161043157829003601f168201915b5050505050905090565b5f61046282610ab2565b5061046c82610b38565b9050919050565b6104858282610480610b71565b610b78565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104f9575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016104f09190611bc7565b60405180910390fd5b5f61050c8383610507610b71565b610b8a565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610582578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161057993929190612092565b60405180910390fd5b50505050565b6105a283838360405180602001604052805f81525061074f565b505050565b5f6105b182610ab2565b9050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610629575f6040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016106209190611bc7565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610676610d95565b61067f5f610e1c565b565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546106b890612062565b80601f01602080910402602001604051908101604052809291908181526020018280546106e490612062565b801561072f5780601f106107065761010080835404028352916020019161072f565b820191905f5260205f20905b81548152906001019060200180831161071257829003601f168201915b5050505050905090565b61074b610744610b71565b8383610edf565b5050565b61075a848484610489565b61076e610765610b71565b85858585611048565b50505050565b606061077f82610ab2565b505f60065f8481526020019081526020015f20805461079d90612062565b80601f01602080910402602001604051908101604052809291908181526020018280546107c990612062565b80156108145780601f106107eb57610100808354040283529160200191610814565b820191905f5260205f20905b8154815290600101906020018083116107f757829003601f168201915b505050505090505f6108246111f4565b90505f81510361083857819250505061087a565b5f8251111561086c578082604051602001610854929190612101565b6040516020818303038152906040529250505061087a565b6108758461120a565b925050505b919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f610916610d95565b5f60085f81548092919061092990612151565b9190505590506109398482611270565b6109438184611363565b8091505092915050565b610955610d95565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109c5575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109bc9190611bc7565b60405180910390fd5b6109ce81610e1c565b50565b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a9b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610aab5750610aaa826113bd565b5b9050919050565b5f80610abd83611426565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b2f57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610b269190611cd2565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b610b85838383600161145f565b505050565b5f80610b9584611426565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610bd657610bd581848661161e565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c6157610c155f855f8061145f565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610ce057600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b610d9d610b71565b73ffffffffffffffffffffffffffffffffffffffff16610dbb610681565b73ffffffffffffffffffffffffffffffffffffffff1614610e1a57610dde610b71565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610e119190611bc7565b60405180910390fd5b565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f4f57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610f469190611bc7565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161103b9190611a67565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b11156111ed578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b81526004016110a694939291906121ea565b6020604051808303815f875af19250505080156110e157506040513d601f19601f820116820180604052508101906110de9190612248565b60015b611162573d805f811461110f576040519150601f19603f3d011682016040523d82523d5f602084013e611114565b606091505b505f81510361115a57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016111519190611bc7565b60405180910390fd5b805160208201fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146111eb57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016111e29190611bc7565b60405180910390fd5b505b5050505050565b606060405180602001604052805f815250905090565b606061121582610ab2565b505f61121f6111f4565b90505f81511161123d5760405180602001604052805f815250611268565b80611247846116e1565b604051602001611258929190612101565b6040516020818303038152906040525b915050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112e0575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016112d79190611bc7565b60405180910390fd5b5f6112ec83835f610b8a565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461135e575f6040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016113559190611bc7565b60405180910390fd5b505050565b8060065f8481526020019081526020015f2090816113819190612410565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516113b19190611cd2565b60405180910390a15050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061149757505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156115c9575f6114a684610ab2565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561151057508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156115235750611521818461087f565b155b1561156557826040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161155c9190611bc7565b60405180910390fd5b81156115c757838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6116298383836117ab565b6116dc575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361169d57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016116949190611cd2565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016116d39291906124df565b60405180910390fd5b505050565b60605f60016116ef8461186b565b0190505f8167ffffffffffffffff81111561170d5761170c611d5b565b5b6040519080825280601f01601f19166020018201604052801561173f5781602001600182028036833780820191505090505b5090505f82602083010190505b6001156117a0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161179557611794612506565b5b0494505f850361174c575b819350505050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561186257508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806118235750611822848461087f565b5b8061186157508273ffffffffffffffffffffffffffffffffffffffff1661184983610b38565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106118c7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816118bd576118bc612506565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611904576d04ee2d6d415b85acef810000000083816118fa576118f9612506565b5b0492506020810190505b662386f26fc10000831061193357662386f26fc10000838161192957611928612506565b5b0492506010810190505b6305f5e100831061195c576305f5e100838161195257611951612506565b5b0492506008810190505b612710831061198157612710838161197757611976612506565b5b0492506004810190505b606483106119a4576064838161199a57611999612506565b5b0492506002810190505b600a83106119b3576001810190505b80915050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a01816119cd565b8114611a0b575f80fd5b50565b5f81359050611a1c816119f8565b92915050565b5f60208284031215611a3757611a366119c5565b5b5f611a4484828501611a0e565b91505092915050565b5f8115159050919050565b611a6181611a4d565b82525050565b5f602082019050611a7a5f830184611a58565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611ab7578082015181840152602081019050611a9c565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611adc82611a80565b611ae68185611a8a565b9350611af6818560208601611a9a565b611aff81611ac2565b840191505092915050565b5f6020820190508181035f830152611b228184611ad2565b905092915050565b5f819050919050565b611b3c81611b2a565b8114611b46575f80fd5b50565b5f81359050611b5781611b33565b92915050565b5f60208284031215611b7257611b716119c5565b5b5f611b7f84828501611b49565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611bb182611b88565b9050919050565b611bc181611ba7565b82525050565b5f602082019050611bda5f830184611bb8565b92915050565b611be981611ba7565b8114611bf3575f80fd5b50565b5f81359050611c0481611be0565b92915050565b5f8060408385031215611c2057611c1f6119c5565b5b5f611c2d85828601611bf6565b9250506020611c3e85828601611b49565b9150509250929050565b5f805f60608486031215611c5f57611c5e6119c5565b5b5f611c6c86828701611bf6565b9350506020611c7d86828701611bf6565b9250506040611c8e86828701611b49565b9150509250925092565b5f60208284031215611cad57611cac6119c5565b5b5f611cba84828501611bf6565b91505092915050565b611ccc81611b2a565b82525050565b5f602082019050611ce55f830184611cc3565b92915050565b611cf481611a4d565b8114611cfe575f80fd5b50565b5f81359050611d0f81611ceb565b92915050565b5f8060408385031215611d2b57611d2a6119c5565b5b5f611d3885828601611bf6565b9250506020611d4985828601611d01565b9150509250929050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611d9182611ac2565b810181811067ffffffffffffffff82111715611db057611daf611d5b565b5b80604052505050565b5f611dc26119bc565b9050611dce8282611d88565b919050565b5f67ffffffffffffffff821115611ded57611dec611d5b565b5b611df682611ac2565b9050602081019050919050565b828183375f83830152505050565b5f611e23611e1e84611dd3565b611db9565b905082815260208101848484011115611e3f57611e3e611d57565b5b611e4a848285611e03565b509392505050565b5f82601f830112611e6657611e65611d53565b5b8135611e76848260208601611e11565b91505092915050565b5f805f8060808587031215611e9757611e966119c5565b5b5f611ea487828801611bf6565b9450506020611eb587828801611bf6565b9350506040611ec687828801611b49565b925050606085013567ffffffffffffffff811115611ee757611ee66119c9565b5b611ef387828801611e52565b91505092959194509250565b5f8060408385031215611f1557611f146119c5565b5b5f611f2285828601611bf6565b9250506020611f3385828601611bf6565b9150509250929050565b5f67ffffffffffffffff821115611f5757611f56611d5b565b5b611f6082611ac2565b9050602081019050919050565b5f611f7f611f7a84611f3d565b611db9565b905082815260208101848484011115611f9b57611f9a611d57565b5b611fa6848285611e03565b509392505050565b5f82601f830112611fc257611fc1611d53565b5b8135611fd2848260208601611f6d565b91505092915050565b5f8060408385031215611ff157611ff06119c5565b5b5f611ffe85828601611bf6565b925050602083013567ffffffffffffffff81111561201f5761201e6119c9565b5b61202b85828601611fae565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061207957607f821691505b60208210810361208c5761208b612035565b5b50919050565b5f6060820190506120a55f830186611bb8565b6120b26020830185611cc3565b6120bf6040830184611bb8565b949350505050565b5f81905092915050565b5f6120db82611a80565b6120e581856120c7565b93506120f5818560208601611a9a565b80840191505092915050565b5f61210c82856120d1565b915061211882846120d1565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61215b82611b2a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361218d5761218c612124565b5b600182019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f6121bc82612198565b6121c681856121a2565b93506121d6818560208601611a9a565b6121df81611ac2565b840191505092915050565b5f6080820190506121fd5f830187611bb8565b61220a6020830186611bb8565b6122176040830185611cc3565b818103606083015261222981846121b2565b905095945050505050565b5f81519050612242816119f8565b92915050565b5f6020828403121561225d5761225c6119c5565b5b5f61226a84828501612234565b91505092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026122cf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612294565b6122d98683612294565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61231461230f61230a84611b2a565b6122f1565b611b2a565b9050919050565b5f819050919050565b61232d836122fa565b6123416123398261231b565b8484546122a0565b825550505050565b5f90565b612355612349565b612360818484612324565b505050565b5b81811015612383576123785f8261234d565b600181019050612366565b5050565b601f8211156123c85761239981612273565b6123a284612285565b810160208510156123b1578190505b6123c56123bd85612285565b830182612365565b50505b505050565b5f82821c905092915050565b5f6123e85f19846008026123cd565b1980831691505092915050565b5f61240083836123d9565b9150826002028217905092915050565b61241982611a80565b67ffffffffffffffff81111561243257612431611d5b565b5b61243c8254612062565b612447828285612387565b5f60209050601f831160018114612478575f8415612466578287015190505b61247085826123f5565b8655506124d7565b601f19841661248686612273565b5f5b828110156124ad57848901518255600182019150602085019450602081019050612488565b868310156124ca57848901516124c6601f8916826123d9565b8355505b6001600288020188555050505b505050505050565b5f6040820190506124f25f830185611bb8565b6124ff6020830184611cc3565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea2646970667358221220016be9930617ef0bf09c87a014f77f4aa09785ff7e2f83d13ed49608b2f08ee164736f6c63430008180033', \n     arguments: [\n          initialOwner,\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"081812fc": "getApproved(uint256)",
		"e985e9c5": "isApprovedForAll(address,address)",
		"eacabe14": "mintNFT(address,string)",
		"06fdde03": "name()",
		"8da5cb5b": "owner()",
		"6352211e": "ownerOf(uint256)",
		"715018a6": "renounceOwnership()",
		"42842e0e": "safeTransferFrom(address,address,uint256)",
		"b88d4fde": "safeTransferFrom(address,address,uint256,bytes)",
		"a22cb465": "setApprovalForAll(address,bool)",
		"01ffc9a7": "supportsInterface(bytes4)",
		"95d89b41": "symbol()",
		"c87b56dd": "tokenURI(uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"f2fde38b": "transferOwnership(address)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "1915400",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"approve(address,uint256)": "infinite",
			"balanceOf(address)": "infinite",
			"getApproved(uint256)": "infinite",
			"isApprovedForAll(address,address)": "infinite",
			"mintNFT(address,string)": "infinite",
			"name()": "infinite",
			"owner()": "2560",
			"ownerOf(uint256)": "infinite",
			"renounceOwnership()": "infinite",
			"safeTransferFrom(address,address,uint256)": "infinite",
			"safeTransferFrom(address,address,uint256,bytes)": "infinite",
			"setApprovalForAll(address,bool)": "infinite",
			"supportsInterface(bytes4)": "881",
			"symbol()": "infinite",
			"tokenURI(uint256)": "infinite",
			"transferFrom(address,address,uint256)": "infinite",
			"transferOwnership(address)": "infinite"
		}
	},
	"devdoc": {
		"errors": {
			"ERC721IncorrectOwner(address,uint256,address)": [
				{
					"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
					"params": {
						"owner": "Address of the current owner of a token.",
						"sender": "Address whose tokens are being transferred.",
						"tokenId": "Identifier number of a token."
					}
				}
			],
			"ERC721InsufficientApproval(address,uint256)": [
				{
					"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
					"params": {
						"operator": "Address that may be allowed to operate on tokens without being their owner.",
						"tokenId": "Identifier number of a token."
					}
				}
			],
			"ERC721InvalidApprover(address)": [
				{
					"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
					"params": {
						"approver": "Address initiating an approval operation."
					}
				}
			],
			"ERC721InvalidOperator(address)": [
				{
					"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
					"params": {
						"operator": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC721InvalidOwner(address)": [
				{
					"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
					"params": {
						"owner": "Address of the current owner of a token."
					}
				}
			],
			"ERC721InvalidReceiver(address)": [
				{
					"details": "Indicates a failure with the token `receiver`. Used in transfers.",
					"params": {
						"receiver": "Address to which tokens are being transferred."
					}
				}
			],
			"ERC721InvalidSender(address)": [
				{
					"details": "Indicates a failure with the token `sender`. Used in transfers.",
					"params": {
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC721NonexistentToken(uint256)": [
				{
					"details": "Indicates a `tokenId` whose `owner` is the zero address.",
					"params": {
						"tokenId": "Identifier number of a token."
					}
				}
			],
			"OwnableInvalidOwner(address)": [
				{
					"details": "The owner is not a valid owner account. (eg. `address(0)`)"
				}
			],
			"OwnableUnauthorizedAccount(address)": [
				{
					"details": "The caller account is not authorized to perform an operation."
				}
			]
		},
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
			},
			"ApprovalForAll(address,address,bool)": {
				"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
			},
			"BatchMetadataUpdate(uint256,uint256)": {
				"details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
			},
			"MetadataUpdate(uint256)": {
				"details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
			}
		},
		"kind": "dev",
		"methods": {
			"approve(address,uint256)": {
				"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
			},
			"balanceOf(address)": {
				"details": "Returns the number of tokens in ``owner``'s account."
			},
			"getApproved(uint256)": {
				"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
			},
			"isApprovedForAll(address,address)": {
				"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
			},
			"name()": {
				"details": "Returns the token collection name."
			},
			"owner()": {
				"details": "Returns the address of the current owner."
			},
			"ownerOf(uint256)": {
				"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
			},
			"renounceOwnership()": {
				"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
			},
			"safeTransferFrom(address,address,uint256)": {
				"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
			},
			"safeTransferFrom(address,address,uint256,bytes)": {
				"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
			},
			"setApprovalForAll(address,bool)": {
				"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
			},
			"supportsInterface(bytes4)": {
				"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
			},
			"symbol()": {
				"details": "Returns the token collection symbol."
			},
			"tokenURI(uint256)": {
				"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
			},
			"transferFrom(address,address,uint256)": {
				"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
			},
			"transferOwnership(address)": {
				"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@_approve_1140": {
				"entryPoint": 2936,
				"id": 1140,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_approve_1206": {
				"entryPoint": 5215,
				"id": 1206,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@_baseURI_521": {
				"entryPoint": 4596,
				"id": 521,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_checkAuthorized_780": {
				"entryPoint": 5662,
				"id": 780,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_checkOwner_84": {
				"entryPoint": 3477,
				"id": 84,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_getApproved_707": {
				"entryPoint": 2872,
				"id": 707,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_isAuthorized_743": {
				"entryPoint": 6059,
				"id": 743,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@_mint_936": {
				"entryPoint": 4720,
				"id": 936,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_msgSender_1653": {
				"entryPoint": 2929,
				"id": 1653,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_ownerOf_694": {
				"entryPoint": 5158,
				"id": 694,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_requireOwned_1272": {
				"entryPoint": 2738,
				"id": 1272,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_setApprovalForAll_1243": {
				"entryPoint": 3807,
				"id": 1243,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_setTokenURI_1535": {
				"entryPoint": 4963,
				"id": 1535,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_transferOwnership_146": {
				"entryPoint": 3612,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_update_886": {
				"entryPoint": 2954,
				"id": 886,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@approve_537": {
				"entryPoint": 1139,
				"id": 537,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@balanceOf_445": {
				"entryPoint": 1464,
				"id": 445,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@checkOnERC721Received_1640": {
				"entryPoint": 4168,
				"id": 1640,
				"parameterSlots": 5,
				"returnSlots": 0
			},
			"@getApproved_554": {
				"entryPoint": 1112,
				"id": 554,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@isApprovedForAll_587": {
				"entryPoint": 2175,
				"id": 587,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@log10_4614": {
				"entryPoint": 6251,
				"id": 4614,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@mintNFT_6744": {
				"entryPoint": 2317,
				"id": 6744,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@name_467": {
				"entryPoint": 969,
				"id": 467,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@ownerOf_458": {
				"entryPoint": 1447,
				"id": 458,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@owner_67": {
				"entryPoint": 1665,
				"id": 67,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@renounceOwnership_98": {
				"entryPoint": 1646,
				"id": 98,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@safeTransferFrom_651": {
				"entryPoint": 1416,
				"id": 651,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@safeTransferFrom_681": {
				"entryPoint": 1871,
				"id": 681,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@setApprovalForAll_570": {
				"entryPoint": 1849,
				"id": 570,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@supportsInterface_1459": {
				"entryPoint": 873,
				"id": 1459,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@supportsInterface_3148": {
				"entryPoint": 5053,
				"id": 3148,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@supportsInterface_417": {
				"entryPoint": 2513,
				"id": 417,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@symbol_476": {
				"entryPoint": 1705,
				"id": 476,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@toString_1837": {
				"entryPoint": 5857,
				"id": 1837,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@tokenURI_1516": {
				"entryPoint": 1908,
				"id": 1516,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@tokenURI_512": {
				"entryPoint": 4618,
				"id": 512,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@transferFrom_633": {
				"entryPoint": 1161,
				"id": 633,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@transferOwnership_126": {
				"entryPoint": 2381,
				"id": 126,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"abi_decode_available_length_t_bytes_memory_ptr": {
				"entryPoint": 7697,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_decode_available_length_t_string_memory_ptr": {
				"entryPoint": 8045,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_decode_t_address": {
				"entryPoint": 7158,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_bool": {
				"entryPoint": 7425,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_bytes4": {
				"entryPoint": 6670,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_bytes4_fromMemory": {
				"entryPoint": 8756,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_bytes_memory_ptr": {
				"entryPoint": 7762,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_string_memory_ptr": {
				"entryPoint": 8110,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256": {
				"entryPoint": 6985,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 7320,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_address": {
				"entryPoint": 7935,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_addresst_uint256": {
				"entryPoint": 7240,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
				"entryPoint": 7807,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 4
			},
			"abi_decode_tuple_t_addresst_bool": {
				"entryPoint": 7445,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_string_memory_ptr": {
				"entryPoint": 8155,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 7178,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_bytes4": {
				"entryPoint": 6690,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_bytes4_fromMemory": {
				"entryPoint": 8776,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_uint256": {
				"entryPoint": 7005,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 7096,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_bool_to_t_bool_fromStack": {
				"entryPoint": 6744,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack": {
				"entryPoint": 8626,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 6866,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 8401,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 7363,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
				"entryPoint": 8449,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 7111,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
				"entryPoint": 8682,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
				"entryPoint": 9439,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": 8338,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
				"entryPoint": 6759,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 6922,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": 7378,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"allocate_memory": {
				"entryPoint": 7609,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": 6588,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_allocation_size_t_bytes_memory_ptr": {
				"entryPoint": 7635,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_allocation_size_t_string_memory_ptr": {
				"entryPoint": 7997,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_dataslot_t_string_storage": {
				"entryPoint": 8819,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_bytes_memory_ptr": {
				"entryPoint": 8600,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 6784,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
				"entryPoint": 8610,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 6794,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
				"entryPoint": 8391,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_t_string_storage": {
				"entryPoint": 9095,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"cleanup_t_address": {
				"entryPoint": 7079,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_bool": {
				"entryPoint": 6733,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_bytes4": {
				"entryPoint": 6605,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 7048,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 6954,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clear_storage_range_t_bytes1": {
				"entryPoint": 9061,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"convert_t_uint256_to_t_uint256": {
				"entryPoint": 8954,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 9232,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"copy_calldata_to_memory_with_cleanup": {
				"entryPoint": 7683,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"copy_memory_to_memory_with_cleanup": {
				"entryPoint": 6810,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"divide_by_32_ceil": {
				"entryPoint": 8837,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_byte_array_length": {
				"entryPoint": 8290,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": 9205,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"finalize_allocation": {
				"entryPoint": 7560,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"identity": {
				"entryPoint": 8945,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"increment_t_uint256": {
				"entryPoint": 8529,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"mask_bytes_dynamic": {
				"entryPoint": 9177,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 8484,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x12": {
				"entryPoint": 9478,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x22": {
				"entryPoint": 8245,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 7515,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"prepare_store_t_uint256": {
				"entryPoint": 8987,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
				"entryPoint": 7507,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
				"entryPoint": 7511,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": 6601,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 6597,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"round_up_to_mul_of_32": {
				"entryPoint": 6850,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"shift_left_dynamic": {
				"entryPoint": 8852,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"shift_right_unsigned_dynamic": {
				"entryPoint": 9165,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"storage_set_to_zero_t_uint256": {
				"entryPoint": 9037,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"update_byte_slice_dynamic32": {
				"entryPoint": 8864,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"update_storage_value_t_uint256_to_t_uint256": {
				"entryPoint": 8996,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 7136,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_bool": {
				"entryPoint": 7403,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_bytes4": {
				"entryPoint": 6648,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_uint256": {
				"entryPoint": 6963,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"zero_value_for_split_t_uint256": {
				"entryPoint": 9033,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:21279:20",
					"nodeType": "YulBlock",
					"src": "0:21279:20",
					"statements": [
						{
							"body": {
								"nativeSrc": "47:35:20",
								"nodeType": "YulBlock",
								"src": "47:35:20",
								"statements": [
									{
										"nativeSrc": "57:19:20",
										"nodeType": "YulAssignment",
										"src": "57:19:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "73:2:20",
													"nodeType": "YulLiteral",
													"src": "73:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "67:5:20",
												"nodeType": "YulIdentifier",
												"src": "67:5:20"
											},
											"nativeSrc": "67:9:20",
											"nodeType": "YulFunctionCall",
											"src": "67:9:20"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nativeSrc": "57:6:20",
												"nodeType": "YulIdentifier",
												"src": "57:6:20"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nativeSrc": "7:75:20",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nativeSrc": "40:6:20",
									"nodeType": "YulTypedName",
									"src": "40:6:20",
									"type": ""
								}
							],
							"src": "7:75:20"
						},
						{
							"body": {
								"nativeSrc": "177:28:20",
								"nodeType": "YulBlock",
								"src": "177:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "194:1:20",
													"nodeType": "YulLiteral",
													"src": "194:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "197:1:20",
													"nodeType": "YulLiteral",
													"src": "197:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "187:6:20",
												"nodeType": "YulIdentifier",
												"src": "187:6:20"
											},
											"nativeSrc": "187:12:20",
											"nodeType": "YulFunctionCall",
											"src": "187:12:20"
										},
										"nativeSrc": "187:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "187:12:20"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nativeSrc": "88:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "88:117:20"
						},
						{
							"body": {
								"nativeSrc": "300:28:20",
								"nodeType": "YulBlock",
								"src": "300:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "317:1:20",
													"nodeType": "YulLiteral",
													"src": "317:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "320:1:20",
													"nodeType": "YulLiteral",
													"src": "320:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "310:6:20",
												"nodeType": "YulIdentifier",
												"src": "310:6:20"
											},
											"nativeSrc": "310:12:20",
											"nodeType": "YulFunctionCall",
											"src": "310:12:20"
										},
										"nativeSrc": "310:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "310:12:20"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nativeSrc": "211:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "211:117:20"
						},
						{
							"body": {
								"nativeSrc": "378:105:20",
								"nodeType": "YulBlock",
								"src": "378:105:20",
								"statements": [
									{
										"nativeSrc": "388:89:20",
										"nodeType": "YulAssignment",
										"src": "388:89:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "403:5:20",
													"nodeType": "YulIdentifier",
													"src": "403:5:20"
												},
												{
													"kind": "number",
													"nativeSrc": "410:66:20",
													"nodeType": "YulLiteral",
													"src": "410:66:20",
													"type": "",
													"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "399:3:20",
												"nodeType": "YulIdentifier",
												"src": "399:3:20"
											},
											"nativeSrc": "399:78:20",
											"nodeType": "YulFunctionCall",
											"src": "399:78:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "388:7:20",
												"nodeType": "YulIdentifier",
												"src": "388:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bytes4",
							"nativeSrc": "334:149:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "360:5:20",
									"nodeType": "YulTypedName",
									"src": "360:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "370:7:20",
									"nodeType": "YulTypedName",
									"src": "370:7:20",
									"type": ""
								}
							],
							"src": "334:149:20"
						},
						{
							"body": {
								"nativeSrc": "531:78:20",
								"nodeType": "YulBlock",
								"src": "531:78:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "587:16:20",
											"nodeType": "YulBlock",
											"src": "587:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "596:1:20",
																"nodeType": "YulLiteral",
																"src": "596:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "599:1:20",
																"nodeType": "YulLiteral",
																"src": "599:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "589:6:20",
															"nodeType": "YulIdentifier",
															"src": "589:6:20"
														},
														"nativeSrc": "589:12:20",
														"nodeType": "YulFunctionCall",
														"src": "589:12:20"
													},
													"nativeSrc": "589:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "589:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "554:5:20",
															"nodeType": "YulIdentifier",
															"src": "554:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "578:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "578:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_bytes4",
																"nativeSrc": "561:16:20",
																"nodeType": "YulIdentifier",
																"src": "561:16:20"
															},
															"nativeSrc": "561:23:20",
															"nodeType": "YulFunctionCall",
															"src": "561:23:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "551:2:20",
														"nodeType": "YulIdentifier",
														"src": "551:2:20"
													},
													"nativeSrc": "551:34:20",
													"nodeType": "YulFunctionCall",
													"src": "551:34:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "544:6:20",
												"nodeType": "YulIdentifier",
												"src": "544:6:20"
											},
											"nativeSrc": "544:42:20",
											"nodeType": "YulFunctionCall",
											"src": "544:42:20"
										},
										"nativeSrc": "541:62:20",
										"nodeType": "YulIf",
										"src": "541:62:20"
									}
								]
							},
							"name": "validator_revert_t_bytes4",
							"nativeSrc": "489:120:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "524:5:20",
									"nodeType": "YulTypedName",
									"src": "524:5:20",
									"type": ""
								}
							],
							"src": "489:120:20"
						},
						{
							"body": {
								"nativeSrc": "666:86:20",
								"nodeType": "YulBlock",
								"src": "666:86:20",
								"statements": [
									{
										"nativeSrc": "676:29:20",
										"nodeType": "YulAssignment",
										"src": "676:29:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "698:6:20",
													"nodeType": "YulIdentifier",
													"src": "698:6:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "685:12:20",
												"nodeType": "YulIdentifier",
												"src": "685:12:20"
											},
											"nativeSrc": "685:20:20",
											"nodeType": "YulFunctionCall",
											"src": "685:20:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "676:5:20",
												"nodeType": "YulIdentifier",
												"src": "676:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "740:5:20",
													"nodeType": "YulIdentifier",
													"src": "740:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_bytes4",
												"nativeSrc": "714:25:20",
												"nodeType": "YulIdentifier",
												"src": "714:25:20"
											},
											"nativeSrc": "714:32:20",
											"nodeType": "YulFunctionCall",
											"src": "714:32:20"
										},
										"nativeSrc": "714:32:20",
										"nodeType": "YulExpressionStatement",
										"src": "714:32:20"
									}
								]
							},
							"name": "abi_decode_t_bytes4",
							"nativeSrc": "615:137:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "644:6:20",
									"nodeType": "YulTypedName",
									"src": "644:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "652:3:20",
									"nodeType": "YulTypedName",
									"src": "652:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "660:5:20",
									"nodeType": "YulTypedName",
									"src": "660:5:20",
									"type": ""
								}
							],
							"src": "615:137:20"
						},
						{
							"body": {
								"nativeSrc": "823:262:20",
								"nodeType": "YulBlock",
								"src": "823:262:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "869:83:20",
											"nodeType": "YulBlock",
											"src": "869:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "871:77:20",
															"nodeType": "YulIdentifier",
															"src": "871:77:20"
														},
														"nativeSrc": "871:79:20",
														"nodeType": "YulFunctionCall",
														"src": "871:79:20"
													},
													"nativeSrc": "871:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "871:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "844:7:20",
															"nodeType": "YulIdentifier",
															"src": "844:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "853:9:20",
															"nodeType": "YulIdentifier",
															"src": "853:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "840:3:20",
														"nodeType": "YulIdentifier",
														"src": "840:3:20"
													},
													"nativeSrc": "840:23:20",
													"nodeType": "YulFunctionCall",
													"src": "840:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "865:2:20",
													"nodeType": "YulLiteral",
													"src": "865:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "836:3:20",
												"nodeType": "YulIdentifier",
												"src": "836:3:20"
											},
											"nativeSrc": "836:32:20",
											"nodeType": "YulFunctionCall",
											"src": "836:32:20"
										},
										"nativeSrc": "833:119:20",
										"nodeType": "YulIf",
										"src": "833:119:20"
									},
									{
										"nativeSrc": "962:116:20",
										"nodeType": "YulBlock",
										"src": "962:116:20",
										"statements": [
											{
												"nativeSrc": "977:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "977:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "991:1:20",
													"nodeType": "YulLiteral",
													"src": "991:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "981:6:20",
														"nodeType": "YulTypedName",
														"src": "981:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "1006:62:20",
												"nodeType": "YulAssignment",
												"src": "1006:62:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "1040:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "1040:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "1051:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1051:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "1036:3:20",
																"nodeType": "YulIdentifier",
																"src": "1036:3:20"
															},
															"nativeSrc": "1036:22:20",
															"nodeType": "YulFunctionCall",
															"src": "1036:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "1060:7:20",
															"nodeType": "YulIdentifier",
															"src": "1060:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_bytes4",
														"nativeSrc": "1016:19:20",
														"nodeType": "YulIdentifier",
														"src": "1016:19:20"
													},
													"nativeSrc": "1016:52:20",
													"nodeType": "YulFunctionCall",
													"src": "1016:52:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "1006:6:20",
														"nodeType": "YulIdentifier",
														"src": "1006:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_bytes4",
							"nativeSrc": "758:327:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "793:9:20",
									"nodeType": "YulTypedName",
									"src": "793:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "804:7:20",
									"nodeType": "YulTypedName",
									"src": "804:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "816:6:20",
									"nodeType": "YulTypedName",
									"src": "816:6:20",
									"type": ""
								}
							],
							"src": "758:327:20"
						},
						{
							"body": {
								"nativeSrc": "1133:48:20",
								"nodeType": "YulBlock",
								"src": "1133:48:20",
								"statements": [
									{
										"nativeSrc": "1143:32:20",
										"nodeType": "YulAssignment",
										"src": "1143:32:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1168:5:20",
															"nodeType": "YulIdentifier",
															"src": "1168:5:20"
														}
													],
													"functionName": {
														"name": "iszero",
														"nativeSrc": "1161:6:20",
														"nodeType": "YulIdentifier",
														"src": "1161:6:20"
													},
													"nativeSrc": "1161:13:20",
													"nodeType": "YulFunctionCall",
													"src": "1161:13:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "1154:6:20",
												"nodeType": "YulIdentifier",
												"src": "1154:6:20"
											},
											"nativeSrc": "1154:21:20",
											"nodeType": "YulFunctionCall",
											"src": "1154:21:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1143:7:20",
												"nodeType": "YulIdentifier",
												"src": "1143:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bool",
							"nativeSrc": "1091:90:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1115:5:20",
									"nodeType": "YulTypedName",
									"src": "1115:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1125:7:20",
									"nodeType": "YulTypedName",
									"src": "1125:7:20",
									"type": ""
								}
							],
							"src": "1091:90:20"
						},
						{
							"body": {
								"nativeSrc": "1246:50:20",
								"nodeType": "YulBlock",
								"src": "1246:50:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "1263:3:20",
													"nodeType": "YulIdentifier",
													"src": "1263:3:20"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1283:5:20",
															"nodeType": "YulIdentifier",
															"src": "1283:5:20"
														}
													],
													"functionName": {
														"name": "cleanup_t_bool",
														"nativeSrc": "1268:14:20",
														"nodeType": "YulIdentifier",
														"src": "1268:14:20"
													},
													"nativeSrc": "1268:21:20",
													"nodeType": "YulFunctionCall",
													"src": "1268:21:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1256:6:20",
												"nodeType": "YulIdentifier",
												"src": "1256:6:20"
											},
											"nativeSrc": "1256:34:20",
											"nodeType": "YulFunctionCall",
											"src": "1256:34:20"
										},
										"nativeSrc": "1256:34:20",
										"nodeType": "YulExpressionStatement",
										"src": "1256:34:20"
									}
								]
							},
							"name": "abi_encode_t_bool_to_t_bool_fromStack",
							"nativeSrc": "1187:109:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1234:5:20",
									"nodeType": "YulTypedName",
									"src": "1234:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "1241:3:20",
									"nodeType": "YulTypedName",
									"src": "1241:3:20",
									"type": ""
								}
							],
							"src": "1187:109:20"
						},
						{
							"body": {
								"nativeSrc": "1394:118:20",
								"nodeType": "YulBlock",
								"src": "1394:118:20",
								"statements": [
									{
										"nativeSrc": "1404:26:20",
										"nodeType": "YulAssignment",
										"src": "1404:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1416:9:20",
													"nodeType": "YulIdentifier",
													"src": "1416:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1427:2:20",
													"nodeType": "YulLiteral",
													"src": "1427:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1412:3:20",
												"nodeType": "YulIdentifier",
												"src": "1412:3:20"
											},
											"nativeSrc": "1412:18:20",
											"nodeType": "YulFunctionCall",
											"src": "1412:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1404:4:20",
												"nodeType": "YulIdentifier",
												"src": "1404:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "1478:6:20",
													"nodeType": "YulIdentifier",
													"src": "1478:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1491:9:20",
															"nodeType": "YulIdentifier",
															"src": "1491:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "1502:1:20",
															"nodeType": "YulLiteral",
															"src": "1502:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1487:3:20",
														"nodeType": "YulIdentifier",
														"src": "1487:3:20"
													},
													"nativeSrc": "1487:17:20",
													"nodeType": "YulFunctionCall",
													"src": "1487:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "1440:37:20",
												"nodeType": "YulIdentifier",
												"src": "1440:37:20"
											},
											"nativeSrc": "1440:65:20",
											"nodeType": "YulFunctionCall",
											"src": "1440:65:20"
										},
										"nativeSrc": "1440:65:20",
										"nodeType": "YulExpressionStatement",
										"src": "1440:65:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nativeSrc": "1302:210:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1366:9:20",
									"nodeType": "YulTypedName",
									"src": "1366:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1378:6:20",
									"nodeType": "YulTypedName",
									"src": "1378:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1389:4:20",
									"nodeType": "YulTypedName",
									"src": "1389:4:20",
									"type": ""
								}
							],
							"src": "1302:210:20"
						},
						{
							"body": {
								"nativeSrc": "1577:40:20",
								"nodeType": "YulBlock",
								"src": "1577:40:20",
								"statements": [
									{
										"nativeSrc": "1588:22:20",
										"nodeType": "YulAssignment",
										"src": "1588:22:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1604:5:20",
													"nodeType": "YulIdentifier",
													"src": "1604:5:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "1598:5:20",
												"nodeType": "YulIdentifier",
												"src": "1598:5:20"
											},
											"nativeSrc": "1598:12:20",
											"nodeType": "YulFunctionCall",
											"src": "1598:12:20"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "1588:6:20",
												"nodeType": "YulIdentifier",
												"src": "1588:6:20"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nativeSrc": "1518:99:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1560:5:20",
									"nodeType": "YulTypedName",
									"src": "1560:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "1570:6:20",
									"nodeType": "YulTypedName",
									"src": "1570:6:20",
									"type": ""
								}
							],
							"src": "1518:99:20"
						},
						{
							"body": {
								"nativeSrc": "1719:73:20",
								"nodeType": "YulBlock",
								"src": "1719:73:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "1736:3:20",
													"nodeType": "YulIdentifier",
													"src": "1736:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "1741:6:20",
													"nodeType": "YulIdentifier",
													"src": "1741:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1729:6:20",
												"nodeType": "YulIdentifier",
												"src": "1729:6:20"
											},
											"nativeSrc": "1729:19:20",
											"nodeType": "YulFunctionCall",
											"src": "1729:19:20"
										},
										"nativeSrc": "1729:19:20",
										"nodeType": "YulExpressionStatement",
										"src": "1729:19:20"
									},
									{
										"nativeSrc": "1757:29:20",
										"nodeType": "YulAssignment",
										"src": "1757:29:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "1776:3:20",
													"nodeType": "YulIdentifier",
													"src": "1776:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1781:4:20",
													"nodeType": "YulLiteral",
													"src": "1781:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1772:3:20",
												"nodeType": "YulIdentifier",
												"src": "1772:3:20"
											},
											"nativeSrc": "1772:14:20",
											"nodeType": "YulFunctionCall",
											"src": "1772:14:20"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "1757:11:20",
												"nodeType": "YulIdentifier",
												"src": "1757:11:20"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nativeSrc": "1623:169:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "1691:3:20",
									"nodeType": "YulTypedName",
									"src": "1691:3:20",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "1696:6:20",
									"nodeType": "YulTypedName",
									"src": "1696:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "1707:11:20",
									"nodeType": "YulTypedName",
									"src": "1707:11:20",
									"type": ""
								}
							],
							"src": "1623:169:20"
						},
						{
							"body": {
								"nativeSrc": "1860:184:20",
								"nodeType": "YulBlock",
								"src": "1860:184:20",
								"statements": [
									{
										"nativeSrc": "1870:10:20",
										"nodeType": "YulVariableDeclaration",
										"src": "1870:10:20",
										"value": {
											"kind": "number",
											"nativeSrc": "1879:1:20",
											"nodeType": "YulLiteral",
											"src": "1879:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "1874:1:20",
												"nodeType": "YulTypedName",
												"src": "1874:1:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "1939:63:20",
											"nodeType": "YulBlock",
											"src": "1939:63:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "1964:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "1964:3:20"
																	},
																	{
																		"name": "i",
																		"nativeSrc": "1969:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "1969:1:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1960:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1960:3:20"
																},
																"nativeSrc": "1960:11:20",
																"nodeType": "YulFunctionCall",
																"src": "1960:11:20"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nativeSrc": "1983:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1983:3:20"
																			},
																			{
																				"name": "i",
																				"nativeSrc": "1988:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "1988:1:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1979:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1979:3:20"
																		},
																		"nativeSrc": "1979:11:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1979:11:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1973:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1973:5:20"
																},
																"nativeSrc": "1973:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1973:18:20"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "1953:6:20",
															"nodeType": "YulIdentifier",
															"src": "1953:6:20"
														},
														"nativeSrc": "1953:39:20",
														"nodeType": "YulFunctionCall",
														"src": "1953:39:20"
													},
													"nativeSrc": "1953:39:20",
													"nodeType": "YulExpressionStatement",
													"src": "1953:39:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "1900:1:20",
													"nodeType": "YulIdentifier",
													"src": "1900:1:20"
												},
												{
													"name": "length",
													"nativeSrc": "1903:6:20",
													"nodeType": "YulIdentifier",
													"src": "1903:6:20"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "1897:2:20",
												"nodeType": "YulIdentifier",
												"src": "1897:2:20"
											},
											"nativeSrc": "1897:13:20",
											"nodeType": "YulFunctionCall",
											"src": "1897:13:20"
										},
										"nativeSrc": "1889:113:20",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "1911:19:20",
											"nodeType": "YulBlock",
											"src": "1911:19:20",
											"statements": [
												{
													"nativeSrc": "1913:15:20",
													"nodeType": "YulAssignment",
													"src": "1913:15:20",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "1922:1:20",
																"nodeType": "YulIdentifier",
																"src": "1922:1:20"
															},
															{
																"kind": "number",
																"nativeSrc": "1925:2:20",
																"nodeType": "YulLiteral",
																"src": "1925:2:20",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "1918:3:20",
															"nodeType": "YulIdentifier",
															"src": "1918:3:20"
														},
														"nativeSrc": "1918:10:20",
														"nodeType": "YulFunctionCall",
														"src": "1918:10:20"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "1913:1:20",
															"nodeType": "YulIdentifier",
															"src": "1913:1:20"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "1893:3:20",
											"nodeType": "YulBlock",
											"src": "1893:3:20",
											"statements": []
										},
										"src": "1889:113:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nativeSrc": "2022:3:20",
															"nodeType": "YulIdentifier",
															"src": "2022:3:20"
														},
														{
															"name": "length",
															"nativeSrc": "2027:6:20",
															"nodeType": "YulIdentifier",
															"src": "2027:6:20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2018:3:20",
														"nodeType": "YulIdentifier",
														"src": "2018:3:20"
													},
													"nativeSrc": "2018:16:20",
													"nodeType": "YulFunctionCall",
													"src": "2018:16:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2036:1:20",
													"nodeType": "YulLiteral",
													"src": "2036:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2011:6:20",
												"nodeType": "YulIdentifier",
												"src": "2011:6:20"
											},
											"nativeSrc": "2011:27:20",
											"nodeType": "YulFunctionCall",
											"src": "2011:27:20"
										},
										"nativeSrc": "2011:27:20",
										"nodeType": "YulExpressionStatement",
										"src": "2011:27:20"
									}
								]
							},
							"name": "copy_memory_to_memory_with_cleanup",
							"nativeSrc": "1798:246:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nativeSrc": "1842:3:20",
									"nodeType": "YulTypedName",
									"src": "1842:3:20",
									"type": ""
								},
								{
									"name": "dst",
									"nativeSrc": "1847:3:20",
									"nodeType": "YulTypedName",
									"src": "1847:3:20",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "1852:6:20",
									"nodeType": "YulTypedName",
									"src": "1852:6:20",
									"type": ""
								}
							],
							"src": "1798:246:20"
						},
						{
							"body": {
								"nativeSrc": "2098:54:20",
								"nodeType": "YulBlock",
								"src": "2098:54:20",
								"statements": [
									{
										"nativeSrc": "2108:38:20",
										"nodeType": "YulAssignment",
										"src": "2108:38:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "2126:5:20",
															"nodeType": "YulIdentifier",
															"src": "2126:5:20"
														},
														{
															"kind": "number",
															"nativeSrc": "2133:2:20",
															"nodeType": "YulLiteral",
															"src": "2133:2:20",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2122:3:20",
														"nodeType": "YulIdentifier",
														"src": "2122:3:20"
													},
													"nativeSrc": "2122:14:20",
													"nodeType": "YulFunctionCall",
													"src": "2122:14:20"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "2142:2:20",
															"nodeType": "YulLiteral",
															"src": "2142:2:20",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "not",
														"nativeSrc": "2138:3:20",
														"nodeType": "YulIdentifier",
														"src": "2138:3:20"
													},
													"nativeSrc": "2138:7:20",
													"nodeType": "YulFunctionCall",
													"src": "2138:7:20"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "2118:3:20",
												"nodeType": "YulIdentifier",
												"src": "2118:3:20"
											},
											"nativeSrc": "2118:28:20",
											"nodeType": "YulFunctionCall",
											"src": "2118:28:20"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "2108:6:20",
												"nodeType": "YulIdentifier",
												"src": "2108:6:20"
											}
										]
									}
								]
							},
							"name": "round_up_to_mul_of_32",
							"nativeSrc": "2050:102:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2081:5:20",
									"nodeType": "YulTypedName",
									"src": "2081:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "2091:6:20",
									"nodeType": "YulTypedName",
									"src": "2091:6:20",
									"type": ""
								}
							],
							"src": "2050:102:20"
						},
						{
							"body": {
								"nativeSrc": "2250:285:20",
								"nodeType": "YulBlock",
								"src": "2250:285:20",
								"statements": [
									{
										"nativeSrc": "2260:53:20",
										"nodeType": "YulVariableDeclaration",
										"src": "2260:53:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2307:5:20",
													"nodeType": "YulIdentifier",
													"src": "2307:5:20"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "2274:32:20",
												"nodeType": "YulIdentifier",
												"src": "2274:32:20"
											},
											"nativeSrc": "2274:39:20",
											"nodeType": "YulFunctionCall",
											"src": "2274:39:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "2264:6:20",
												"nodeType": "YulTypedName",
												"src": "2264:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "2322:78:20",
										"nodeType": "YulAssignment",
										"src": "2322:78:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "2388:3:20",
													"nodeType": "YulIdentifier",
													"src": "2388:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "2393:6:20",
													"nodeType": "YulIdentifier",
													"src": "2393:6:20"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "2329:58:20",
												"nodeType": "YulIdentifier",
												"src": "2329:58:20"
											},
											"nativeSrc": "2329:71:20",
											"nodeType": "YulFunctionCall",
											"src": "2329:71:20"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "2322:3:20",
												"nodeType": "YulIdentifier",
												"src": "2322:3:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "2448:5:20",
															"nodeType": "YulIdentifier",
															"src": "2448:5:20"
														},
														{
															"kind": "number",
															"nativeSrc": "2455:4:20",
															"nodeType": "YulLiteral",
															"src": "2455:4:20",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2444:3:20",
														"nodeType": "YulIdentifier",
														"src": "2444:3:20"
													},
													"nativeSrc": "2444:16:20",
													"nodeType": "YulFunctionCall",
													"src": "2444:16:20"
												},
												{
													"name": "pos",
													"nativeSrc": "2462:3:20",
													"nodeType": "YulIdentifier",
													"src": "2462:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "2467:6:20",
													"nodeType": "YulIdentifier",
													"src": "2467:6:20"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "2409:34:20",
												"nodeType": "YulIdentifier",
												"src": "2409:34:20"
											},
											"nativeSrc": "2409:65:20",
											"nodeType": "YulFunctionCall",
											"src": "2409:65:20"
										},
										"nativeSrc": "2409:65:20",
										"nodeType": "YulExpressionStatement",
										"src": "2409:65:20"
									},
									{
										"nativeSrc": "2483:46:20",
										"nodeType": "YulAssignment",
										"src": "2483:46:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "2494:3:20",
													"nodeType": "YulIdentifier",
													"src": "2494:3:20"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "2521:6:20",
															"nodeType": "YulIdentifier",
															"src": "2521:6:20"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nativeSrc": "2499:21:20",
														"nodeType": "YulIdentifier",
														"src": "2499:21:20"
													},
													"nativeSrc": "2499:29:20",
													"nodeType": "YulFunctionCall",
													"src": "2499:29:20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2490:3:20",
												"nodeType": "YulIdentifier",
												"src": "2490:3:20"
											},
											"nativeSrc": "2490:39:20",
											"nodeType": "YulFunctionCall",
											"src": "2490:39:20"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "2483:3:20",
												"nodeType": "YulIdentifier",
												"src": "2483:3:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "2158:377:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2231:5:20",
									"nodeType": "YulTypedName",
									"src": "2231:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "2238:3:20",
									"nodeType": "YulTypedName",
									"src": "2238:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "2246:3:20",
									"nodeType": "YulTypedName",
									"src": "2246:3:20",
									"type": ""
								}
							],
							"src": "2158:377:20"
						},
						{
							"body": {
								"nativeSrc": "2659:195:20",
								"nodeType": "YulBlock",
								"src": "2659:195:20",
								"statements": [
									{
										"nativeSrc": "2669:26:20",
										"nodeType": "YulAssignment",
										"src": "2669:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2681:9:20",
													"nodeType": "YulIdentifier",
													"src": "2681:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2692:2:20",
													"nodeType": "YulLiteral",
													"src": "2692:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2677:3:20",
												"nodeType": "YulIdentifier",
												"src": "2677:3:20"
											},
											"nativeSrc": "2677:18:20",
											"nodeType": "YulFunctionCall",
											"src": "2677:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2669:4:20",
												"nodeType": "YulIdentifier",
												"src": "2669:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2716:9:20",
															"nodeType": "YulIdentifier",
															"src": "2716:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "2727:1:20",
															"nodeType": "YulLiteral",
															"src": "2727:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2712:3:20",
														"nodeType": "YulIdentifier",
														"src": "2712:3:20"
													},
													"nativeSrc": "2712:17:20",
													"nodeType": "YulFunctionCall",
													"src": "2712:17:20"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "2735:4:20",
															"nodeType": "YulIdentifier",
															"src": "2735:4:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "2741:9:20",
															"nodeType": "YulIdentifier",
															"src": "2741:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2731:3:20",
														"nodeType": "YulIdentifier",
														"src": "2731:3:20"
													},
													"nativeSrc": "2731:20:20",
													"nodeType": "YulFunctionCall",
													"src": "2731:20:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2705:6:20",
												"nodeType": "YulIdentifier",
												"src": "2705:6:20"
											},
											"nativeSrc": "2705:47:20",
											"nodeType": "YulFunctionCall",
											"src": "2705:47:20"
										},
										"nativeSrc": "2705:47:20",
										"nodeType": "YulExpressionStatement",
										"src": "2705:47:20"
									},
									{
										"nativeSrc": "2761:86:20",
										"nodeType": "YulAssignment",
										"src": "2761:86:20",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "2833:6:20",
													"nodeType": "YulIdentifier",
													"src": "2833:6:20"
												},
												{
													"name": "tail",
													"nativeSrc": "2842:4:20",
													"nodeType": "YulIdentifier",
													"src": "2842:4:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "2769:63:20",
												"nodeType": "YulIdentifier",
												"src": "2769:63:20"
											},
											"nativeSrc": "2769:78:20",
											"nodeType": "YulFunctionCall",
											"src": "2769:78:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2761:4:20",
												"nodeType": "YulIdentifier",
												"src": "2761:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "2541:313:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2631:9:20",
									"nodeType": "YulTypedName",
									"src": "2631:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2643:6:20",
									"nodeType": "YulTypedName",
									"src": "2643:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2654:4:20",
									"nodeType": "YulTypedName",
									"src": "2654:4:20",
									"type": ""
								}
							],
							"src": "2541:313:20"
						},
						{
							"body": {
								"nativeSrc": "2905:32:20",
								"nodeType": "YulBlock",
								"src": "2905:32:20",
								"statements": [
									{
										"nativeSrc": "2915:16:20",
										"nodeType": "YulAssignment",
										"src": "2915:16:20",
										"value": {
											"name": "value",
											"nativeSrc": "2926:5:20",
											"nodeType": "YulIdentifier",
											"src": "2926:5:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "2915:7:20",
												"nodeType": "YulIdentifier",
												"src": "2915:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nativeSrc": "2860:77:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2887:5:20",
									"nodeType": "YulTypedName",
									"src": "2887:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "2897:7:20",
									"nodeType": "YulTypedName",
									"src": "2897:7:20",
									"type": ""
								}
							],
							"src": "2860:77:20"
						},
						{
							"body": {
								"nativeSrc": "2986:79:20",
								"nodeType": "YulBlock",
								"src": "2986:79:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "3043:16:20",
											"nodeType": "YulBlock",
											"src": "3043:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3052:1:20",
																"nodeType": "YulLiteral",
																"src": "3052:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3055:1:20",
																"nodeType": "YulLiteral",
																"src": "3055:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3045:6:20",
															"nodeType": "YulIdentifier",
															"src": "3045:6:20"
														},
														"nativeSrc": "3045:12:20",
														"nodeType": "YulFunctionCall",
														"src": "3045:12:20"
													},
													"nativeSrc": "3045:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "3045:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "3009:5:20",
															"nodeType": "YulIdentifier",
															"src": "3009:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "3034:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "3034:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nativeSrc": "3016:17:20",
																"nodeType": "YulIdentifier",
																"src": "3016:17:20"
															},
															"nativeSrc": "3016:24:20",
															"nodeType": "YulFunctionCall",
															"src": "3016:24:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "3006:2:20",
														"nodeType": "YulIdentifier",
														"src": "3006:2:20"
													},
													"nativeSrc": "3006:35:20",
													"nodeType": "YulFunctionCall",
													"src": "3006:35:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "2999:6:20",
												"nodeType": "YulIdentifier",
												"src": "2999:6:20"
											},
											"nativeSrc": "2999:43:20",
											"nodeType": "YulFunctionCall",
											"src": "2999:43:20"
										},
										"nativeSrc": "2996:63:20",
										"nodeType": "YulIf",
										"src": "2996:63:20"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nativeSrc": "2943:122:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2979:5:20",
									"nodeType": "YulTypedName",
									"src": "2979:5:20",
									"type": ""
								}
							],
							"src": "2943:122:20"
						},
						{
							"body": {
								"nativeSrc": "3123:87:20",
								"nodeType": "YulBlock",
								"src": "3123:87:20",
								"statements": [
									{
										"nativeSrc": "3133:29:20",
										"nodeType": "YulAssignment",
										"src": "3133:29:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "3155:6:20",
													"nodeType": "YulIdentifier",
													"src": "3155:6:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "3142:12:20",
												"nodeType": "YulIdentifier",
												"src": "3142:12:20"
											},
											"nativeSrc": "3142:20:20",
											"nodeType": "YulFunctionCall",
											"src": "3142:20:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "3133:5:20",
												"nodeType": "YulIdentifier",
												"src": "3133:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "3198:5:20",
													"nodeType": "YulIdentifier",
													"src": "3198:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nativeSrc": "3171:26:20",
												"nodeType": "YulIdentifier",
												"src": "3171:26:20"
											},
											"nativeSrc": "3171:33:20",
											"nodeType": "YulFunctionCall",
											"src": "3171:33:20"
										},
										"nativeSrc": "3171:33:20",
										"nodeType": "YulExpressionStatement",
										"src": "3171:33:20"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nativeSrc": "3071:139:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "3101:6:20",
									"nodeType": "YulTypedName",
									"src": "3101:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "3109:3:20",
									"nodeType": "YulTypedName",
									"src": "3109:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "3117:5:20",
									"nodeType": "YulTypedName",
									"src": "3117:5:20",
									"type": ""
								}
							],
							"src": "3071:139:20"
						},
						{
							"body": {
								"nativeSrc": "3282:263:20",
								"nodeType": "YulBlock",
								"src": "3282:263:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "3328:83:20",
											"nodeType": "YulBlock",
											"src": "3328:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "3330:77:20",
															"nodeType": "YulIdentifier",
															"src": "3330:77:20"
														},
														"nativeSrc": "3330:79:20",
														"nodeType": "YulFunctionCall",
														"src": "3330:79:20"
													},
													"nativeSrc": "3330:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "3330:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "3303:7:20",
															"nodeType": "YulIdentifier",
															"src": "3303:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "3312:9:20",
															"nodeType": "YulIdentifier",
															"src": "3312:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3299:3:20",
														"nodeType": "YulIdentifier",
														"src": "3299:3:20"
													},
													"nativeSrc": "3299:23:20",
													"nodeType": "YulFunctionCall",
													"src": "3299:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3324:2:20",
													"nodeType": "YulLiteral",
													"src": "3324:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "3295:3:20",
												"nodeType": "YulIdentifier",
												"src": "3295:3:20"
											},
											"nativeSrc": "3295:32:20",
											"nodeType": "YulFunctionCall",
											"src": "3295:32:20"
										},
										"nativeSrc": "3292:119:20",
										"nodeType": "YulIf",
										"src": "3292:119:20"
									},
									{
										"nativeSrc": "3421:117:20",
										"nodeType": "YulBlock",
										"src": "3421:117:20",
										"statements": [
											{
												"nativeSrc": "3436:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "3436:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "3450:1:20",
													"nodeType": "YulLiteral",
													"src": "3450:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "3440:6:20",
														"nodeType": "YulTypedName",
														"src": "3440:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "3465:63:20",
												"nodeType": "YulAssignment",
												"src": "3465:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "3500:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "3500:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "3511:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3511:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "3496:3:20",
																"nodeType": "YulIdentifier",
																"src": "3496:3:20"
															},
															"nativeSrc": "3496:22:20",
															"nodeType": "YulFunctionCall",
															"src": "3496:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "3520:7:20",
															"nodeType": "YulIdentifier",
															"src": "3520:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "3475:20:20",
														"nodeType": "YulIdentifier",
														"src": "3475:20:20"
													},
													"nativeSrc": "3475:53:20",
													"nodeType": "YulFunctionCall",
													"src": "3475:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "3465:6:20",
														"nodeType": "YulIdentifier",
														"src": "3465:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256",
							"nativeSrc": "3216:329:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3252:9:20",
									"nodeType": "YulTypedName",
									"src": "3252:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "3263:7:20",
									"nodeType": "YulTypedName",
									"src": "3263:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "3275:6:20",
									"nodeType": "YulTypedName",
									"src": "3275:6:20",
									"type": ""
								}
							],
							"src": "3216:329:20"
						},
						{
							"body": {
								"nativeSrc": "3596:81:20",
								"nodeType": "YulBlock",
								"src": "3596:81:20",
								"statements": [
									{
										"nativeSrc": "3606:65:20",
										"nodeType": "YulAssignment",
										"src": "3606:65:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "3621:5:20",
													"nodeType": "YulIdentifier",
													"src": "3621:5:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3628:42:20",
													"nodeType": "YulLiteral",
													"src": "3628:42:20",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "3617:3:20",
												"nodeType": "YulIdentifier",
												"src": "3617:3:20"
											},
											"nativeSrc": "3617:54:20",
											"nodeType": "YulFunctionCall",
											"src": "3617:54:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "3606:7:20",
												"nodeType": "YulIdentifier",
												"src": "3606:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "3551:126:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3578:5:20",
									"nodeType": "YulTypedName",
									"src": "3578:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "3588:7:20",
									"nodeType": "YulTypedName",
									"src": "3588:7:20",
									"type": ""
								}
							],
							"src": "3551:126:20"
						},
						{
							"body": {
								"nativeSrc": "3728:51:20",
								"nodeType": "YulBlock",
								"src": "3728:51:20",
								"statements": [
									{
										"nativeSrc": "3738:35:20",
										"nodeType": "YulAssignment",
										"src": "3738:35:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "3767:5:20",
													"nodeType": "YulIdentifier",
													"src": "3767:5:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "3749:17:20",
												"nodeType": "YulIdentifier",
												"src": "3749:17:20"
											},
											"nativeSrc": "3749:24:20",
											"nodeType": "YulFunctionCall",
											"src": "3749:24:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "3738:7:20",
												"nodeType": "YulIdentifier",
												"src": "3738:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "3683:96:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3710:5:20",
									"nodeType": "YulTypedName",
									"src": "3710:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "3720:7:20",
									"nodeType": "YulTypedName",
									"src": "3720:7:20",
									"type": ""
								}
							],
							"src": "3683:96:20"
						},
						{
							"body": {
								"nativeSrc": "3850:53:20",
								"nodeType": "YulBlock",
								"src": "3850:53:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3867:3:20",
													"nodeType": "YulIdentifier",
													"src": "3867:3:20"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "3890:5:20",
															"nodeType": "YulIdentifier",
															"src": "3890:5:20"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nativeSrc": "3872:17:20",
														"nodeType": "YulIdentifier",
														"src": "3872:17:20"
													},
													"nativeSrc": "3872:24:20",
													"nodeType": "YulFunctionCall",
													"src": "3872:24:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3860:6:20",
												"nodeType": "YulIdentifier",
												"src": "3860:6:20"
											},
											"nativeSrc": "3860:37:20",
											"nodeType": "YulFunctionCall",
											"src": "3860:37:20"
										},
										"nativeSrc": "3860:37:20",
										"nodeType": "YulExpressionStatement",
										"src": "3860:37:20"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nativeSrc": "3785:118:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3838:5:20",
									"nodeType": "YulTypedName",
									"src": "3838:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "3845:3:20",
									"nodeType": "YulTypedName",
									"src": "3845:3:20",
									"type": ""
								}
							],
							"src": "3785:118:20"
						},
						{
							"body": {
								"nativeSrc": "4007:124:20",
								"nodeType": "YulBlock",
								"src": "4007:124:20",
								"statements": [
									{
										"nativeSrc": "4017:26:20",
										"nodeType": "YulAssignment",
										"src": "4017:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4029:9:20",
													"nodeType": "YulIdentifier",
													"src": "4029:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "4040:2:20",
													"nodeType": "YulLiteral",
													"src": "4040:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "4025:3:20",
												"nodeType": "YulIdentifier",
												"src": "4025:3:20"
											},
											"nativeSrc": "4025:18:20",
											"nodeType": "YulFunctionCall",
											"src": "4025:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4017:4:20",
												"nodeType": "YulIdentifier",
												"src": "4017:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "4097:6:20",
													"nodeType": "YulIdentifier",
													"src": "4097:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4110:9:20",
															"nodeType": "YulIdentifier",
															"src": "4110:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "4121:1:20",
															"nodeType": "YulLiteral",
															"src": "4121:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4106:3:20",
														"nodeType": "YulIdentifier",
														"src": "4106:3:20"
													},
													"nativeSrc": "4106:17:20",
													"nodeType": "YulFunctionCall",
													"src": "4106:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "4053:43:20",
												"nodeType": "YulIdentifier",
												"src": "4053:43:20"
											},
											"nativeSrc": "4053:71:20",
											"nodeType": "YulFunctionCall",
											"src": "4053:71:20"
										},
										"nativeSrc": "4053:71:20",
										"nodeType": "YulExpressionStatement",
										"src": "4053:71:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "3909:222:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3979:9:20",
									"nodeType": "YulTypedName",
									"src": "3979:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "3991:6:20",
									"nodeType": "YulTypedName",
									"src": "3991:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4002:4:20",
									"nodeType": "YulTypedName",
									"src": "4002:4:20",
									"type": ""
								}
							],
							"src": "3909:222:20"
						},
						{
							"body": {
								"nativeSrc": "4180:79:20",
								"nodeType": "YulBlock",
								"src": "4180:79:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "4237:16:20",
											"nodeType": "YulBlock",
											"src": "4237:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4246:1:20",
																"nodeType": "YulLiteral",
																"src": "4246:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "4249:1:20",
																"nodeType": "YulLiteral",
																"src": "4249:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "4239:6:20",
															"nodeType": "YulIdentifier",
															"src": "4239:6:20"
														},
														"nativeSrc": "4239:12:20",
														"nodeType": "YulFunctionCall",
														"src": "4239:12:20"
													},
													"nativeSrc": "4239:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "4239:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "4203:5:20",
															"nodeType": "YulIdentifier",
															"src": "4203:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "4228:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4228:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nativeSrc": "4210:17:20",
																"nodeType": "YulIdentifier",
																"src": "4210:17:20"
															},
															"nativeSrc": "4210:24:20",
															"nodeType": "YulFunctionCall",
															"src": "4210:24:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "4200:2:20",
														"nodeType": "YulIdentifier",
														"src": "4200:2:20"
													},
													"nativeSrc": "4200:35:20",
													"nodeType": "YulFunctionCall",
													"src": "4200:35:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4193:6:20",
												"nodeType": "YulIdentifier",
												"src": "4193:6:20"
											},
											"nativeSrc": "4193:43:20",
											"nodeType": "YulFunctionCall",
											"src": "4193:43:20"
										},
										"nativeSrc": "4190:63:20",
										"nodeType": "YulIf",
										"src": "4190:63:20"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nativeSrc": "4137:122:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4173:5:20",
									"nodeType": "YulTypedName",
									"src": "4173:5:20",
									"type": ""
								}
							],
							"src": "4137:122:20"
						},
						{
							"body": {
								"nativeSrc": "4317:87:20",
								"nodeType": "YulBlock",
								"src": "4317:87:20",
								"statements": [
									{
										"nativeSrc": "4327:29:20",
										"nodeType": "YulAssignment",
										"src": "4327:29:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "4349:6:20",
													"nodeType": "YulIdentifier",
													"src": "4349:6:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "4336:12:20",
												"nodeType": "YulIdentifier",
												"src": "4336:12:20"
											},
											"nativeSrc": "4336:20:20",
											"nodeType": "YulFunctionCall",
											"src": "4336:20:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "4327:5:20",
												"nodeType": "YulIdentifier",
												"src": "4327:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "4392:5:20",
													"nodeType": "YulIdentifier",
													"src": "4392:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nativeSrc": "4365:26:20",
												"nodeType": "YulIdentifier",
												"src": "4365:26:20"
											},
											"nativeSrc": "4365:33:20",
											"nodeType": "YulFunctionCall",
											"src": "4365:33:20"
										},
										"nativeSrc": "4365:33:20",
										"nodeType": "YulExpressionStatement",
										"src": "4365:33:20"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nativeSrc": "4265:139:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "4295:6:20",
									"nodeType": "YulTypedName",
									"src": "4295:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "4303:3:20",
									"nodeType": "YulTypedName",
									"src": "4303:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "4311:5:20",
									"nodeType": "YulTypedName",
									"src": "4311:5:20",
									"type": ""
								}
							],
							"src": "4265:139:20"
						},
						{
							"body": {
								"nativeSrc": "4493:391:20",
								"nodeType": "YulBlock",
								"src": "4493:391:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "4539:83:20",
											"nodeType": "YulBlock",
											"src": "4539:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "4541:77:20",
															"nodeType": "YulIdentifier",
															"src": "4541:77:20"
														},
														"nativeSrc": "4541:79:20",
														"nodeType": "YulFunctionCall",
														"src": "4541:79:20"
													},
													"nativeSrc": "4541:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "4541:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "4514:7:20",
															"nodeType": "YulIdentifier",
															"src": "4514:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "4523:9:20",
															"nodeType": "YulIdentifier",
															"src": "4523:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "4510:3:20",
														"nodeType": "YulIdentifier",
														"src": "4510:3:20"
													},
													"nativeSrc": "4510:23:20",
													"nodeType": "YulFunctionCall",
													"src": "4510:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "4535:2:20",
													"nodeType": "YulLiteral",
													"src": "4535:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "4506:3:20",
												"nodeType": "YulIdentifier",
												"src": "4506:3:20"
											},
											"nativeSrc": "4506:32:20",
											"nodeType": "YulFunctionCall",
											"src": "4506:32:20"
										},
										"nativeSrc": "4503:119:20",
										"nodeType": "YulIf",
										"src": "4503:119:20"
									},
									{
										"nativeSrc": "4632:117:20",
										"nodeType": "YulBlock",
										"src": "4632:117:20",
										"statements": [
											{
												"nativeSrc": "4647:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "4647:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "4661:1:20",
													"nodeType": "YulLiteral",
													"src": "4661:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "4651:6:20",
														"nodeType": "YulTypedName",
														"src": "4651:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "4676:63:20",
												"nodeType": "YulAssignment",
												"src": "4676:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "4711:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "4711:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "4722:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4722:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "4707:3:20",
																"nodeType": "YulIdentifier",
																"src": "4707:3:20"
															},
															"nativeSrc": "4707:22:20",
															"nodeType": "YulFunctionCall",
															"src": "4707:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "4731:7:20",
															"nodeType": "YulIdentifier",
															"src": "4731:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "4686:20:20",
														"nodeType": "YulIdentifier",
														"src": "4686:20:20"
													},
													"nativeSrc": "4686:53:20",
													"nodeType": "YulFunctionCall",
													"src": "4686:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "4676:6:20",
														"nodeType": "YulIdentifier",
														"src": "4676:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "4759:118:20",
										"nodeType": "YulBlock",
										"src": "4759:118:20",
										"statements": [
											{
												"nativeSrc": "4774:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "4774:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "4788:2:20",
													"nodeType": "YulLiteral",
													"src": "4788:2:20",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "4778:6:20",
														"nodeType": "YulTypedName",
														"src": "4778:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "4804:63:20",
												"nodeType": "YulAssignment",
												"src": "4804:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "4839:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "4839:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "4850:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4850:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "4835:3:20",
																"nodeType": "YulIdentifier",
																"src": "4835:3:20"
															},
															"nativeSrc": "4835:22:20",
															"nodeType": "YulFunctionCall",
															"src": "4835:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "4859:7:20",
															"nodeType": "YulIdentifier",
															"src": "4859:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "4814:20:20",
														"nodeType": "YulIdentifier",
														"src": "4814:20:20"
													},
													"nativeSrc": "4814:53:20",
													"nodeType": "YulFunctionCall",
													"src": "4814:53:20"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "4804:6:20",
														"nodeType": "YulIdentifier",
														"src": "4804:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nativeSrc": "4410:474:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4455:9:20",
									"nodeType": "YulTypedName",
									"src": "4455:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "4466:7:20",
									"nodeType": "YulTypedName",
									"src": "4466:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "4478:6:20",
									"nodeType": "YulTypedName",
									"src": "4478:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "4486:6:20",
									"nodeType": "YulTypedName",
									"src": "4486:6:20",
									"type": ""
								}
							],
							"src": "4410:474:20"
						},
						{
							"body": {
								"nativeSrc": "4990:519:20",
								"nodeType": "YulBlock",
								"src": "4990:519:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "5036:83:20",
											"nodeType": "YulBlock",
											"src": "5036:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "5038:77:20",
															"nodeType": "YulIdentifier",
															"src": "5038:77:20"
														},
														"nativeSrc": "5038:79:20",
														"nodeType": "YulFunctionCall",
														"src": "5038:79:20"
													},
													"nativeSrc": "5038:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "5038:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5011:7:20",
															"nodeType": "YulIdentifier",
															"src": "5011:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "5020:9:20",
															"nodeType": "YulIdentifier",
															"src": "5020:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5007:3:20",
														"nodeType": "YulIdentifier",
														"src": "5007:3:20"
													},
													"nativeSrc": "5007:23:20",
													"nodeType": "YulFunctionCall",
													"src": "5007:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "5032:2:20",
													"nodeType": "YulLiteral",
													"src": "5032:2:20",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5003:3:20",
												"nodeType": "YulIdentifier",
												"src": "5003:3:20"
											},
											"nativeSrc": "5003:32:20",
											"nodeType": "YulFunctionCall",
											"src": "5003:32:20"
										},
										"nativeSrc": "5000:119:20",
										"nodeType": "YulIf",
										"src": "5000:119:20"
									},
									{
										"nativeSrc": "5129:117:20",
										"nodeType": "YulBlock",
										"src": "5129:117:20",
										"statements": [
											{
												"nativeSrc": "5144:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "5144:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "5158:1:20",
													"nodeType": "YulLiteral",
													"src": "5158:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5148:6:20",
														"nodeType": "YulTypedName",
														"src": "5148:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5173:63:20",
												"nodeType": "YulAssignment",
												"src": "5173:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5208:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "5208:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5219:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5219:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5204:3:20",
																"nodeType": "YulIdentifier",
																"src": "5204:3:20"
															},
															"nativeSrc": "5204:22:20",
															"nodeType": "YulFunctionCall",
															"src": "5204:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5228:7:20",
															"nodeType": "YulIdentifier",
															"src": "5228:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "5183:20:20",
														"nodeType": "YulIdentifier",
														"src": "5183:20:20"
													},
													"nativeSrc": "5183:53:20",
													"nodeType": "YulFunctionCall",
													"src": "5183:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "5173:6:20",
														"nodeType": "YulIdentifier",
														"src": "5173:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "5256:118:20",
										"nodeType": "YulBlock",
										"src": "5256:118:20",
										"statements": [
											{
												"nativeSrc": "5271:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "5271:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "5285:2:20",
													"nodeType": "YulLiteral",
													"src": "5285:2:20",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5275:6:20",
														"nodeType": "YulTypedName",
														"src": "5275:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5301:63:20",
												"nodeType": "YulAssignment",
												"src": "5301:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5336:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "5336:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5347:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5347:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5332:3:20",
																"nodeType": "YulIdentifier",
																"src": "5332:3:20"
															},
															"nativeSrc": "5332:22:20",
															"nodeType": "YulFunctionCall",
															"src": "5332:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5356:7:20",
															"nodeType": "YulIdentifier",
															"src": "5356:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "5311:20:20",
														"nodeType": "YulIdentifier",
														"src": "5311:20:20"
													},
													"nativeSrc": "5311:53:20",
													"nodeType": "YulFunctionCall",
													"src": "5311:53:20"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "5301:6:20",
														"nodeType": "YulIdentifier",
														"src": "5301:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "5384:118:20",
										"nodeType": "YulBlock",
										"src": "5384:118:20",
										"statements": [
											{
												"nativeSrc": "5399:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "5399:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "5413:2:20",
													"nodeType": "YulLiteral",
													"src": "5413:2:20",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5403:6:20",
														"nodeType": "YulTypedName",
														"src": "5403:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5429:63:20",
												"nodeType": "YulAssignment",
												"src": "5429:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5464:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "5464:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5475:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5475:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5460:3:20",
																"nodeType": "YulIdentifier",
																"src": "5460:3:20"
															},
															"nativeSrc": "5460:22:20",
															"nodeType": "YulFunctionCall",
															"src": "5460:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5484:7:20",
															"nodeType": "YulIdentifier",
															"src": "5484:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "5439:20:20",
														"nodeType": "YulIdentifier",
														"src": "5439:20:20"
													},
													"nativeSrc": "5439:53:20",
													"nodeType": "YulFunctionCall",
													"src": "5439:53:20"
												},
												"variableNames": [
													{
														"name": "value2",
														"nativeSrc": "5429:6:20",
														"nodeType": "YulIdentifier",
														"src": "5429:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256",
							"nativeSrc": "4890:619:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4944:9:20",
									"nodeType": "YulTypedName",
									"src": "4944:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "4955:7:20",
									"nodeType": "YulTypedName",
									"src": "4955:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "4967:6:20",
									"nodeType": "YulTypedName",
									"src": "4967:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "4975:6:20",
									"nodeType": "YulTypedName",
									"src": "4975:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "4983:6:20",
									"nodeType": "YulTypedName",
									"src": "4983:6:20",
									"type": ""
								}
							],
							"src": "4890:619:20"
						},
						{
							"body": {
								"nativeSrc": "5581:263:20",
								"nodeType": "YulBlock",
								"src": "5581:263:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "5627:83:20",
											"nodeType": "YulBlock",
											"src": "5627:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "5629:77:20",
															"nodeType": "YulIdentifier",
															"src": "5629:77:20"
														},
														"nativeSrc": "5629:79:20",
														"nodeType": "YulFunctionCall",
														"src": "5629:79:20"
													},
													"nativeSrc": "5629:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "5629:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5602:7:20",
															"nodeType": "YulIdentifier",
															"src": "5602:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "5611:9:20",
															"nodeType": "YulIdentifier",
															"src": "5611:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5598:3:20",
														"nodeType": "YulIdentifier",
														"src": "5598:3:20"
													},
													"nativeSrc": "5598:23:20",
													"nodeType": "YulFunctionCall",
													"src": "5598:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "5623:2:20",
													"nodeType": "YulLiteral",
													"src": "5623:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5594:3:20",
												"nodeType": "YulIdentifier",
												"src": "5594:3:20"
											},
											"nativeSrc": "5594:32:20",
											"nodeType": "YulFunctionCall",
											"src": "5594:32:20"
										},
										"nativeSrc": "5591:119:20",
										"nodeType": "YulIf",
										"src": "5591:119:20"
									},
									{
										"nativeSrc": "5720:117:20",
										"nodeType": "YulBlock",
										"src": "5720:117:20",
										"statements": [
											{
												"nativeSrc": "5735:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "5735:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "5749:1:20",
													"nodeType": "YulLiteral",
													"src": "5749:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5739:6:20",
														"nodeType": "YulTypedName",
														"src": "5739:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5764:63:20",
												"nodeType": "YulAssignment",
												"src": "5764:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5799:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "5799:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5810:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5810:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5795:3:20",
																"nodeType": "YulIdentifier",
																"src": "5795:3:20"
															},
															"nativeSrc": "5795:22:20",
															"nodeType": "YulFunctionCall",
															"src": "5795:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5819:7:20",
															"nodeType": "YulIdentifier",
															"src": "5819:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "5774:20:20",
														"nodeType": "YulIdentifier",
														"src": "5774:20:20"
													},
													"nativeSrc": "5774:53:20",
													"nodeType": "YulFunctionCall",
													"src": "5774:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "5764:6:20",
														"nodeType": "YulIdentifier",
														"src": "5764:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nativeSrc": "5515:329:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5551:9:20",
									"nodeType": "YulTypedName",
									"src": "5551:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "5562:7:20",
									"nodeType": "YulTypedName",
									"src": "5562:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "5574:6:20",
									"nodeType": "YulTypedName",
									"src": "5574:6:20",
									"type": ""
								}
							],
							"src": "5515:329:20"
						},
						{
							"body": {
								"nativeSrc": "5915:53:20",
								"nodeType": "YulBlock",
								"src": "5915:53:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "5932:3:20",
													"nodeType": "YulIdentifier",
													"src": "5932:3:20"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "5955:5:20",
															"nodeType": "YulIdentifier",
															"src": "5955:5:20"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nativeSrc": "5937:17:20",
														"nodeType": "YulIdentifier",
														"src": "5937:17:20"
													},
													"nativeSrc": "5937:24:20",
													"nodeType": "YulFunctionCall",
													"src": "5937:24:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5925:6:20",
												"nodeType": "YulIdentifier",
												"src": "5925:6:20"
											},
											"nativeSrc": "5925:37:20",
											"nodeType": "YulFunctionCall",
											"src": "5925:37:20"
										},
										"nativeSrc": "5925:37:20",
										"nodeType": "YulExpressionStatement",
										"src": "5925:37:20"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nativeSrc": "5850:118:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5903:5:20",
									"nodeType": "YulTypedName",
									"src": "5903:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "5910:3:20",
									"nodeType": "YulTypedName",
									"src": "5910:3:20",
									"type": ""
								}
							],
							"src": "5850:118:20"
						},
						{
							"body": {
								"nativeSrc": "6072:124:20",
								"nodeType": "YulBlock",
								"src": "6072:124:20",
								"statements": [
									{
										"nativeSrc": "6082:26:20",
										"nodeType": "YulAssignment",
										"src": "6082:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6094:9:20",
													"nodeType": "YulIdentifier",
													"src": "6094:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "6105:2:20",
													"nodeType": "YulLiteral",
													"src": "6105:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6090:3:20",
												"nodeType": "YulIdentifier",
												"src": "6090:3:20"
											},
											"nativeSrc": "6090:18:20",
											"nodeType": "YulFunctionCall",
											"src": "6090:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6082:4:20",
												"nodeType": "YulIdentifier",
												"src": "6082:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "6162:6:20",
													"nodeType": "YulIdentifier",
													"src": "6162:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6175:9:20",
															"nodeType": "YulIdentifier",
															"src": "6175:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "6186:1:20",
															"nodeType": "YulLiteral",
															"src": "6186:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6171:3:20",
														"nodeType": "YulIdentifier",
														"src": "6171:3:20"
													},
													"nativeSrc": "6171:17:20",
													"nodeType": "YulFunctionCall",
													"src": "6171:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "6118:43:20",
												"nodeType": "YulIdentifier",
												"src": "6118:43:20"
											},
											"nativeSrc": "6118:71:20",
											"nodeType": "YulFunctionCall",
											"src": "6118:71:20"
										},
										"nativeSrc": "6118:71:20",
										"nodeType": "YulExpressionStatement",
										"src": "6118:71:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "5974:222:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6044:9:20",
									"nodeType": "YulTypedName",
									"src": "6044:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "6056:6:20",
									"nodeType": "YulTypedName",
									"src": "6056:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6067:4:20",
									"nodeType": "YulTypedName",
									"src": "6067:4:20",
									"type": ""
								}
							],
							"src": "5974:222:20"
						},
						{
							"body": {
								"nativeSrc": "6242:76:20",
								"nodeType": "YulBlock",
								"src": "6242:76:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "6296:16:20",
											"nodeType": "YulBlock",
											"src": "6296:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "6305:1:20",
																"nodeType": "YulLiteral",
																"src": "6305:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "6308:1:20",
																"nodeType": "YulLiteral",
																"src": "6308:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "6298:6:20",
															"nodeType": "YulIdentifier",
															"src": "6298:6:20"
														},
														"nativeSrc": "6298:12:20",
														"nodeType": "YulFunctionCall",
														"src": "6298:12:20"
													},
													"nativeSrc": "6298:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "6298:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "6265:5:20",
															"nodeType": "YulIdentifier",
															"src": "6265:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "6287:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "6287:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_bool",
																"nativeSrc": "6272:14:20",
																"nodeType": "YulIdentifier",
																"src": "6272:14:20"
															},
															"nativeSrc": "6272:21:20",
															"nodeType": "YulFunctionCall",
															"src": "6272:21:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "6262:2:20",
														"nodeType": "YulIdentifier",
														"src": "6262:2:20"
													},
													"nativeSrc": "6262:32:20",
													"nodeType": "YulFunctionCall",
													"src": "6262:32:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "6255:6:20",
												"nodeType": "YulIdentifier",
												"src": "6255:6:20"
											},
											"nativeSrc": "6255:40:20",
											"nodeType": "YulFunctionCall",
											"src": "6255:40:20"
										},
										"nativeSrc": "6252:60:20",
										"nodeType": "YulIf",
										"src": "6252:60:20"
									}
								]
							},
							"name": "validator_revert_t_bool",
							"nativeSrc": "6202:116:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "6235:5:20",
									"nodeType": "YulTypedName",
									"src": "6235:5:20",
									"type": ""
								}
							],
							"src": "6202:116:20"
						},
						{
							"body": {
								"nativeSrc": "6373:84:20",
								"nodeType": "YulBlock",
								"src": "6373:84:20",
								"statements": [
									{
										"nativeSrc": "6383:29:20",
										"nodeType": "YulAssignment",
										"src": "6383:29:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "6405:6:20",
													"nodeType": "YulIdentifier",
													"src": "6405:6:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6392:12:20",
												"nodeType": "YulIdentifier",
												"src": "6392:12:20"
											},
											"nativeSrc": "6392:20:20",
											"nodeType": "YulFunctionCall",
											"src": "6392:20:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "6383:5:20",
												"nodeType": "YulIdentifier",
												"src": "6383:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "6445:5:20",
													"nodeType": "YulIdentifier",
													"src": "6445:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_bool",
												"nativeSrc": "6421:23:20",
												"nodeType": "YulIdentifier",
												"src": "6421:23:20"
											},
											"nativeSrc": "6421:30:20",
											"nodeType": "YulFunctionCall",
											"src": "6421:30:20"
										},
										"nativeSrc": "6421:30:20",
										"nodeType": "YulExpressionStatement",
										"src": "6421:30:20"
									}
								]
							},
							"name": "abi_decode_t_bool",
							"nativeSrc": "6324:133:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "6351:6:20",
									"nodeType": "YulTypedName",
									"src": "6351:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "6359:3:20",
									"nodeType": "YulTypedName",
									"src": "6359:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "6367:5:20",
									"nodeType": "YulTypedName",
									"src": "6367:5:20",
									"type": ""
								}
							],
							"src": "6324:133:20"
						},
						{
							"body": {
								"nativeSrc": "6543:388:20",
								"nodeType": "YulBlock",
								"src": "6543:388:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "6589:83:20",
											"nodeType": "YulBlock",
											"src": "6589:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "6591:77:20",
															"nodeType": "YulIdentifier",
															"src": "6591:77:20"
														},
														"nativeSrc": "6591:79:20",
														"nodeType": "YulFunctionCall",
														"src": "6591:79:20"
													},
													"nativeSrc": "6591:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "6591:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "6564:7:20",
															"nodeType": "YulIdentifier",
															"src": "6564:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "6573:9:20",
															"nodeType": "YulIdentifier",
															"src": "6573:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "6560:3:20",
														"nodeType": "YulIdentifier",
														"src": "6560:3:20"
													},
													"nativeSrc": "6560:23:20",
													"nodeType": "YulFunctionCall",
													"src": "6560:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "6585:2:20",
													"nodeType": "YulLiteral",
													"src": "6585:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "6556:3:20",
												"nodeType": "YulIdentifier",
												"src": "6556:3:20"
											},
											"nativeSrc": "6556:32:20",
											"nodeType": "YulFunctionCall",
											"src": "6556:32:20"
										},
										"nativeSrc": "6553:119:20",
										"nodeType": "YulIf",
										"src": "6553:119:20"
									},
									{
										"nativeSrc": "6682:117:20",
										"nodeType": "YulBlock",
										"src": "6682:117:20",
										"statements": [
											{
												"nativeSrc": "6697:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "6697:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "6711:1:20",
													"nodeType": "YulLiteral",
													"src": "6711:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "6701:6:20",
														"nodeType": "YulTypedName",
														"src": "6701:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "6726:63:20",
												"nodeType": "YulAssignment",
												"src": "6726:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "6761:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "6761:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "6772:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6772:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "6757:3:20",
																"nodeType": "YulIdentifier",
																"src": "6757:3:20"
															},
															"nativeSrc": "6757:22:20",
															"nodeType": "YulFunctionCall",
															"src": "6757:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "6781:7:20",
															"nodeType": "YulIdentifier",
															"src": "6781:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "6736:20:20",
														"nodeType": "YulIdentifier",
														"src": "6736:20:20"
													},
													"nativeSrc": "6736:53:20",
													"nodeType": "YulFunctionCall",
													"src": "6736:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "6726:6:20",
														"nodeType": "YulIdentifier",
														"src": "6726:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "6809:115:20",
										"nodeType": "YulBlock",
										"src": "6809:115:20",
										"statements": [
											{
												"nativeSrc": "6824:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "6824:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "6838:2:20",
													"nodeType": "YulLiteral",
													"src": "6838:2:20",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "6828:6:20",
														"nodeType": "YulTypedName",
														"src": "6828:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "6854:60:20",
												"nodeType": "YulAssignment",
												"src": "6854:60:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "6886:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "6886:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "6897:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6897:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "6882:3:20",
																"nodeType": "YulIdentifier",
																"src": "6882:3:20"
															},
															"nativeSrc": "6882:22:20",
															"nodeType": "YulFunctionCall",
															"src": "6882:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "6906:7:20",
															"nodeType": "YulIdentifier",
															"src": "6906:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_bool",
														"nativeSrc": "6864:17:20",
														"nodeType": "YulIdentifier",
														"src": "6864:17:20"
													},
													"nativeSrc": "6864:50:20",
													"nodeType": "YulFunctionCall",
													"src": "6864:50:20"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "6854:6:20",
														"nodeType": "YulIdentifier",
														"src": "6854:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_bool",
							"nativeSrc": "6463:468:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6505:9:20",
									"nodeType": "YulTypedName",
									"src": "6505:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "6516:7:20",
									"nodeType": "YulTypedName",
									"src": "6516:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "6528:6:20",
									"nodeType": "YulTypedName",
									"src": "6528:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6536:6:20",
									"nodeType": "YulTypedName",
									"src": "6536:6:20",
									"type": ""
								}
							],
							"src": "6463:468:20"
						},
						{
							"body": {
								"nativeSrc": "7026:28:20",
								"nodeType": "YulBlock",
								"src": "7026:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7043:1:20",
													"nodeType": "YulLiteral",
													"src": "7043:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "7046:1:20",
													"nodeType": "YulLiteral",
													"src": "7046:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "7036:6:20",
												"nodeType": "YulIdentifier",
												"src": "7036:6:20"
											},
											"nativeSrc": "7036:12:20",
											"nodeType": "YulFunctionCall",
											"src": "7036:12:20"
										},
										"nativeSrc": "7036:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "7036:12:20"
									}
								]
							},
							"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
							"nativeSrc": "6937:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "6937:117:20"
						},
						{
							"body": {
								"nativeSrc": "7149:28:20",
								"nodeType": "YulBlock",
								"src": "7149:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7166:1:20",
													"nodeType": "YulLiteral",
													"src": "7166:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "7169:1:20",
													"nodeType": "YulLiteral",
													"src": "7169:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "7159:6:20",
												"nodeType": "YulIdentifier",
												"src": "7159:6:20"
											},
											"nativeSrc": "7159:12:20",
											"nodeType": "YulFunctionCall",
											"src": "7159:12:20"
										},
										"nativeSrc": "7159:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "7159:12:20"
									}
								]
							},
							"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
							"nativeSrc": "7060:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "7060:117:20"
						},
						{
							"body": {
								"nativeSrc": "7211:152:20",
								"nodeType": "YulBlock",
								"src": "7211:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7228:1:20",
													"nodeType": "YulLiteral",
													"src": "7228:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "7231:77:20",
													"nodeType": "YulLiteral",
													"src": "7231:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7221:6:20",
												"nodeType": "YulIdentifier",
												"src": "7221:6:20"
											},
											"nativeSrc": "7221:88:20",
											"nodeType": "YulFunctionCall",
											"src": "7221:88:20"
										},
										"nativeSrc": "7221:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "7221:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7325:1:20",
													"nodeType": "YulLiteral",
													"src": "7325:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "7328:4:20",
													"nodeType": "YulLiteral",
													"src": "7328:4:20",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7318:6:20",
												"nodeType": "YulIdentifier",
												"src": "7318:6:20"
											},
											"nativeSrc": "7318:15:20",
											"nodeType": "YulFunctionCall",
											"src": "7318:15:20"
										},
										"nativeSrc": "7318:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "7318:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7349:1:20",
													"nodeType": "YulLiteral",
													"src": "7349:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "7352:4:20",
													"nodeType": "YulLiteral",
													"src": "7352:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "7342:6:20",
												"nodeType": "YulIdentifier",
												"src": "7342:6:20"
											},
											"nativeSrc": "7342:15:20",
											"nodeType": "YulFunctionCall",
											"src": "7342:15:20"
										},
										"nativeSrc": "7342:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "7342:15:20"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "7183:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "7183:180:20"
						},
						{
							"body": {
								"nativeSrc": "7412:238:20",
								"nodeType": "YulBlock",
								"src": "7412:238:20",
								"statements": [
									{
										"nativeSrc": "7422:58:20",
										"nodeType": "YulVariableDeclaration",
										"src": "7422:58:20",
										"value": {
											"arguments": [
												{
													"name": "memPtr",
													"nativeSrc": "7444:6:20",
													"nodeType": "YulIdentifier",
													"src": "7444:6:20"
												},
												{
													"arguments": [
														{
															"name": "size",
															"nativeSrc": "7474:4:20",
															"nodeType": "YulIdentifier",
															"src": "7474:4:20"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nativeSrc": "7452:21:20",
														"nodeType": "YulIdentifier",
														"src": "7452:21:20"
													},
													"nativeSrc": "7452:27:20",
													"nodeType": "YulFunctionCall",
													"src": "7452:27:20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7440:3:20",
												"nodeType": "YulIdentifier",
												"src": "7440:3:20"
											},
											"nativeSrc": "7440:40:20",
											"nodeType": "YulFunctionCall",
											"src": "7440:40:20"
										},
										"variables": [
											{
												"name": "newFreePtr",
												"nativeSrc": "7426:10:20",
												"nodeType": "YulTypedName",
												"src": "7426:10:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "7591:22:20",
											"nodeType": "YulBlock",
											"src": "7591:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "7593:16:20",
															"nodeType": "YulIdentifier",
															"src": "7593:16:20"
														},
														"nativeSrc": "7593:18:20",
														"nodeType": "YulFunctionCall",
														"src": "7593:18:20"
													},
													"nativeSrc": "7593:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "7593:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nativeSrc": "7534:10:20",
															"nodeType": "YulIdentifier",
															"src": "7534:10:20"
														},
														{
															"kind": "number",
															"nativeSrc": "7546:18:20",
															"nodeType": "YulLiteral",
															"src": "7546:18:20",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nativeSrc": "7531:2:20",
														"nodeType": "YulIdentifier",
														"src": "7531:2:20"
													},
													"nativeSrc": "7531:34:20",
													"nodeType": "YulFunctionCall",
													"src": "7531:34:20"
												},
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nativeSrc": "7570:10:20",
															"nodeType": "YulIdentifier",
															"src": "7570:10:20"
														},
														{
															"name": "memPtr",
															"nativeSrc": "7582:6:20",
															"nodeType": "YulIdentifier",
															"src": "7582:6:20"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "7567:2:20",
														"nodeType": "YulIdentifier",
														"src": "7567:2:20"
													},
													"nativeSrc": "7567:22:20",
													"nodeType": "YulFunctionCall",
													"src": "7567:22:20"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "7528:2:20",
												"nodeType": "YulIdentifier",
												"src": "7528:2:20"
											},
											"nativeSrc": "7528:62:20",
											"nodeType": "YulFunctionCall",
											"src": "7528:62:20"
										},
										"nativeSrc": "7525:88:20",
										"nodeType": "YulIf",
										"src": "7525:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7629:2:20",
													"nodeType": "YulLiteral",
													"src": "7629:2:20",
													"type": "",
													"value": "64"
												},
												{
													"name": "newFreePtr",
													"nativeSrc": "7633:10:20",
													"nodeType": "YulIdentifier",
													"src": "7633:10:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7622:6:20",
												"nodeType": "YulIdentifier",
												"src": "7622:6:20"
											},
											"nativeSrc": "7622:22:20",
											"nodeType": "YulFunctionCall",
											"src": "7622:22:20"
										},
										"nativeSrc": "7622:22:20",
										"nodeType": "YulExpressionStatement",
										"src": "7622:22:20"
									}
								]
							},
							"name": "finalize_allocation",
							"nativeSrc": "7369:281:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "7398:6:20",
									"nodeType": "YulTypedName",
									"src": "7398:6:20",
									"type": ""
								},
								{
									"name": "size",
									"nativeSrc": "7406:4:20",
									"nodeType": "YulTypedName",
									"src": "7406:4:20",
									"type": ""
								}
							],
							"src": "7369:281:20"
						},
						{
							"body": {
								"nativeSrc": "7697:88:20",
								"nodeType": "YulBlock",
								"src": "7697:88:20",
								"statements": [
									{
										"nativeSrc": "7707:30:20",
										"nodeType": "YulAssignment",
										"src": "7707:30:20",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "allocate_unbounded",
												"nativeSrc": "7717:18:20",
												"nodeType": "YulIdentifier",
												"src": "7717:18:20"
											},
											"nativeSrc": "7717:20:20",
											"nodeType": "YulFunctionCall",
											"src": "7717:20:20"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nativeSrc": "7707:6:20",
												"nodeType": "YulIdentifier",
												"src": "7707:6:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "memPtr",
													"nativeSrc": "7766:6:20",
													"nodeType": "YulIdentifier",
													"src": "7766:6:20"
												},
												{
													"name": "size",
													"nativeSrc": "7774:4:20",
													"nodeType": "YulIdentifier",
													"src": "7774:4:20"
												}
											],
											"functionName": {
												"name": "finalize_allocation",
												"nativeSrc": "7746:19:20",
												"nodeType": "YulIdentifier",
												"src": "7746:19:20"
											},
											"nativeSrc": "7746:33:20",
											"nodeType": "YulFunctionCall",
											"src": "7746:33:20"
										},
										"nativeSrc": "7746:33:20",
										"nodeType": "YulExpressionStatement",
										"src": "7746:33:20"
									}
								]
							},
							"name": "allocate_memory",
							"nativeSrc": "7656:129:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "size",
									"nativeSrc": "7681:4:20",
									"nodeType": "YulTypedName",
									"src": "7681:4:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "memPtr",
									"nativeSrc": "7690:6:20",
									"nodeType": "YulTypedName",
									"src": "7690:6:20",
									"type": ""
								}
							],
							"src": "7656:129:20"
						},
						{
							"body": {
								"nativeSrc": "7857:241:20",
								"nodeType": "YulBlock",
								"src": "7857:241:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "7962:22:20",
											"nodeType": "YulBlock",
											"src": "7962:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "7964:16:20",
															"nodeType": "YulIdentifier",
															"src": "7964:16:20"
														},
														"nativeSrc": "7964:18:20",
														"nodeType": "YulFunctionCall",
														"src": "7964:18:20"
													},
													"nativeSrc": "7964:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "7964:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nativeSrc": "7934:6:20",
													"nodeType": "YulIdentifier",
													"src": "7934:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "7942:18:20",
													"nodeType": "YulLiteral",
													"src": "7942:18:20",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "7931:2:20",
												"nodeType": "YulIdentifier",
												"src": "7931:2:20"
											},
											"nativeSrc": "7931:30:20",
											"nodeType": "YulFunctionCall",
											"src": "7931:30:20"
										},
										"nativeSrc": "7928:56:20",
										"nodeType": "YulIf",
										"src": "7928:56:20"
									},
									{
										"nativeSrc": "7994:37:20",
										"nodeType": "YulAssignment",
										"src": "7994:37:20",
										"value": {
											"arguments": [
												{
													"name": "length",
													"nativeSrc": "8024:6:20",
													"nodeType": "YulIdentifier",
													"src": "8024:6:20"
												}
											],
											"functionName": {
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "8002:21:20",
												"nodeType": "YulIdentifier",
												"src": "8002:21:20"
											},
											"nativeSrc": "8002:29:20",
											"nodeType": "YulFunctionCall",
											"src": "8002:29:20"
										},
										"variableNames": [
											{
												"name": "size",
												"nativeSrc": "7994:4:20",
												"nodeType": "YulIdentifier",
												"src": "7994:4:20"
											}
										]
									},
									{
										"nativeSrc": "8068:23:20",
										"nodeType": "YulAssignment",
										"src": "8068:23:20",
										"value": {
											"arguments": [
												{
													"name": "size",
													"nativeSrc": "8080:4:20",
													"nodeType": "YulIdentifier",
													"src": "8080:4:20"
												},
												{
													"kind": "number",
													"nativeSrc": "8086:4:20",
													"nodeType": "YulLiteral",
													"src": "8086:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8076:3:20",
												"nodeType": "YulIdentifier",
												"src": "8076:3:20"
											},
											"nativeSrc": "8076:15:20",
											"nodeType": "YulFunctionCall",
											"src": "8076:15:20"
										},
										"variableNames": [
											{
												"name": "size",
												"nativeSrc": "8068:4:20",
												"nodeType": "YulIdentifier",
												"src": "8068:4:20"
											}
										]
									}
								]
							},
							"name": "array_allocation_size_t_bytes_memory_ptr",
							"nativeSrc": "7791:307:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "length",
									"nativeSrc": "7841:6:20",
									"nodeType": "YulTypedName",
									"src": "7841:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "size",
									"nativeSrc": "7852:4:20",
									"nodeType": "YulTypedName",
									"src": "7852:4:20",
									"type": ""
								}
							],
							"src": "7791:307:20"
						},
						{
							"body": {
								"nativeSrc": "8168:82:20",
								"nodeType": "YulBlock",
								"src": "8168:82:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "dst",
													"nativeSrc": "8191:3:20",
													"nodeType": "YulIdentifier",
													"src": "8191:3:20"
												},
												{
													"name": "src",
													"nativeSrc": "8196:3:20",
													"nodeType": "YulIdentifier",
													"src": "8196:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "8201:6:20",
													"nodeType": "YulIdentifier",
													"src": "8201:6:20"
												}
											],
											"functionName": {
												"name": "calldatacopy",
												"nativeSrc": "8178:12:20",
												"nodeType": "YulIdentifier",
												"src": "8178:12:20"
											},
											"nativeSrc": "8178:30:20",
											"nodeType": "YulFunctionCall",
											"src": "8178:30:20"
										},
										"nativeSrc": "8178:30:20",
										"nodeType": "YulExpressionStatement",
										"src": "8178:30:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nativeSrc": "8228:3:20",
															"nodeType": "YulIdentifier",
															"src": "8228:3:20"
														},
														{
															"name": "length",
															"nativeSrc": "8233:6:20",
															"nodeType": "YulIdentifier",
															"src": "8233:6:20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8224:3:20",
														"nodeType": "YulIdentifier",
														"src": "8224:3:20"
													},
													"nativeSrc": "8224:16:20",
													"nodeType": "YulFunctionCall",
													"src": "8224:16:20"
												},
												{
													"kind": "number",
													"nativeSrc": "8242:1:20",
													"nodeType": "YulLiteral",
													"src": "8242:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8217:6:20",
												"nodeType": "YulIdentifier",
												"src": "8217:6:20"
											},
											"nativeSrc": "8217:27:20",
											"nodeType": "YulFunctionCall",
											"src": "8217:27:20"
										},
										"nativeSrc": "8217:27:20",
										"nodeType": "YulExpressionStatement",
										"src": "8217:27:20"
									}
								]
							},
							"name": "copy_calldata_to_memory_with_cleanup",
							"nativeSrc": "8104:146:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nativeSrc": "8150:3:20",
									"nodeType": "YulTypedName",
									"src": "8150:3:20",
									"type": ""
								},
								{
									"name": "dst",
									"nativeSrc": "8155:3:20",
									"nodeType": "YulTypedName",
									"src": "8155:3:20",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "8160:6:20",
									"nodeType": "YulTypedName",
									"src": "8160:6:20",
									"type": ""
								}
							],
							"src": "8104:146:20"
						},
						{
							"body": {
								"nativeSrc": "8339:340:20",
								"nodeType": "YulBlock",
								"src": "8339:340:20",
								"statements": [
									{
										"nativeSrc": "8349:74:20",
										"nodeType": "YulAssignment",
										"src": "8349:74:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "8415:6:20",
															"nodeType": "YulIdentifier",
															"src": "8415:6:20"
														}
													],
													"functionName": {
														"name": "array_allocation_size_t_bytes_memory_ptr",
														"nativeSrc": "8374:40:20",
														"nodeType": "YulIdentifier",
														"src": "8374:40:20"
													},
													"nativeSrc": "8374:48:20",
													"nodeType": "YulFunctionCall",
													"src": "8374:48:20"
												}
											],
											"functionName": {
												"name": "allocate_memory",
												"nativeSrc": "8358:15:20",
												"nodeType": "YulIdentifier",
												"src": "8358:15:20"
											},
											"nativeSrc": "8358:65:20",
											"nodeType": "YulFunctionCall",
											"src": "8358:65:20"
										},
										"variableNames": [
											{
												"name": "array",
												"nativeSrc": "8349:5:20",
												"nodeType": "YulIdentifier",
												"src": "8349:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "array",
													"nativeSrc": "8439:5:20",
													"nodeType": "YulIdentifier",
													"src": "8439:5:20"
												},
												{
													"name": "length",
													"nativeSrc": "8446:6:20",
													"nodeType": "YulIdentifier",
													"src": "8446:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8432:6:20",
												"nodeType": "YulIdentifier",
												"src": "8432:6:20"
											},
											"nativeSrc": "8432:21:20",
											"nodeType": "YulFunctionCall",
											"src": "8432:21:20"
										},
										"nativeSrc": "8432:21:20",
										"nodeType": "YulExpressionStatement",
										"src": "8432:21:20"
									},
									{
										"nativeSrc": "8462:27:20",
										"nodeType": "YulVariableDeclaration",
										"src": "8462:27:20",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nativeSrc": "8477:5:20",
													"nodeType": "YulIdentifier",
													"src": "8477:5:20"
												},
												{
													"kind": "number",
													"nativeSrc": "8484:4:20",
													"nodeType": "YulLiteral",
													"src": "8484:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8473:3:20",
												"nodeType": "YulIdentifier",
												"src": "8473:3:20"
											},
											"nativeSrc": "8473:16:20",
											"nodeType": "YulFunctionCall",
											"src": "8473:16:20"
										},
										"variables": [
											{
												"name": "dst",
												"nativeSrc": "8466:3:20",
												"nodeType": "YulTypedName",
												"src": "8466:3:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "8527:83:20",
											"nodeType": "YulBlock",
											"src": "8527:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
															"nativeSrc": "8529:77:20",
															"nodeType": "YulIdentifier",
															"src": "8529:77:20"
														},
														"nativeSrc": "8529:79:20",
														"nodeType": "YulFunctionCall",
														"src": "8529:79:20"
													},
													"nativeSrc": "8529:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "8529:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "src",
															"nativeSrc": "8508:3:20",
															"nodeType": "YulIdentifier",
															"src": "8508:3:20"
														},
														{
															"name": "length",
															"nativeSrc": "8513:6:20",
															"nodeType": "YulIdentifier",
															"src": "8513:6:20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8504:3:20",
														"nodeType": "YulIdentifier",
														"src": "8504:3:20"
													},
													"nativeSrc": "8504:16:20",
													"nodeType": "YulFunctionCall",
													"src": "8504:16:20"
												},
												{
													"name": "end",
													"nativeSrc": "8522:3:20",
													"nodeType": "YulIdentifier",
													"src": "8522:3:20"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "8501:2:20",
												"nodeType": "YulIdentifier",
												"src": "8501:2:20"
											},
											"nativeSrc": "8501:25:20",
											"nodeType": "YulFunctionCall",
											"src": "8501:25:20"
										},
										"nativeSrc": "8498:112:20",
										"nodeType": "YulIf",
										"src": "8498:112:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "8656:3:20",
													"nodeType": "YulIdentifier",
													"src": "8656:3:20"
												},
												{
													"name": "dst",
													"nativeSrc": "8661:3:20",
													"nodeType": "YulIdentifier",
													"src": "8661:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "8666:6:20",
													"nodeType": "YulIdentifier",
													"src": "8666:6:20"
												}
											],
											"functionName": {
												"name": "copy_calldata_to_memory_with_cleanup",
												"nativeSrc": "8619:36:20",
												"nodeType": "YulIdentifier",
												"src": "8619:36:20"
											},
											"nativeSrc": "8619:54:20",
											"nodeType": "YulFunctionCall",
											"src": "8619:54:20"
										},
										"nativeSrc": "8619:54:20",
										"nodeType": "YulExpressionStatement",
										"src": "8619:54:20"
									}
								]
							},
							"name": "abi_decode_available_length_t_bytes_memory_ptr",
							"nativeSrc": "8256:423:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nativeSrc": "8312:3:20",
									"nodeType": "YulTypedName",
									"src": "8312:3:20",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "8317:6:20",
									"nodeType": "YulTypedName",
									"src": "8317:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "8325:3:20",
									"nodeType": "YulTypedName",
									"src": "8325:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nativeSrc": "8333:5:20",
									"nodeType": "YulTypedName",
									"src": "8333:5:20",
									"type": ""
								}
							],
							"src": "8256:423:20"
						},
						{
							"body": {
								"nativeSrc": "8759:277:20",
								"nodeType": "YulBlock",
								"src": "8759:277:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "8808:83:20",
											"nodeType": "YulBlock",
											"src": "8808:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
															"nativeSrc": "8810:77:20",
															"nodeType": "YulIdentifier",
															"src": "8810:77:20"
														},
														"nativeSrc": "8810:79:20",
														"nodeType": "YulFunctionCall",
														"src": "8810:79:20"
													},
													"nativeSrc": "8810:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "8810:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nativeSrc": "8787:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8787:6:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "8795:4:20",
																	"nodeType": "YulLiteral",
																	"src": "8795:4:20",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "8783:3:20",
																"nodeType": "YulIdentifier",
																"src": "8783:3:20"
															},
															"nativeSrc": "8783:17:20",
															"nodeType": "YulFunctionCall",
															"src": "8783:17:20"
														},
														{
															"name": "end",
															"nativeSrc": "8802:3:20",
															"nodeType": "YulIdentifier",
															"src": "8802:3:20"
														}
													],
													"functionName": {
														"name": "slt",
														"nativeSrc": "8779:3:20",
														"nodeType": "YulIdentifier",
														"src": "8779:3:20"
													},
													"nativeSrc": "8779:27:20",
													"nodeType": "YulFunctionCall",
													"src": "8779:27:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "8772:6:20",
												"nodeType": "YulIdentifier",
												"src": "8772:6:20"
											},
											"nativeSrc": "8772:35:20",
											"nodeType": "YulFunctionCall",
											"src": "8772:35:20"
										},
										"nativeSrc": "8769:122:20",
										"nodeType": "YulIf",
										"src": "8769:122:20"
									},
									{
										"nativeSrc": "8900:34:20",
										"nodeType": "YulVariableDeclaration",
										"src": "8900:34:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "8927:6:20",
													"nodeType": "YulIdentifier",
													"src": "8927:6:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "8914:12:20",
												"nodeType": "YulIdentifier",
												"src": "8914:12:20"
											},
											"nativeSrc": "8914:20:20",
											"nodeType": "YulFunctionCall",
											"src": "8914:20:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "8904:6:20",
												"nodeType": "YulTypedName",
												"src": "8904:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "8943:87:20",
										"nodeType": "YulAssignment",
										"src": "8943:87:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "offset",
															"nativeSrc": "9003:6:20",
															"nodeType": "YulIdentifier",
															"src": "9003:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "9011:4:20",
															"nodeType": "YulLiteral",
															"src": "9011:4:20",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8999:3:20",
														"nodeType": "YulIdentifier",
														"src": "8999:3:20"
													},
													"nativeSrc": "8999:17:20",
													"nodeType": "YulFunctionCall",
													"src": "8999:17:20"
												},
												{
													"name": "length",
													"nativeSrc": "9018:6:20",
													"nodeType": "YulIdentifier",
													"src": "9018:6:20"
												},
												{
													"name": "end",
													"nativeSrc": "9026:3:20",
													"nodeType": "YulIdentifier",
													"src": "9026:3:20"
												}
											],
											"functionName": {
												"name": "abi_decode_available_length_t_bytes_memory_ptr",
												"nativeSrc": "8952:46:20",
												"nodeType": "YulIdentifier",
												"src": "8952:46:20"
											},
											"nativeSrc": "8952:78:20",
											"nodeType": "YulFunctionCall",
											"src": "8952:78:20"
										},
										"variableNames": [
											{
												"name": "array",
												"nativeSrc": "8943:5:20",
												"nodeType": "YulIdentifier",
												"src": "8943:5:20"
											}
										]
									}
								]
							},
							"name": "abi_decode_t_bytes_memory_ptr",
							"nativeSrc": "8698:338:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "8737:6:20",
									"nodeType": "YulTypedName",
									"src": "8737:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "8745:3:20",
									"nodeType": "YulTypedName",
									"src": "8745:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nativeSrc": "8753:5:20",
									"nodeType": "YulTypedName",
									"src": "8753:5:20",
									"type": ""
								}
							],
							"src": "8698:338:20"
						},
						{
							"body": {
								"nativeSrc": "9168:817:20",
								"nodeType": "YulBlock",
								"src": "9168:817:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "9215:83:20",
											"nodeType": "YulBlock",
											"src": "9215:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "9217:77:20",
															"nodeType": "YulIdentifier",
															"src": "9217:77:20"
														},
														"nativeSrc": "9217:79:20",
														"nodeType": "YulFunctionCall",
														"src": "9217:79:20"
													},
													"nativeSrc": "9217:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "9217:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "9189:7:20",
															"nodeType": "YulIdentifier",
															"src": "9189:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "9198:9:20",
															"nodeType": "YulIdentifier",
															"src": "9198:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "9185:3:20",
														"nodeType": "YulIdentifier",
														"src": "9185:3:20"
													},
													"nativeSrc": "9185:23:20",
													"nodeType": "YulFunctionCall",
													"src": "9185:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "9210:3:20",
													"nodeType": "YulLiteral",
													"src": "9210:3:20",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "9181:3:20",
												"nodeType": "YulIdentifier",
												"src": "9181:3:20"
											},
											"nativeSrc": "9181:33:20",
											"nodeType": "YulFunctionCall",
											"src": "9181:33:20"
										},
										"nativeSrc": "9178:120:20",
										"nodeType": "YulIf",
										"src": "9178:120:20"
									},
									{
										"nativeSrc": "9308:117:20",
										"nodeType": "YulBlock",
										"src": "9308:117:20",
										"statements": [
											{
												"nativeSrc": "9323:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "9323:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "9337:1:20",
													"nodeType": "YulLiteral",
													"src": "9337:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "9327:6:20",
														"nodeType": "YulTypedName",
														"src": "9327:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "9352:63:20",
												"nodeType": "YulAssignment",
												"src": "9352:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "9387:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "9387:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "9398:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9398:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "9383:3:20",
																"nodeType": "YulIdentifier",
																"src": "9383:3:20"
															},
															"nativeSrc": "9383:22:20",
															"nodeType": "YulFunctionCall",
															"src": "9383:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "9407:7:20",
															"nodeType": "YulIdentifier",
															"src": "9407:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "9362:20:20",
														"nodeType": "YulIdentifier",
														"src": "9362:20:20"
													},
													"nativeSrc": "9362:53:20",
													"nodeType": "YulFunctionCall",
													"src": "9362:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "9352:6:20",
														"nodeType": "YulIdentifier",
														"src": "9352:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "9435:118:20",
										"nodeType": "YulBlock",
										"src": "9435:118:20",
										"statements": [
											{
												"nativeSrc": "9450:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "9450:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "9464:2:20",
													"nodeType": "YulLiteral",
													"src": "9464:2:20",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "9454:6:20",
														"nodeType": "YulTypedName",
														"src": "9454:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "9480:63:20",
												"nodeType": "YulAssignment",
												"src": "9480:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "9515:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "9515:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "9526:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9526:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "9511:3:20",
																"nodeType": "YulIdentifier",
																"src": "9511:3:20"
															},
															"nativeSrc": "9511:22:20",
															"nodeType": "YulFunctionCall",
															"src": "9511:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "9535:7:20",
															"nodeType": "YulIdentifier",
															"src": "9535:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "9490:20:20",
														"nodeType": "YulIdentifier",
														"src": "9490:20:20"
													},
													"nativeSrc": "9490:53:20",
													"nodeType": "YulFunctionCall",
													"src": "9490:53:20"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "9480:6:20",
														"nodeType": "YulIdentifier",
														"src": "9480:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "9563:118:20",
										"nodeType": "YulBlock",
										"src": "9563:118:20",
										"statements": [
											{
												"nativeSrc": "9578:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "9578:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "9592:2:20",
													"nodeType": "YulLiteral",
													"src": "9592:2:20",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "9582:6:20",
														"nodeType": "YulTypedName",
														"src": "9582:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "9608:63:20",
												"nodeType": "YulAssignment",
												"src": "9608:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "9643:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "9643:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "9654:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9654:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "9639:3:20",
																"nodeType": "YulIdentifier",
																"src": "9639:3:20"
															},
															"nativeSrc": "9639:22:20",
															"nodeType": "YulFunctionCall",
															"src": "9639:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "9663:7:20",
															"nodeType": "YulIdentifier",
															"src": "9663:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "9618:20:20",
														"nodeType": "YulIdentifier",
														"src": "9618:20:20"
													},
													"nativeSrc": "9618:53:20",
													"nodeType": "YulFunctionCall",
													"src": "9618:53:20"
												},
												"variableNames": [
													{
														"name": "value2",
														"nativeSrc": "9608:6:20",
														"nodeType": "YulIdentifier",
														"src": "9608:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "9691:287:20",
										"nodeType": "YulBlock",
										"src": "9691:287:20",
										"statements": [
											{
												"nativeSrc": "9706:46:20",
												"nodeType": "YulVariableDeclaration",
												"src": "9706:46:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "9737:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "9737:9:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9748:2:20",
																	"nodeType": "YulLiteral",
																	"src": "9748:2:20",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "9733:3:20",
																"nodeType": "YulIdentifier",
																"src": "9733:3:20"
															},
															"nativeSrc": "9733:18:20",
															"nodeType": "YulFunctionCall",
															"src": "9733:18:20"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nativeSrc": "9720:12:20",
														"nodeType": "YulIdentifier",
														"src": "9720:12:20"
													},
													"nativeSrc": "9720:32:20",
													"nodeType": "YulFunctionCall",
													"src": "9720:32:20"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "9710:6:20",
														"nodeType": "YulTypedName",
														"src": "9710:6:20",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nativeSrc": "9799:83:20",
													"nodeType": "YulBlock",
													"src": "9799:83:20",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nativeSrc": "9801:77:20",
																	"nodeType": "YulIdentifier",
																	"src": "9801:77:20"
																},
																"nativeSrc": "9801:79:20",
																"nodeType": "YulFunctionCall",
																"src": "9801:79:20"
															},
															"nativeSrc": "9801:79:20",
															"nodeType": "YulExpressionStatement",
															"src": "9801:79:20"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nativeSrc": "9771:6:20",
															"nodeType": "YulIdentifier",
															"src": "9771:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "9779:18:20",
															"nodeType": "YulLiteral",
															"src": "9779:18:20",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nativeSrc": "9768:2:20",
														"nodeType": "YulIdentifier",
														"src": "9768:2:20"
													},
													"nativeSrc": "9768:30:20",
													"nodeType": "YulFunctionCall",
													"src": "9768:30:20"
												},
												"nativeSrc": "9765:117:20",
												"nodeType": "YulIf",
												"src": "9765:117:20"
											},
											{
												"nativeSrc": "9896:72:20",
												"nodeType": "YulAssignment",
												"src": "9896:72:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "9940:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "9940:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "9951:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9951:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "9936:3:20",
																"nodeType": "YulIdentifier",
																"src": "9936:3:20"
															},
															"nativeSrc": "9936:22:20",
															"nodeType": "YulFunctionCall",
															"src": "9936:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "9960:7:20",
															"nodeType": "YulIdentifier",
															"src": "9960:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_bytes_memory_ptr",
														"nativeSrc": "9906:29:20",
														"nodeType": "YulIdentifier",
														"src": "9906:29:20"
													},
													"nativeSrc": "9906:62:20",
													"nodeType": "YulFunctionCall",
													"src": "9906:62:20"
												},
												"variableNames": [
													{
														"name": "value3",
														"nativeSrc": "9896:6:20",
														"nodeType": "YulIdentifier",
														"src": "9896:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
							"nativeSrc": "9042:943:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "9114:9:20",
									"nodeType": "YulTypedName",
									"src": "9114:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "9125:7:20",
									"nodeType": "YulTypedName",
									"src": "9125:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "9137:6:20",
									"nodeType": "YulTypedName",
									"src": "9137:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "9145:6:20",
									"nodeType": "YulTypedName",
									"src": "9145:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "9153:6:20",
									"nodeType": "YulTypedName",
									"src": "9153:6:20",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "9161:6:20",
									"nodeType": "YulTypedName",
									"src": "9161:6:20",
									"type": ""
								}
							],
							"src": "9042:943:20"
						},
						{
							"body": {
								"nativeSrc": "10074:391:20",
								"nodeType": "YulBlock",
								"src": "10074:391:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "10120:83:20",
											"nodeType": "YulBlock",
											"src": "10120:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "10122:77:20",
															"nodeType": "YulIdentifier",
															"src": "10122:77:20"
														},
														"nativeSrc": "10122:79:20",
														"nodeType": "YulFunctionCall",
														"src": "10122:79:20"
													},
													"nativeSrc": "10122:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "10122:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "10095:7:20",
															"nodeType": "YulIdentifier",
															"src": "10095:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "10104:9:20",
															"nodeType": "YulIdentifier",
															"src": "10104:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "10091:3:20",
														"nodeType": "YulIdentifier",
														"src": "10091:3:20"
													},
													"nativeSrc": "10091:23:20",
													"nodeType": "YulFunctionCall",
													"src": "10091:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "10116:2:20",
													"nodeType": "YulLiteral",
													"src": "10116:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "10087:3:20",
												"nodeType": "YulIdentifier",
												"src": "10087:3:20"
											},
											"nativeSrc": "10087:32:20",
											"nodeType": "YulFunctionCall",
											"src": "10087:32:20"
										},
										"nativeSrc": "10084:119:20",
										"nodeType": "YulIf",
										"src": "10084:119:20"
									},
									{
										"nativeSrc": "10213:117:20",
										"nodeType": "YulBlock",
										"src": "10213:117:20",
										"statements": [
											{
												"nativeSrc": "10228:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "10228:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "10242:1:20",
													"nodeType": "YulLiteral",
													"src": "10242:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "10232:6:20",
														"nodeType": "YulTypedName",
														"src": "10232:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "10257:63:20",
												"nodeType": "YulAssignment",
												"src": "10257:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "10292:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "10292:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "10303:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "10303:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "10288:3:20",
																"nodeType": "YulIdentifier",
																"src": "10288:3:20"
															},
															"nativeSrc": "10288:22:20",
															"nodeType": "YulFunctionCall",
															"src": "10288:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "10312:7:20",
															"nodeType": "YulIdentifier",
															"src": "10312:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "10267:20:20",
														"nodeType": "YulIdentifier",
														"src": "10267:20:20"
													},
													"nativeSrc": "10267:53:20",
													"nodeType": "YulFunctionCall",
													"src": "10267:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "10257:6:20",
														"nodeType": "YulIdentifier",
														"src": "10257:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "10340:118:20",
										"nodeType": "YulBlock",
										"src": "10340:118:20",
										"statements": [
											{
												"nativeSrc": "10355:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "10355:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "10369:2:20",
													"nodeType": "YulLiteral",
													"src": "10369:2:20",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "10359:6:20",
														"nodeType": "YulTypedName",
														"src": "10359:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "10385:63:20",
												"nodeType": "YulAssignment",
												"src": "10385:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "10420:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "10420:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "10431:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "10431:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "10416:3:20",
																"nodeType": "YulIdentifier",
																"src": "10416:3:20"
															},
															"nativeSrc": "10416:22:20",
															"nodeType": "YulFunctionCall",
															"src": "10416:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "10440:7:20",
															"nodeType": "YulIdentifier",
															"src": "10440:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "10395:20:20",
														"nodeType": "YulIdentifier",
														"src": "10395:20:20"
													},
													"nativeSrc": "10395:53:20",
													"nodeType": "YulFunctionCall",
													"src": "10395:53:20"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "10385:6:20",
														"nodeType": "YulIdentifier",
														"src": "10385:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_address",
							"nativeSrc": "9991:474:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "10036:9:20",
									"nodeType": "YulTypedName",
									"src": "10036:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "10047:7:20",
									"nodeType": "YulTypedName",
									"src": "10047:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "10059:6:20",
									"nodeType": "YulTypedName",
									"src": "10059:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "10067:6:20",
									"nodeType": "YulTypedName",
									"src": "10067:6:20",
									"type": ""
								}
							],
							"src": "9991:474:20"
						},
						{
							"body": {
								"nativeSrc": "10538:241:20",
								"nodeType": "YulBlock",
								"src": "10538:241:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "10643:22:20",
											"nodeType": "YulBlock",
											"src": "10643:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "10645:16:20",
															"nodeType": "YulIdentifier",
															"src": "10645:16:20"
														},
														"nativeSrc": "10645:18:20",
														"nodeType": "YulFunctionCall",
														"src": "10645:18:20"
													},
													"nativeSrc": "10645:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "10645:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "length",
													"nativeSrc": "10615:6:20",
													"nodeType": "YulIdentifier",
													"src": "10615:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "10623:18:20",
													"nodeType": "YulLiteral",
													"src": "10623:18:20",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "10612:2:20",
												"nodeType": "YulIdentifier",
												"src": "10612:2:20"
											},
											"nativeSrc": "10612:30:20",
											"nodeType": "YulFunctionCall",
											"src": "10612:30:20"
										},
										"nativeSrc": "10609:56:20",
										"nodeType": "YulIf",
										"src": "10609:56:20"
									},
									{
										"nativeSrc": "10675:37:20",
										"nodeType": "YulAssignment",
										"src": "10675:37:20",
										"value": {
											"arguments": [
												{
													"name": "length",
													"nativeSrc": "10705:6:20",
													"nodeType": "YulIdentifier",
													"src": "10705:6:20"
												}
											],
											"functionName": {
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "10683:21:20",
												"nodeType": "YulIdentifier",
												"src": "10683:21:20"
											},
											"nativeSrc": "10683:29:20",
											"nodeType": "YulFunctionCall",
											"src": "10683:29:20"
										},
										"variableNames": [
											{
												"name": "size",
												"nativeSrc": "10675:4:20",
												"nodeType": "YulIdentifier",
												"src": "10675:4:20"
											}
										]
									},
									{
										"nativeSrc": "10749:23:20",
										"nodeType": "YulAssignment",
										"src": "10749:23:20",
										"value": {
											"arguments": [
												{
													"name": "size",
													"nativeSrc": "10761:4:20",
													"nodeType": "YulIdentifier",
													"src": "10761:4:20"
												},
												{
													"kind": "number",
													"nativeSrc": "10767:4:20",
													"nodeType": "YulLiteral",
													"src": "10767:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10757:3:20",
												"nodeType": "YulIdentifier",
												"src": "10757:3:20"
											},
											"nativeSrc": "10757:15:20",
											"nodeType": "YulFunctionCall",
											"src": "10757:15:20"
										},
										"variableNames": [
											{
												"name": "size",
												"nativeSrc": "10749:4:20",
												"nodeType": "YulIdentifier",
												"src": "10749:4:20"
											}
										]
									}
								]
							},
							"name": "array_allocation_size_t_string_memory_ptr",
							"nativeSrc": "10471:308:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "length",
									"nativeSrc": "10522:6:20",
									"nodeType": "YulTypedName",
									"src": "10522:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "size",
									"nativeSrc": "10533:4:20",
									"nodeType": "YulTypedName",
									"src": "10533:4:20",
									"type": ""
								}
							],
							"src": "10471:308:20"
						},
						{
							"body": {
								"nativeSrc": "10869:341:20",
								"nodeType": "YulBlock",
								"src": "10869:341:20",
								"statements": [
									{
										"nativeSrc": "10879:75:20",
										"nodeType": "YulAssignment",
										"src": "10879:75:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "10946:6:20",
															"nodeType": "YulIdentifier",
															"src": "10946:6:20"
														}
													],
													"functionName": {
														"name": "array_allocation_size_t_string_memory_ptr",
														"nativeSrc": "10904:41:20",
														"nodeType": "YulIdentifier",
														"src": "10904:41:20"
													},
													"nativeSrc": "10904:49:20",
													"nodeType": "YulFunctionCall",
													"src": "10904:49:20"
												}
											],
											"functionName": {
												"name": "allocate_memory",
												"nativeSrc": "10888:15:20",
												"nodeType": "YulIdentifier",
												"src": "10888:15:20"
											},
											"nativeSrc": "10888:66:20",
											"nodeType": "YulFunctionCall",
											"src": "10888:66:20"
										},
										"variableNames": [
											{
												"name": "array",
												"nativeSrc": "10879:5:20",
												"nodeType": "YulIdentifier",
												"src": "10879:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "array",
													"nativeSrc": "10970:5:20",
													"nodeType": "YulIdentifier",
													"src": "10970:5:20"
												},
												{
													"name": "length",
													"nativeSrc": "10977:6:20",
													"nodeType": "YulIdentifier",
													"src": "10977:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10963:6:20",
												"nodeType": "YulIdentifier",
												"src": "10963:6:20"
											},
											"nativeSrc": "10963:21:20",
											"nodeType": "YulFunctionCall",
											"src": "10963:21:20"
										},
										"nativeSrc": "10963:21:20",
										"nodeType": "YulExpressionStatement",
										"src": "10963:21:20"
									},
									{
										"nativeSrc": "10993:27:20",
										"nodeType": "YulVariableDeclaration",
										"src": "10993:27:20",
										"value": {
											"arguments": [
												{
													"name": "array",
													"nativeSrc": "11008:5:20",
													"nodeType": "YulIdentifier",
													"src": "11008:5:20"
												},
												{
													"kind": "number",
													"nativeSrc": "11015:4:20",
													"nodeType": "YulLiteral",
													"src": "11015:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "11004:3:20",
												"nodeType": "YulIdentifier",
												"src": "11004:3:20"
											},
											"nativeSrc": "11004:16:20",
											"nodeType": "YulFunctionCall",
											"src": "11004:16:20"
										},
										"variables": [
											{
												"name": "dst",
												"nativeSrc": "10997:3:20",
												"nodeType": "YulTypedName",
												"src": "10997:3:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "11058:83:20",
											"nodeType": "YulBlock",
											"src": "11058:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
															"nativeSrc": "11060:77:20",
															"nodeType": "YulIdentifier",
															"src": "11060:77:20"
														},
														"nativeSrc": "11060:79:20",
														"nodeType": "YulFunctionCall",
														"src": "11060:79:20"
													},
													"nativeSrc": "11060:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "11060:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "src",
															"nativeSrc": "11039:3:20",
															"nodeType": "YulIdentifier",
															"src": "11039:3:20"
														},
														{
															"name": "length",
															"nativeSrc": "11044:6:20",
															"nodeType": "YulIdentifier",
															"src": "11044:6:20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11035:3:20",
														"nodeType": "YulIdentifier",
														"src": "11035:3:20"
													},
													"nativeSrc": "11035:16:20",
													"nodeType": "YulFunctionCall",
													"src": "11035:16:20"
												},
												{
													"name": "end",
													"nativeSrc": "11053:3:20",
													"nodeType": "YulIdentifier",
													"src": "11053:3:20"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "11032:2:20",
												"nodeType": "YulIdentifier",
												"src": "11032:2:20"
											},
											"nativeSrc": "11032:25:20",
											"nodeType": "YulFunctionCall",
											"src": "11032:25:20"
										},
										"nativeSrc": "11029:112:20",
										"nodeType": "YulIf",
										"src": "11029:112:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "11187:3:20",
													"nodeType": "YulIdentifier",
													"src": "11187:3:20"
												},
												{
													"name": "dst",
													"nativeSrc": "11192:3:20",
													"nodeType": "YulIdentifier",
													"src": "11192:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "11197:6:20",
													"nodeType": "YulIdentifier",
													"src": "11197:6:20"
												}
											],
											"functionName": {
												"name": "copy_calldata_to_memory_with_cleanup",
												"nativeSrc": "11150:36:20",
												"nodeType": "YulIdentifier",
												"src": "11150:36:20"
											},
											"nativeSrc": "11150:54:20",
											"nodeType": "YulFunctionCall",
											"src": "11150:54:20"
										},
										"nativeSrc": "11150:54:20",
										"nodeType": "YulExpressionStatement",
										"src": "11150:54:20"
									}
								]
							},
							"name": "abi_decode_available_length_t_string_memory_ptr",
							"nativeSrc": "10785:425:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nativeSrc": "10842:3:20",
									"nodeType": "YulTypedName",
									"src": "10842:3:20",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "10847:6:20",
									"nodeType": "YulTypedName",
									"src": "10847:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "10855:3:20",
									"nodeType": "YulTypedName",
									"src": "10855:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nativeSrc": "10863:5:20",
									"nodeType": "YulTypedName",
									"src": "10863:5:20",
									"type": ""
								}
							],
							"src": "10785:425:20"
						},
						{
							"body": {
								"nativeSrc": "11292:278:20",
								"nodeType": "YulBlock",
								"src": "11292:278:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "11341:83:20",
											"nodeType": "YulBlock",
											"src": "11341:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
															"nativeSrc": "11343:77:20",
															"nodeType": "YulIdentifier",
															"src": "11343:77:20"
														},
														"nativeSrc": "11343:79:20",
														"nodeType": "YulFunctionCall",
														"src": "11343:79:20"
													},
													"nativeSrc": "11343:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "11343:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nativeSrc": "11320:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "11320:6:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "11328:4:20",
																	"nodeType": "YulLiteral",
																	"src": "11328:4:20",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "11316:3:20",
																"nodeType": "YulIdentifier",
																"src": "11316:3:20"
															},
															"nativeSrc": "11316:17:20",
															"nodeType": "YulFunctionCall",
															"src": "11316:17:20"
														},
														{
															"name": "end",
															"nativeSrc": "11335:3:20",
															"nodeType": "YulIdentifier",
															"src": "11335:3:20"
														}
													],
													"functionName": {
														"name": "slt",
														"nativeSrc": "11312:3:20",
														"nodeType": "YulIdentifier",
														"src": "11312:3:20"
													},
													"nativeSrc": "11312:27:20",
													"nodeType": "YulFunctionCall",
													"src": "11312:27:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "11305:6:20",
												"nodeType": "YulIdentifier",
												"src": "11305:6:20"
											},
											"nativeSrc": "11305:35:20",
											"nodeType": "YulFunctionCall",
											"src": "11305:35:20"
										},
										"nativeSrc": "11302:122:20",
										"nodeType": "YulIf",
										"src": "11302:122:20"
									},
									{
										"nativeSrc": "11433:34:20",
										"nodeType": "YulVariableDeclaration",
										"src": "11433:34:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "11460:6:20",
													"nodeType": "YulIdentifier",
													"src": "11460:6:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "11447:12:20",
												"nodeType": "YulIdentifier",
												"src": "11447:12:20"
											},
											"nativeSrc": "11447:20:20",
											"nodeType": "YulFunctionCall",
											"src": "11447:20:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "11437:6:20",
												"nodeType": "YulTypedName",
												"src": "11437:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "11476:88:20",
										"nodeType": "YulAssignment",
										"src": "11476:88:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "offset",
															"nativeSrc": "11537:6:20",
															"nodeType": "YulIdentifier",
															"src": "11537:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "11545:4:20",
															"nodeType": "YulLiteral",
															"src": "11545:4:20",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11533:3:20",
														"nodeType": "YulIdentifier",
														"src": "11533:3:20"
													},
													"nativeSrc": "11533:17:20",
													"nodeType": "YulFunctionCall",
													"src": "11533:17:20"
												},
												{
													"name": "length",
													"nativeSrc": "11552:6:20",
													"nodeType": "YulIdentifier",
													"src": "11552:6:20"
												},
												{
													"name": "end",
													"nativeSrc": "11560:3:20",
													"nodeType": "YulIdentifier",
													"src": "11560:3:20"
												}
											],
											"functionName": {
												"name": "abi_decode_available_length_t_string_memory_ptr",
												"nativeSrc": "11485:47:20",
												"nodeType": "YulIdentifier",
												"src": "11485:47:20"
											},
											"nativeSrc": "11485:79:20",
											"nodeType": "YulFunctionCall",
											"src": "11485:79:20"
										},
										"variableNames": [
											{
												"name": "array",
												"nativeSrc": "11476:5:20",
												"nodeType": "YulIdentifier",
												"src": "11476:5:20"
											}
										]
									}
								]
							},
							"name": "abi_decode_t_string_memory_ptr",
							"nativeSrc": "11230:340:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "11270:6:20",
									"nodeType": "YulTypedName",
									"src": "11270:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "11278:3:20",
									"nodeType": "YulTypedName",
									"src": "11278:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "array",
									"nativeSrc": "11286:5:20",
									"nodeType": "YulTypedName",
									"src": "11286:5:20",
									"type": ""
								}
							],
							"src": "11230:340:20"
						},
						{
							"body": {
								"nativeSrc": "11669:561:20",
								"nodeType": "YulBlock",
								"src": "11669:561:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "11715:83:20",
											"nodeType": "YulBlock",
											"src": "11715:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "11717:77:20",
															"nodeType": "YulIdentifier",
															"src": "11717:77:20"
														},
														"nativeSrc": "11717:79:20",
														"nodeType": "YulFunctionCall",
														"src": "11717:79:20"
													},
													"nativeSrc": "11717:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "11717:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "11690:7:20",
															"nodeType": "YulIdentifier",
															"src": "11690:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "11699:9:20",
															"nodeType": "YulIdentifier",
															"src": "11699:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "11686:3:20",
														"nodeType": "YulIdentifier",
														"src": "11686:3:20"
													},
													"nativeSrc": "11686:23:20",
													"nodeType": "YulFunctionCall",
													"src": "11686:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "11711:2:20",
													"nodeType": "YulLiteral",
													"src": "11711:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "11682:3:20",
												"nodeType": "YulIdentifier",
												"src": "11682:3:20"
											},
											"nativeSrc": "11682:32:20",
											"nodeType": "YulFunctionCall",
											"src": "11682:32:20"
										},
										"nativeSrc": "11679:119:20",
										"nodeType": "YulIf",
										"src": "11679:119:20"
									},
									{
										"nativeSrc": "11808:117:20",
										"nodeType": "YulBlock",
										"src": "11808:117:20",
										"statements": [
											{
												"nativeSrc": "11823:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "11823:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "11837:1:20",
													"nodeType": "YulLiteral",
													"src": "11837:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "11827:6:20",
														"nodeType": "YulTypedName",
														"src": "11827:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "11852:63:20",
												"nodeType": "YulAssignment",
												"src": "11852:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "11887:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "11887:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "11898:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "11898:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "11883:3:20",
																"nodeType": "YulIdentifier",
																"src": "11883:3:20"
															},
															"nativeSrc": "11883:22:20",
															"nodeType": "YulFunctionCall",
															"src": "11883:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "11907:7:20",
															"nodeType": "YulIdentifier",
															"src": "11907:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "11862:20:20",
														"nodeType": "YulIdentifier",
														"src": "11862:20:20"
													},
													"nativeSrc": "11862:53:20",
													"nodeType": "YulFunctionCall",
													"src": "11862:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "11852:6:20",
														"nodeType": "YulIdentifier",
														"src": "11852:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "11935:288:20",
										"nodeType": "YulBlock",
										"src": "11935:288:20",
										"statements": [
											{
												"nativeSrc": "11950:46:20",
												"nodeType": "YulVariableDeclaration",
												"src": "11950:46:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "11981:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "11981:9:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "11992:2:20",
																	"nodeType": "YulLiteral",
																	"src": "11992:2:20",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "11977:3:20",
																"nodeType": "YulIdentifier",
																"src": "11977:3:20"
															},
															"nativeSrc": "11977:18:20",
															"nodeType": "YulFunctionCall",
															"src": "11977:18:20"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nativeSrc": "11964:12:20",
														"nodeType": "YulIdentifier",
														"src": "11964:12:20"
													},
													"nativeSrc": "11964:32:20",
													"nodeType": "YulFunctionCall",
													"src": "11964:32:20"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "11954:6:20",
														"nodeType": "YulTypedName",
														"src": "11954:6:20",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nativeSrc": "12043:83:20",
													"nodeType": "YulBlock",
													"src": "12043:83:20",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																	"nativeSrc": "12045:77:20",
																	"nodeType": "YulIdentifier",
																	"src": "12045:77:20"
																},
																"nativeSrc": "12045:79:20",
																"nodeType": "YulFunctionCall",
																"src": "12045:79:20"
															},
															"nativeSrc": "12045:79:20",
															"nodeType": "YulExpressionStatement",
															"src": "12045:79:20"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nativeSrc": "12015:6:20",
															"nodeType": "YulIdentifier",
															"src": "12015:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "12023:18:20",
															"nodeType": "YulLiteral",
															"src": "12023:18:20",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nativeSrc": "12012:2:20",
														"nodeType": "YulIdentifier",
														"src": "12012:2:20"
													},
													"nativeSrc": "12012:30:20",
													"nodeType": "YulFunctionCall",
													"src": "12012:30:20"
												},
												"nativeSrc": "12009:117:20",
												"nodeType": "YulIf",
												"src": "12009:117:20"
											},
											{
												"nativeSrc": "12140:73:20",
												"nodeType": "YulAssignment",
												"src": "12140:73:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "12185:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "12185:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "12196:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "12196:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "12181:3:20",
																"nodeType": "YulIdentifier",
																"src": "12181:3:20"
															},
															"nativeSrc": "12181:22:20",
															"nodeType": "YulFunctionCall",
															"src": "12181:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "12205:7:20",
															"nodeType": "YulIdentifier",
															"src": "12205:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_memory_ptr",
														"nativeSrc": "12150:30:20",
														"nodeType": "YulIdentifier",
														"src": "12150:30:20"
													},
													"nativeSrc": "12150:63:20",
													"nodeType": "YulFunctionCall",
													"src": "12150:63:20"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "12140:6:20",
														"nodeType": "YulIdentifier",
														"src": "12140:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_string_memory_ptr",
							"nativeSrc": "11576:654:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "11631:9:20",
									"nodeType": "YulTypedName",
									"src": "11631:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "11642:7:20",
									"nodeType": "YulTypedName",
									"src": "11642:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "11654:6:20",
									"nodeType": "YulTypedName",
									"src": "11654:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "11662:6:20",
									"nodeType": "YulTypedName",
									"src": "11662:6:20",
									"type": ""
								}
							],
							"src": "11576:654:20"
						},
						{
							"body": {
								"nativeSrc": "12264:152:20",
								"nodeType": "YulBlock",
								"src": "12264:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "12281:1:20",
													"nodeType": "YulLiteral",
													"src": "12281:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "12284:77:20",
													"nodeType": "YulLiteral",
													"src": "12284:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12274:6:20",
												"nodeType": "YulIdentifier",
												"src": "12274:6:20"
											},
											"nativeSrc": "12274:88:20",
											"nodeType": "YulFunctionCall",
											"src": "12274:88:20"
										},
										"nativeSrc": "12274:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "12274:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "12378:1:20",
													"nodeType": "YulLiteral",
													"src": "12378:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "12381:4:20",
													"nodeType": "YulLiteral",
													"src": "12381:4:20",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12371:6:20",
												"nodeType": "YulIdentifier",
												"src": "12371:6:20"
											},
											"nativeSrc": "12371:15:20",
											"nodeType": "YulFunctionCall",
											"src": "12371:15:20"
										},
										"nativeSrc": "12371:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "12371:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "12402:1:20",
													"nodeType": "YulLiteral",
													"src": "12402:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "12405:4:20",
													"nodeType": "YulLiteral",
													"src": "12405:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "12395:6:20",
												"nodeType": "YulIdentifier",
												"src": "12395:6:20"
											},
											"nativeSrc": "12395:15:20",
											"nodeType": "YulFunctionCall",
											"src": "12395:15:20"
										},
										"nativeSrc": "12395:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "12395:15:20"
									}
								]
							},
							"name": "panic_error_0x22",
							"nativeSrc": "12236:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "12236:180:20"
						},
						{
							"body": {
								"nativeSrc": "12473:269:20",
								"nodeType": "YulBlock",
								"src": "12473:269:20",
								"statements": [
									{
										"nativeSrc": "12483:22:20",
										"nodeType": "YulAssignment",
										"src": "12483:22:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "12497:4:20",
													"nodeType": "YulIdentifier",
													"src": "12497:4:20"
												},
												{
													"kind": "number",
													"nativeSrc": "12503:1:20",
													"nodeType": "YulLiteral",
													"src": "12503:1:20",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "12493:3:20",
												"nodeType": "YulIdentifier",
												"src": "12493:3:20"
											},
											"nativeSrc": "12493:12:20",
											"nodeType": "YulFunctionCall",
											"src": "12493:12:20"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "12483:6:20",
												"nodeType": "YulIdentifier",
												"src": "12483:6:20"
											}
										]
									},
									{
										"nativeSrc": "12514:38:20",
										"nodeType": "YulVariableDeclaration",
										"src": "12514:38:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "12544:4:20",
													"nodeType": "YulIdentifier",
													"src": "12544:4:20"
												},
												{
													"kind": "number",
													"nativeSrc": "12550:1:20",
													"nodeType": "YulLiteral",
													"src": "12550:1:20",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "12540:3:20",
												"nodeType": "YulIdentifier",
												"src": "12540:3:20"
											},
											"nativeSrc": "12540:12:20",
											"nodeType": "YulFunctionCall",
											"src": "12540:12:20"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "12518:18:20",
												"nodeType": "YulTypedName",
												"src": "12518:18:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "12591:51:20",
											"nodeType": "YulBlock",
											"src": "12591:51:20",
											"statements": [
												{
													"nativeSrc": "12605:27:20",
													"nodeType": "YulAssignment",
													"src": "12605:27:20",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "12619:6:20",
																"nodeType": "YulIdentifier",
																"src": "12619:6:20"
															},
															{
																"kind": "number",
																"nativeSrc": "12627:4:20",
																"nodeType": "YulLiteral",
																"src": "12627:4:20",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "12615:3:20",
															"nodeType": "YulIdentifier",
															"src": "12615:3:20"
														},
														"nativeSrc": "12615:17:20",
														"nodeType": "YulFunctionCall",
														"src": "12615:17:20"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "12605:6:20",
															"nodeType": "YulIdentifier",
															"src": "12605:6:20"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "12571:18:20",
													"nodeType": "YulIdentifier",
													"src": "12571:18:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "12564:6:20",
												"nodeType": "YulIdentifier",
												"src": "12564:6:20"
											},
											"nativeSrc": "12564:26:20",
											"nodeType": "YulFunctionCall",
											"src": "12564:26:20"
										},
										"nativeSrc": "12561:81:20",
										"nodeType": "YulIf",
										"src": "12561:81:20"
									},
									{
										"body": {
											"nativeSrc": "12694:42:20",
											"nodeType": "YulBlock",
											"src": "12694:42:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nativeSrc": "12708:16:20",
															"nodeType": "YulIdentifier",
															"src": "12708:16:20"
														},
														"nativeSrc": "12708:18:20",
														"nodeType": "YulFunctionCall",
														"src": "12708:18:20"
													},
													"nativeSrc": "12708:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "12708:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "12658:18:20",
													"nodeType": "YulIdentifier",
													"src": "12658:18:20"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "12681:6:20",
															"nodeType": "YulIdentifier",
															"src": "12681:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "12689:2:20",
															"nodeType": "YulLiteral",
															"src": "12689:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "12678:2:20",
														"nodeType": "YulIdentifier",
														"src": "12678:2:20"
													},
													"nativeSrc": "12678:14:20",
													"nodeType": "YulFunctionCall",
													"src": "12678:14:20"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "12655:2:20",
												"nodeType": "YulIdentifier",
												"src": "12655:2:20"
											},
											"nativeSrc": "12655:38:20",
											"nodeType": "YulFunctionCall",
											"src": "12655:38:20"
										},
										"nativeSrc": "12652:84:20",
										"nodeType": "YulIf",
										"src": "12652:84:20"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "12422:320:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "12457:4:20",
									"nodeType": "YulTypedName",
									"src": "12457:4:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "12466:6:20",
									"nodeType": "YulTypedName",
									"src": "12466:6:20",
									"type": ""
								}
							],
							"src": "12422:320:20"
						},
						{
							"body": {
								"nativeSrc": "12902:288:20",
								"nodeType": "YulBlock",
								"src": "12902:288:20",
								"statements": [
									{
										"nativeSrc": "12912:26:20",
										"nodeType": "YulAssignment",
										"src": "12912:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12924:9:20",
													"nodeType": "YulIdentifier",
													"src": "12924:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "12935:2:20",
													"nodeType": "YulLiteral",
													"src": "12935:2:20",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "12920:3:20",
												"nodeType": "YulIdentifier",
												"src": "12920:3:20"
											},
											"nativeSrc": "12920:18:20",
											"nodeType": "YulFunctionCall",
											"src": "12920:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "12912:4:20",
												"nodeType": "YulIdentifier",
												"src": "12912:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "12992:6:20",
													"nodeType": "YulIdentifier",
													"src": "12992:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13005:9:20",
															"nodeType": "YulIdentifier",
															"src": "13005:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "13016:1:20",
															"nodeType": "YulLiteral",
															"src": "13016:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13001:3:20",
														"nodeType": "YulIdentifier",
														"src": "13001:3:20"
													},
													"nativeSrc": "13001:17:20",
													"nodeType": "YulFunctionCall",
													"src": "13001:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "12948:43:20",
												"nodeType": "YulIdentifier",
												"src": "12948:43:20"
											},
											"nativeSrc": "12948:71:20",
											"nodeType": "YulFunctionCall",
											"src": "12948:71:20"
										},
										"nativeSrc": "12948:71:20",
										"nodeType": "YulExpressionStatement",
										"src": "12948:71:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "13073:6:20",
													"nodeType": "YulIdentifier",
													"src": "13073:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13086:9:20",
															"nodeType": "YulIdentifier",
															"src": "13086:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "13097:2:20",
															"nodeType": "YulLiteral",
															"src": "13097:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13082:3:20",
														"nodeType": "YulIdentifier",
														"src": "13082:3:20"
													},
													"nativeSrc": "13082:18:20",
													"nodeType": "YulFunctionCall",
													"src": "13082:18:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "13029:43:20",
												"nodeType": "YulIdentifier",
												"src": "13029:43:20"
											},
											"nativeSrc": "13029:72:20",
											"nodeType": "YulFunctionCall",
											"src": "13029:72:20"
										},
										"nativeSrc": "13029:72:20",
										"nodeType": "YulExpressionStatement",
										"src": "13029:72:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "13155:6:20",
													"nodeType": "YulIdentifier",
													"src": "13155:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13168:9:20",
															"nodeType": "YulIdentifier",
															"src": "13168:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "13179:2:20",
															"nodeType": "YulLiteral",
															"src": "13179:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13164:3:20",
														"nodeType": "YulIdentifier",
														"src": "13164:3:20"
													},
													"nativeSrc": "13164:18:20",
													"nodeType": "YulFunctionCall",
													"src": "13164:18:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "13111:43:20",
												"nodeType": "YulIdentifier",
												"src": "13111:43:20"
											},
											"nativeSrc": "13111:72:20",
											"nodeType": "YulFunctionCall",
											"src": "13111:72:20"
										},
										"nativeSrc": "13111:72:20",
										"nodeType": "YulExpressionStatement",
										"src": "13111:72:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "12748:442:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "12858:9:20",
									"nodeType": "YulTypedName",
									"src": "12858:9:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "12870:6:20",
									"nodeType": "YulTypedName",
									"src": "12870:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "12878:6:20",
									"nodeType": "YulTypedName",
									"src": "12878:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "12886:6:20",
									"nodeType": "YulTypedName",
									"src": "12886:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "12897:4:20",
									"nodeType": "YulTypedName",
									"src": "12897:4:20",
									"type": ""
								}
							],
							"src": "12748:442:20"
						},
						{
							"body": {
								"nativeSrc": "13310:34:20",
								"nodeType": "YulBlock",
								"src": "13310:34:20",
								"statements": [
									{
										"nativeSrc": "13320:18:20",
										"nodeType": "YulAssignment",
										"src": "13320:18:20",
										"value": {
											"name": "pos",
											"nativeSrc": "13335:3:20",
											"nodeType": "YulIdentifier",
											"src": "13335:3:20"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "13320:11:20",
												"nodeType": "YulIdentifier",
												"src": "13320:11:20"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nativeSrc": "13196:148:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "13282:3:20",
									"nodeType": "YulTypedName",
									"src": "13282:3:20",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "13287:6:20",
									"nodeType": "YulTypedName",
									"src": "13287:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "13298:11:20",
									"nodeType": "YulTypedName",
									"src": "13298:11:20",
									"type": ""
								}
							],
							"src": "13196:148:20"
						},
						{
							"body": {
								"nativeSrc": "13460:280:20",
								"nodeType": "YulBlock",
								"src": "13460:280:20",
								"statements": [
									{
										"nativeSrc": "13470:53:20",
										"nodeType": "YulVariableDeclaration",
										"src": "13470:53:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "13517:5:20",
													"nodeType": "YulIdentifier",
													"src": "13517:5:20"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "13484:32:20",
												"nodeType": "YulIdentifier",
												"src": "13484:32:20"
											},
											"nativeSrc": "13484:39:20",
											"nodeType": "YulFunctionCall",
											"src": "13484:39:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "13474:6:20",
												"nodeType": "YulTypedName",
												"src": "13474:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "13532:96:20",
										"nodeType": "YulAssignment",
										"src": "13532:96:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "13616:3:20",
													"nodeType": "YulIdentifier",
													"src": "13616:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "13621:6:20",
													"nodeType": "YulIdentifier",
													"src": "13621:6:20"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "13539:76:20",
												"nodeType": "YulIdentifier",
												"src": "13539:76:20"
											},
											"nativeSrc": "13539:89:20",
											"nodeType": "YulFunctionCall",
											"src": "13539:89:20"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "13532:3:20",
												"nodeType": "YulIdentifier",
												"src": "13532:3:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "13676:5:20",
															"nodeType": "YulIdentifier",
															"src": "13676:5:20"
														},
														{
															"kind": "number",
															"nativeSrc": "13683:4:20",
															"nodeType": "YulLiteral",
															"src": "13683:4:20",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13672:3:20",
														"nodeType": "YulIdentifier",
														"src": "13672:3:20"
													},
													"nativeSrc": "13672:16:20",
													"nodeType": "YulFunctionCall",
													"src": "13672:16:20"
												},
												{
													"name": "pos",
													"nativeSrc": "13690:3:20",
													"nodeType": "YulIdentifier",
													"src": "13690:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "13695:6:20",
													"nodeType": "YulIdentifier",
													"src": "13695:6:20"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "13637:34:20",
												"nodeType": "YulIdentifier",
												"src": "13637:34:20"
											},
											"nativeSrc": "13637:65:20",
											"nodeType": "YulFunctionCall",
											"src": "13637:65:20"
										},
										"nativeSrc": "13637:65:20",
										"nodeType": "YulExpressionStatement",
										"src": "13637:65:20"
									},
									{
										"nativeSrc": "13711:23:20",
										"nodeType": "YulAssignment",
										"src": "13711:23:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "13722:3:20",
													"nodeType": "YulIdentifier",
													"src": "13722:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "13727:6:20",
													"nodeType": "YulIdentifier",
													"src": "13727:6:20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "13718:3:20",
												"nodeType": "YulIdentifier",
												"src": "13718:3:20"
											},
											"nativeSrc": "13718:16:20",
											"nodeType": "YulFunctionCall",
											"src": "13718:16:20"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "13711:3:20",
												"nodeType": "YulIdentifier",
												"src": "13711:3:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
							"nativeSrc": "13350:390:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "13441:5:20",
									"nodeType": "YulTypedName",
									"src": "13441:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "13448:3:20",
									"nodeType": "YulTypedName",
									"src": "13448:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "13456:3:20",
									"nodeType": "YulTypedName",
									"src": "13456:3:20",
									"type": ""
								}
							],
							"src": "13350:390:20"
						},
						{
							"body": {
								"nativeSrc": "13930:251:20",
								"nodeType": "YulBlock",
								"src": "13930:251:20",
								"statements": [
									{
										"nativeSrc": "13941:102:20",
										"nodeType": "YulAssignment",
										"src": "13941:102:20",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "14030:6:20",
													"nodeType": "YulIdentifier",
													"src": "14030:6:20"
												},
												{
													"name": "pos",
													"nativeSrc": "14039:3:20",
													"nodeType": "YulIdentifier",
													"src": "14039:3:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "13948:81:20",
												"nodeType": "YulIdentifier",
												"src": "13948:81:20"
											},
											"nativeSrc": "13948:95:20",
											"nodeType": "YulFunctionCall",
											"src": "13948:95:20"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "13941:3:20",
												"nodeType": "YulIdentifier",
												"src": "13941:3:20"
											}
										]
									},
									{
										"nativeSrc": "14053:102:20",
										"nodeType": "YulAssignment",
										"src": "14053:102:20",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "14142:6:20",
													"nodeType": "YulIdentifier",
													"src": "14142:6:20"
												},
												{
													"name": "pos",
													"nativeSrc": "14151:3:20",
													"nodeType": "YulIdentifier",
													"src": "14151:3:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "14060:81:20",
												"nodeType": "YulIdentifier",
												"src": "14060:81:20"
											},
											"nativeSrc": "14060:95:20",
											"nodeType": "YulFunctionCall",
											"src": "14060:95:20"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "14053:3:20",
												"nodeType": "YulIdentifier",
												"src": "14053:3:20"
											}
										]
									},
									{
										"nativeSrc": "14165:10:20",
										"nodeType": "YulAssignment",
										"src": "14165:10:20",
										"value": {
											"name": "pos",
											"nativeSrc": "14172:3:20",
											"nodeType": "YulIdentifier",
											"src": "14172:3:20"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "14165:3:20",
												"nodeType": "YulIdentifier",
												"src": "14165:3:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nativeSrc": "13746:435:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "13901:3:20",
									"nodeType": "YulTypedName",
									"src": "13901:3:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "13907:6:20",
									"nodeType": "YulTypedName",
									"src": "13907:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "13915:6:20",
									"nodeType": "YulTypedName",
									"src": "13915:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "13926:3:20",
									"nodeType": "YulTypedName",
									"src": "13926:3:20",
									"type": ""
								}
							],
							"src": "13746:435:20"
						},
						{
							"body": {
								"nativeSrc": "14215:152:20",
								"nodeType": "YulBlock",
								"src": "14215:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14232:1:20",
													"nodeType": "YulLiteral",
													"src": "14232:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "14235:77:20",
													"nodeType": "YulLiteral",
													"src": "14235:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14225:6:20",
												"nodeType": "YulIdentifier",
												"src": "14225:6:20"
											},
											"nativeSrc": "14225:88:20",
											"nodeType": "YulFunctionCall",
											"src": "14225:88:20"
										},
										"nativeSrc": "14225:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "14225:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14329:1:20",
													"nodeType": "YulLiteral",
													"src": "14329:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "14332:4:20",
													"nodeType": "YulLiteral",
													"src": "14332:4:20",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14322:6:20",
												"nodeType": "YulIdentifier",
												"src": "14322:6:20"
											},
											"nativeSrc": "14322:15:20",
											"nodeType": "YulFunctionCall",
											"src": "14322:15:20"
										},
										"nativeSrc": "14322:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "14322:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14353:1:20",
													"nodeType": "YulLiteral",
													"src": "14353:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "14356:4:20",
													"nodeType": "YulLiteral",
													"src": "14356:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "14346:6:20",
												"nodeType": "YulIdentifier",
												"src": "14346:6:20"
											},
											"nativeSrc": "14346:15:20",
											"nodeType": "YulFunctionCall",
											"src": "14346:15:20"
										},
										"nativeSrc": "14346:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "14346:15:20"
									}
								]
							},
							"name": "panic_error_0x11",
							"nativeSrc": "14187:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "14187:180:20"
						},
						{
							"body": {
								"nativeSrc": "14416:190:20",
								"nodeType": "YulBlock",
								"src": "14416:190:20",
								"statements": [
									{
										"nativeSrc": "14426:33:20",
										"nodeType": "YulAssignment",
										"src": "14426:33:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "14453:5:20",
													"nodeType": "YulIdentifier",
													"src": "14453:5:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "14435:17:20",
												"nodeType": "YulIdentifier",
												"src": "14435:17:20"
											},
											"nativeSrc": "14435:24:20",
											"nodeType": "YulFunctionCall",
											"src": "14435:24:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "14426:5:20",
												"nodeType": "YulIdentifier",
												"src": "14426:5:20"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "14549:22:20",
											"nodeType": "YulBlock",
											"src": "14549:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "14551:16:20",
															"nodeType": "YulIdentifier",
															"src": "14551:16:20"
														},
														"nativeSrc": "14551:18:20",
														"nodeType": "YulFunctionCall",
														"src": "14551:18:20"
													},
													"nativeSrc": "14551:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "14551:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "14474:5:20",
													"nodeType": "YulIdentifier",
													"src": "14474:5:20"
												},
												{
													"kind": "number",
													"nativeSrc": "14481:66:20",
													"nodeType": "YulLiteral",
													"src": "14481:66:20",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "14471:2:20",
												"nodeType": "YulIdentifier",
												"src": "14471:2:20"
											},
											"nativeSrc": "14471:77:20",
											"nodeType": "YulFunctionCall",
											"src": "14471:77:20"
										},
										"nativeSrc": "14468:103:20",
										"nodeType": "YulIf",
										"src": "14468:103:20"
									},
									{
										"nativeSrc": "14580:20:20",
										"nodeType": "YulAssignment",
										"src": "14580:20:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "14591:5:20",
													"nodeType": "YulIdentifier",
													"src": "14591:5:20"
												},
												{
													"kind": "number",
													"nativeSrc": "14598:1:20",
													"nodeType": "YulLiteral",
													"src": "14598:1:20",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "14587:3:20",
												"nodeType": "YulIdentifier",
												"src": "14587:3:20"
											},
											"nativeSrc": "14587:13:20",
											"nodeType": "YulFunctionCall",
											"src": "14587:13:20"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "14580:3:20",
												"nodeType": "YulIdentifier",
												"src": "14580:3:20"
											}
										]
									}
								]
							},
							"name": "increment_t_uint256",
							"nativeSrc": "14373:233:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "14402:5:20",
									"nodeType": "YulTypedName",
									"src": "14402:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "14412:3:20",
									"nodeType": "YulTypedName",
									"src": "14412:3:20",
									"type": ""
								}
							],
							"src": "14373:233:20"
						},
						{
							"body": {
								"nativeSrc": "14670:40:20",
								"nodeType": "YulBlock",
								"src": "14670:40:20",
								"statements": [
									{
										"nativeSrc": "14681:22:20",
										"nodeType": "YulAssignment",
										"src": "14681:22:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "14697:5:20",
													"nodeType": "YulIdentifier",
													"src": "14697:5:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "14691:5:20",
												"nodeType": "YulIdentifier",
												"src": "14691:5:20"
											},
											"nativeSrc": "14691:12:20",
											"nodeType": "YulFunctionCall",
											"src": "14691:12:20"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "14681:6:20",
												"nodeType": "YulIdentifier",
												"src": "14681:6:20"
											}
										]
									}
								]
							},
							"name": "array_length_t_bytes_memory_ptr",
							"nativeSrc": "14612:98:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "14653:5:20",
									"nodeType": "YulTypedName",
									"src": "14653:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "14663:6:20",
									"nodeType": "YulTypedName",
									"src": "14663:6:20",
									"type": ""
								}
							],
							"src": "14612:98:20"
						},
						{
							"body": {
								"nativeSrc": "14811:73:20",
								"nodeType": "YulBlock",
								"src": "14811:73:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "14828:3:20",
													"nodeType": "YulIdentifier",
													"src": "14828:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "14833:6:20",
													"nodeType": "YulIdentifier",
													"src": "14833:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14821:6:20",
												"nodeType": "YulIdentifier",
												"src": "14821:6:20"
											},
											"nativeSrc": "14821:19:20",
											"nodeType": "YulFunctionCall",
											"src": "14821:19:20"
										},
										"nativeSrc": "14821:19:20",
										"nodeType": "YulExpressionStatement",
										"src": "14821:19:20"
									},
									{
										"nativeSrc": "14849:29:20",
										"nodeType": "YulAssignment",
										"src": "14849:29:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "14868:3:20",
													"nodeType": "YulIdentifier",
													"src": "14868:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "14873:4:20",
													"nodeType": "YulLiteral",
													"src": "14873:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "14864:3:20",
												"nodeType": "YulIdentifier",
												"src": "14864:3:20"
											},
											"nativeSrc": "14864:14:20",
											"nodeType": "YulFunctionCall",
											"src": "14864:14:20"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "14849:11:20",
												"nodeType": "YulIdentifier",
												"src": "14849:11:20"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
							"nativeSrc": "14716:168:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "14783:3:20",
									"nodeType": "YulTypedName",
									"src": "14783:3:20",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "14788:6:20",
									"nodeType": "YulTypedName",
									"src": "14788:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "14799:11:20",
									"nodeType": "YulTypedName",
									"src": "14799:11:20",
									"type": ""
								}
							],
							"src": "14716:168:20"
						},
						{
							"body": {
								"nativeSrc": "14980:283:20",
								"nodeType": "YulBlock",
								"src": "14980:283:20",
								"statements": [
									{
										"nativeSrc": "14990:52:20",
										"nodeType": "YulVariableDeclaration",
										"src": "14990:52:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "15036:5:20",
													"nodeType": "YulIdentifier",
													"src": "15036:5:20"
												}
											],
											"functionName": {
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "15004:31:20",
												"nodeType": "YulIdentifier",
												"src": "15004:31:20"
											},
											"nativeSrc": "15004:38:20",
											"nodeType": "YulFunctionCall",
											"src": "15004:38:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "14994:6:20",
												"nodeType": "YulTypedName",
												"src": "14994:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "15051:77:20",
										"nodeType": "YulAssignment",
										"src": "15051:77:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "15116:3:20",
													"nodeType": "YulIdentifier",
													"src": "15116:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "15121:6:20",
													"nodeType": "YulIdentifier",
													"src": "15121:6:20"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
												"nativeSrc": "15058:57:20",
												"nodeType": "YulIdentifier",
												"src": "15058:57:20"
											},
											"nativeSrc": "15058:70:20",
											"nodeType": "YulFunctionCall",
											"src": "15058:70:20"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "15051:3:20",
												"nodeType": "YulIdentifier",
												"src": "15051:3:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "15176:5:20",
															"nodeType": "YulIdentifier",
															"src": "15176:5:20"
														},
														{
															"kind": "number",
															"nativeSrc": "15183:4:20",
															"nodeType": "YulLiteral",
															"src": "15183:4:20",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "15172:3:20",
														"nodeType": "YulIdentifier",
														"src": "15172:3:20"
													},
													"nativeSrc": "15172:16:20",
													"nodeType": "YulFunctionCall",
													"src": "15172:16:20"
												},
												{
													"name": "pos",
													"nativeSrc": "15190:3:20",
													"nodeType": "YulIdentifier",
													"src": "15190:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "15195:6:20",
													"nodeType": "YulIdentifier",
													"src": "15195:6:20"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "15137:34:20",
												"nodeType": "YulIdentifier",
												"src": "15137:34:20"
											},
											"nativeSrc": "15137:65:20",
											"nodeType": "YulFunctionCall",
											"src": "15137:65:20"
										},
										"nativeSrc": "15137:65:20",
										"nodeType": "YulExpressionStatement",
										"src": "15137:65:20"
									},
									{
										"nativeSrc": "15211:46:20",
										"nodeType": "YulAssignment",
										"src": "15211:46:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "15222:3:20",
													"nodeType": "YulIdentifier",
													"src": "15222:3:20"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "15249:6:20",
															"nodeType": "YulIdentifier",
															"src": "15249:6:20"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nativeSrc": "15227:21:20",
														"nodeType": "YulIdentifier",
														"src": "15227:21:20"
													},
													"nativeSrc": "15227:29:20",
													"nodeType": "YulFunctionCall",
													"src": "15227:29:20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "15218:3:20",
												"nodeType": "YulIdentifier",
												"src": "15218:3:20"
											},
											"nativeSrc": "15218:39:20",
											"nodeType": "YulFunctionCall",
											"src": "15218:39:20"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "15211:3:20",
												"nodeType": "YulIdentifier",
												"src": "15211:3:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
							"nativeSrc": "14890:373:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "14961:5:20",
									"nodeType": "YulTypedName",
									"src": "14961:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "14968:3:20",
									"nodeType": "YulTypedName",
									"src": "14968:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "14976:3:20",
									"nodeType": "YulTypedName",
									"src": "14976:3:20",
									"type": ""
								}
							],
							"src": "14890:373:20"
						},
						{
							"body": {
								"nativeSrc": "15469:440:20",
								"nodeType": "YulBlock",
								"src": "15469:440:20",
								"statements": [
									{
										"nativeSrc": "15479:27:20",
										"nodeType": "YulAssignment",
										"src": "15479:27:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "15491:9:20",
													"nodeType": "YulIdentifier",
													"src": "15491:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "15502:3:20",
													"nodeType": "YulLiteral",
													"src": "15502:3:20",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "15487:3:20",
												"nodeType": "YulIdentifier",
												"src": "15487:3:20"
											},
											"nativeSrc": "15487:19:20",
											"nodeType": "YulFunctionCall",
											"src": "15487:19:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "15479:4:20",
												"nodeType": "YulIdentifier",
												"src": "15479:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "15560:6:20",
													"nodeType": "YulIdentifier",
													"src": "15560:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "15573:9:20",
															"nodeType": "YulIdentifier",
															"src": "15573:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "15584:1:20",
															"nodeType": "YulLiteral",
															"src": "15584:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "15569:3:20",
														"nodeType": "YulIdentifier",
														"src": "15569:3:20"
													},
													"nativeSrc": "15569:17:20",
													"nodeType": "YulFunctionCall",
													"src": "15569:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "15516:43:20",
												"nodeType": "YulIdentifier",
												"src": "15516:43:20"
											},
											"nativeSrc": "15516:71:20",
											"nodeType": "YulFunctionCall",
											"src": "15516:71:20"
										},
										"nativeSrc": "15516:71:20",
										"nodeType": "YulExpressionStatement",
										"src": "15516:71:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "15641:6:20",
													"nodeType": "YulIdentifier",
													"src": "15641:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "15654:9:20",
															"nodeType": "YulIdentifier",
															"src": "15654:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "15665:2:20",
															"nodeType": "YulLiteral",
															"src": "15665:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "15650:3:20",
														"nodeType": "YulIdentifier",
														"src": "15650:3:20"
													},
													"nativeSrc": "15650:18:20",
													"nodeType": "YulFunctionCall",
													"src": "15650:18:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "15597:43:20",
												"nodeType": "YulIdentifier",
												"src": "15597:43:20"
											},
											"nativeSrc": "15597:72:20",
											"nodeType": "YulFunctionCall",
											"src": "15597:72:20"
										},
										"nativeSrc": "15597:72:20",
										"nodeType": "YulExpressionStatement",
										"src": "15597:72:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "15723:6:20",
													"nodeType": "YulIdentifier",
													"src": "15723:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "15736:9:20",
															"nodeType": "YulIdentifier",
															"src": "15736:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "15747:2:20",
															"nodeType": "YulLiteral",
															"src": "15747:2:20",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "15732:3:20",
														"nodeType": "YulIdentifier",
														"src": "15732:3:20"
													},
													"nativeSrc": "15732:18:20",
													"nodeType": "YulFunctionCall",
													"src": "15732:18:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "15679:43:20",
												"nodeType": "YulIdentifier",
												"src": "15679:43:20"
											},
											"nativeSrc": "15679:72:20",
											"nodeType": "YulFunctionCall",
											"src": "15679:72:20"
										},
										"nativeSrc": "15679:72:20",
										"nodeType": "YulExpressionStatement",
										"src": "15679:72:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "15772:9:20",
															"nodeType": "YulIdentifier",
															"src": "15772:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "15783:2:20",
															"nodeType": "YulLiteral",
															"src": "15783:2:20",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "15768:3:20",
														"nodeType": "YulIdentifier",
														"src": "15768:3:20"
													},
													"nativeSrc": "15768:18:20",
													"nodeType": "YulFunctionCall",
													"src": "15768:18:20"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "15792:4:20",
															"nodeType": "YulIdentifier",
															"src": "15792:4:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "15798:9:20",
															"nodeType": "YulIdentifier",
															"src": "15798:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "15788:3:20",
														"nodeType": "YulIdentifier",
														"src": "15788:3:20"
													},
													"nativeSrc": "15788:20:20",
													"nodeType": "YulFunctionCall",
													"src": "15788:20:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "15761:6:20",
												"nodeType": "YulIdentifier",
												"src": "15761:6:20"
											},
											"nativeSrc": "15761:48:20",
											"nodeType": "YulFunctionCall",
											"src": "15761:48:20"
										},
										"nativeSrc": "15761:48:20",
										"nodeType": "YulExpressionStatement",
										"src": "15761:48:20"
									},
									{
										"nativeSrc": "15818:84:20",
										"nodeType": "YulAssignment",
										"src": "15818:84:20",
										"value": {
											"arguments": [
												{
													"name": "value3",
													"nativeSrc": "15888:6:20",
													"nodeType": "YulIdentifier",
													"src": "15888:6:20"
												},
												{
													"name": "tail",
													"nativeSrc": "15897:4:20",
													"nodeType": "YulIdentifier",
													"src": "15897:4:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
												"nativeSrc": "15826:61:20",
												"nodeType": "YulIdentifier",
												"src": "15826:61:20"
											},
											"nativeSrc": "15826:76:20",
											"nodeType": "YulFunctionCall",
											"src": "15826:76:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "15818:4:20",
												"nodeType": "YulIdentifier",
												"src": "15818:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
							"nativeSrc": "15269:640:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "15417:9:20",
									"nodeType": "YulTypedName",
									"src": "15417:9:20",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "15429:6:20",
									"nodeType": "YulTypedName",
									"src": "15429:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "15437:6:20",
									"nodeType": "YulTypedName",
									"src": "15437:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "15445:6:20",
									"nodeType": "YulTypedName",
									"src": "15445:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "15453:6:20",
									"nodeType": "YulTypedName",
									"src": "15453:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "15464:4:20",
									"nodeType": "YulTypedName",
									"src": "15464:4:20",
									"type": ""
								}
							],
							"src": "15269:640:20"
						},
						{
							"body": {
								"nativeSrc": "15977:79:20",
								"nodeType": "YulBlock",
								"src": "15977:79:20",
								"statements": [
									{
										"nativeSrc": "15987:22:20",
										"nodeType": "YulAssignment",
										"src": "15987:22:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "16002:6:20",
													"nodeType": "YulIdentifier",
													"src": "16002:6:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "15996:5:20",
												"nodeType": "YulIdentifier",
												"src": "15996:5:20"
											},
											"nativeSrc": "15996:13:20",
											"nodeType": "YulFunctionCall",
											"src": "15996:13:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "15987:5:20",
												"nodeType": "YulIdentifier",
												"src": "15987:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "16044:5:20",
													"nodeType": "YulIdentifier",
													"src": "16044:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_bytes4",
												"nativeSrc": "16018:25:20",
												"nodeType": "YulIdentifier",
												"src": "16018:25:20"
											},
											"nativeSrc": "16018:32:20",
											"nodeType": "YulFunctionCall",
											"src": "16018:32:20"
										},
										"nativeSrc": "16018:32:20",
										"nodeType": "YulExpressionStatement",
										"src": "16018:32:20"
									}
								]
							},
							"name": "abi_decode_t_bytes4_fromMemory",
							"nativeSrc": "15915:141:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "15955:6:20",
									"nodeType": "YulTypedName",
									"src": "15955:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "15963:3:20",
									"nodeType": "YulTypedName",
									"src": "15963:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "15971:5:20",
									"nodeType": "YulTypedName",
									"src": "15971:5:20",
									"type": ""
								}
							],
							"src": "15915:141:20"
						},
						{
							"body": {
								"nativeSrc": "16138:273:20",
								"nodeType": "YulBlock",
								"src": "16138:273:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "16184:83:20",
											"nodeType": "YulBlock",
											"src": "16184:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "16186:77:20",
															"nodeType": "YulIdentifier",
															"src": "16186:77:20"
														},
														"nativeSrc": "16186:79:20",
														"nodeType": "YulFunctionCall",
														"src": "16186:79:20"
													},
													"nativeSrc": "16186:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "16186:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "16159:7:20",
															"nodeType": "YulIdentifier",
															"src": "16159:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "16168:9:20",
															"nodeType": "YulIdentifier",
															"src": "16168:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "16155:3:20",
														"nodeType": "YulIdentifier",
														"src": "16155:3:20"
													},
													"nativeSrc": "16155:23:20",
													"nodeType": "YulFunctionCall",
													"src": "16155:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "16180:2:20",
													"nodeType": "YulLiteral",
													"src": "16180:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "16151:3:20",
												"nodeType": "YulIdentifier",
												"src": "16151:3:20"
											},
											"nativeSrc": "16151:32:20",
											"nodeType": "YulFunctionCall",
											"src": "16151:32:20"
										},
										"nativeSrc": "16148:119:20",
										"nodeType": "YulIf",
										"src": "16148:119:20"
									},
									{
										"nativeSrc": "16277:127:20",
										"nodeType": "YulBlock",
										"src": "16277:127:20",
										"statements": [
											{
												"nativeSrc": "16292:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "16292:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "16306:1:20",
													"nodeType": "YulLiteral",
													"src": "16306:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "16296:6:20",
														"nodeType": "YulTypedName",
														"src": "16296:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "16321:73:20",
												"nodeType": "YulAssignment",
												"src": "16321:73:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "16366:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "16366:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "16377:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "16377:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "16362:3:20",
																"nodeType": "YulIdentifier",
																"src": "16362:3:20"
															},
															"nativeSrc": "16362:22:20",
															"nodeType": "YulFunctionCall",
															"src": "16362:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "16386:7:20",
															"nodeType": "YulIdentifier",
															"src": "16386:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_bytes4_fromMemory",
														"nativeSrc": "16331:30:20",
														"nodeType": "YulIdentifier",
														"src": "16331:30:20"
													},
													"nativeSrc": "16331:63:20",
													"nodeType": "YulFunctionCall",
													"src": "16331:63:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "16321:6:20",
														"nodeType": "YulIdentifier",
														"src": "16321:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_bytes4_fromMemory",
							"nativeSrc": "16062:349:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "16108:9:20",
									"nodeType": "YulTypedName",
									"src": "16108:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "16119:7:20",
									"nodeType": "YulTypedName",
									"src": "16119:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "16131:6:20",
									"nodeType": "YulTypedName",
									"src": "16131:6:20",
									"type": ""
								}
							],
							"src": "16062:349:20"
						},
						{
							"body": {
								"nativeSrc": "16471:87:20",
								"nodeType": "YulBlock",
								"src": "16471:87:20",
								"statements": [
									{
										"nativeSrc": "16481:11:20",
										"nodeType": "YulAssignment",
										"src": "16481:11:20",
										"value": {
											"name": "ptr",
											"nativeSrc": "16489:3:20",
											"nodeType": "YulIdentifier",
											"src": "16489:3:20"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "16481:4:20",
												"nodeType": "YulIdentifier",
												"src": "16481:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "16509:1:20",
													"nodeType": "YulLiteral",
													"src": "16509:1:20",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nativeSrc": "16512:3:20",
													"nodeType": "YulIdentifier",
													"src": "16512:3:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "16502:6:20",
												"nodeType": "YulIdentifier",
												"src": "16502:6:20"
											},
											"nativeSrc": "16502:14:20",
											"nodeType": "YulFunctionCall",
											"src": "16502:14:20"
										},
										"nativeSrc": "16502:14:20",
										"nodeType": "YulExpressionStatement",
										"src": "16502:14:20"
									},
									{
										"nativeSrc": "16525:26:20",
										"nodeType": "YulAssignment",
										"src": "16525:26:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "16543:1:20",
													"nodeType": "YulLiteral",
													"src": "16543:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "16546:4:20",
													"nodeType": "YulLiteral",
													"src": "16546:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nativeSrc": "16533:9:20",
												"nodeType": "YulIdentifier",
												"src": "16533:9:20"
											},
											"nativeSrc": "16533:18:20",
											"nodeType": "YulFunctionCall",
											"src": "16533:18:20"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "16525:4:20",
												"nodeType": "YulIdentifier",
												"src": "16525:4:20"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_string_storage",
							"nativeSrc": "16417:141:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "16458:3:20",
									"nodeType": "YulTypedName",
									"src": "16458:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "16466:4:20",
									"nodeType": "YulTypedName",
									"src": "16466:4:20",
									"type": ""
								}
							],
							"src": "16417:141:20"
						},
						{
							"body": {
								"nativeSrc": "16608:49:20",
								"nodeType": "YulBlock",
								"src": "16608:49:20",
								"statements": [
									{
										"nativeSrc": "16618:33:20",
										"nodeType": "YulAssignment",
										"src": "16618:33:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "16636:5:20",
															"nodeType": "YulIdentifier",
															"src": "16636:5:20"
														},
														{
															"kind": "number",
															"nativeSrc": "16643:2:20",
															"nodeType": "YulLiteral",
															"src": "16643:2:20",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "16632:3:20",
														"nodeType": "YulIdentifier",
														"src": "16632:3:20"
													},
													"nativeSrc": "16632:14:20",
													"nodeType": "YulFunctionCall",
													"src": "16632:14:20"
												},
												{
													"kind": "number",
													"nativeSrc": "16648:2:20",
													"nodeType": "YulLiteral",
													"src": "16648:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "16628:3:20",
												"nodeType": "YulIdentifier",
												"src": "16628:3:20"
											},
											"nativeSrc": "16628:23:20",
											"nodeType": "YulFunctionCall",
											"src": "16628:23:20"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "16618:6:20",
												"nodeType": "YulIdentifier",
												"src": "16618:6:20"
											}
										]
									}
								]
							},
							"name": "divide_by_32_ceil",
							"nativeSrc": "16564:93:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "16591:5:20",
									"nodeType": "YulTypedName",
									"src": "16591:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "16601:6:20",
									"nodeType": "YulTypedName",
									"src": "16601:6:20",
									"type": ""
								}
							],
							"src": "16564:93:20"
						},
						{
							"body": {
								"nativeSrc": "16716:54:20",
								"nodeType": "YulBlock",
								"src": "16716:54:20",
								"statements": [
									{
										"nativeSrc": "16726:37:20",
										"nodeType": "YulAssignment",
										"src": "16726:37:20",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nativeSrc": "16751:4:20",
													"nodeType": "YulIdentifier",
													"src": "16751:4:20"
												},
												{
													"name": "value",
													"nativeSrc": "16757:5:20",
													"nodeType": "YulIdentifier",
													"src": "16757:5:20"
												}
											],
											"functionName": {
												"name": "shl",
												"nativeSrc": "16747:3:20",
												"nodeType": "YulIdentifier",
												"src": "16747:3:20"
											},
											"nativeSrc": "16747:16:20",
											"nodeType": "YulFunctionCall",
											"src": "16747:16:20"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "16726:8:20",
												"nodeType": "YulIdentifier",
												"src": "16726:8:20"
											}
										]
									}
								]
							},
							"name": "shift_left_dynamic",
							"nativeSrc": "16663:107:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nativeSrc": "16691:4:20",
									"nodeType": "YulTypedName",
									"src": "16691:4:20",
									"type": ""
								},
								{
									"name": "value",
									"nativeSrc": "16697:5:20",
									"nodeType": "YulTypedName",
									"src": "16697:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "16707:8:20",
									"nodeType": "YulTypedName",
									"src": "16707:8:20",
									"type": ""
								}
							],
							"src": "16663:107:20"
						},
						{
							"body": {
								"nativeSrc": "16852:317:20",
								"nodeType": "YulBlock",
								"src": "16852:317:20",
								"statements": [
									{
										"nativeSrc": "16862:35:20",
										"nodeType": "YulVariableDeclaration",
										"src": "16862:35:20",
										"value": {
											"arguments": [
												{
													"name": "shiftBytes",
													"nativeSrc": "16883:10:20",
													"nodeType": "YulIdentifier",
													"src": "16883:10:20"
												},
												{
													"kind": "number",
													"nativeSrc": "16895:1:20",
													"nodeType": "YulLiteral",
													"src": "16895:1:20",
													"type": "",
													"value": "8"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "16879:3:20",
												"nodeType": "YulIdentifier",
												"src": "16879:3:20"
											},
											"nativeSrc": "16879:18:20",
											"nodeType": "YulFunctionCall",
											"src": "16879:18:20"
										},
										"variables": [
											{
												"name": "shiftBits",
												"nativeSrc": "16866:9:20",
												"nodeType": "YulTypedName",
												"src": "16866:9:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "16906:109:20",
										"nodeType": "YulVariableDeclaration",
										"src": "16906:109:20",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nativeSrc": "16937:9:20",
													"nodeType": "YulIdentifier",
													"src": "16937:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "16948:66:20",
													"nodeType": "YulLiteral",
													"src": "16948:66:20",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nativeSrc": "16918:18:20",
												"nodeType": "YulIdentifier",
												"src": "16918:18:20"
											},
											"nativeSrc": "16918:97:20",
											"nodeType": "YulFunctionCall",
											"src": "16918:97:20"
										},
										"variables": [
											{
												"name": "mask",
												"nativeSrc": "16910:4:20",
												"nodeType": "YulTypedName",
												"src": "16910:4:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "17024:51:20",
										"nodeType": "YulAssignment",
										"src": "17024:51:20",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nativeSrc": "17055:9:20",
													"nodeType": "YulIdentifier",
													"src": "17055:9:20"
												},
												{
													"name": "toInsert",
													"nativeSrc": "17066:8:20",
													"nodeType": "YulIdentifier",
													"src": "17066:8:20"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nativeSrc": "17036:18:20",
												"nodeType": "YulIdentifier",
												"src": "17036:18:20"
											},
											"nativeSrc": "17036:39:20",
											"nodeType": "YulFunctionCall",
											"src": "17036:39:20"
										},
										"variableNames": [
											{
												"name": "toInsert",
												"nativeSrc": "17024:8:20",
												"nodeType": "YulIdentifier",
												"src": "17024:8:20"
											}
										]
									},
									{
										"nativeSrc": "17084:30:20",
										"nodeType": "YulAssignment",
										"src": "17084:30:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "17097:5:20",
													"nodeType": "YulIdentifier",
													"src": "17097:5:20"
												},
												{
													"arguments": [
														{
															"name": "mask",
															"nativeSrc": "17108:4:20",
															"nodeType": "YulIdentifier",
															"src": "17108:4:20"
														}
													],
													"functionName": {
														"name": "not",
														"nativeSrc": "17104:3:20",
														"nodeType": "YulIdentifier",
														"src": "17104:3:20"
													},
													"nativeSrc": "17104:9:20",
													"nodeType": "YulFunctionCall",
													"src": "17104:9:20"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "17093:3:20",
												"nodeType": "YulIdentifier",
												"src": "17093:3:20"
											},
											"nativeSrc": "17093:21:20",
											"nodeType": "YulFunctionCall",
											"src": "17093:21:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "17084:5:20",
												"nodeType": "YulIdentifier",
												"src": "17084:5:20"
											}
										]
									},
									{
										"nativeSrc": "17123:40:20",
										"nodeType": "YulAssignment",
										"src": "17123:40:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "17136:5:20",
													"nodeType": "YulIdentifier",
													"src": "17136:5:20"
												},
												{
													"arguments": [
														{
															"name": "toInsert",
															"nativeSrc": "17147:8:20",
															"nodeType": "YulIdentifier",
															"src": "17147:8:20"
														},
														{
															"name": "mask",
															"nativeSrc": "17157:4:20",
															"nodeType": "YulIdentifier",
															"src": "17157:4:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "17143:3:20",
														"nodeType": "YulIdentifier",
														"src": "17143:3:20"
													},
													"nativeSrc": "17143:19:20",
													"nodeType": "YulFunctionCall",
													"src": "17143:19:20"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "17133:2:20",
												"nodeType": "YulIdentifier",
												"src": "17133:2:20"
											},
											"nativeSrc": "17133:30:20",
											"nodeType": "YulFunctionCall",
											"src": "17133:30:20"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "17123:6:20",
												"nodeType": "YulIdentifier",
												"src": "17123:6:20"
											}
										]
									}
								]
							},
							"name": "update_byte_slice_dynamic32",
							"nativeSrc": "16776:393:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "16813:5:20",
									"nodeType": "YulTypedName",
									"src": "16813:5:20",
									"type": ""
								},
								{
									"name": "shiftBytes",
									"nativeSrc": "16820:10:20",
									"nodeType": "YulTypedName",
									"src": "16820:10:20",
									"type": ""
								},
								{
									"name": "toInsert",
									"nativeSrc": "16832:8:20",
									"nodeType": "YulTypedName",
									"src": "16832:8:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "16845:6:20",
									"nodeType": "YulTypedName",
									"src": "16845:6:20",
									"type": ""
								}
							],
							"src": "16776:393:20"
						},
						{
							"body": {
								"nativeSrc": "17207:28:20",
								"nodeType": "YulBlock",
								"src": "17207:28:20",
								"statements": [
									{
										"nativeSrc": "17217:12:20",
										"nodeType": "YulAssignment",
										"src": "17217:12:20",
										"value": {
											"name": "value",
											"nativeSrc": "17224:5:20",
											"nodeType": "YulIdentifier",
											"src": "17224:5:20"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "17217:3:20",
												"nodeType": "YulIdentifier",
												"src": "17217:3:20"
											}
										]
									}
								]
							},
							"name": "identity",
							"nativeSrc": "17175:60:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "17193:5:20",
									"nodeType": "YulTypedName",
									"src": "17193:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "17203:3:20",
									"nodeType": "YulTypedName",
									"src": "17203:3:20",
									"type": ""
								}
							],
							"src": "17175:60:20"
						},
						{
							"body": {
								"nativeSrc": "17301:82:20",
								"nodeType": "YulBlock",
								"src": "17301:82:20",
								"statements": [
									{
										"nativeSrc": "17311:66:20",
										"nodeType": "YulAssignment",
										"src": "17311:66:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "17369:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "17369:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nativeSrc": "17351:17:20",
																"nodeType": "YulIdentifier",
																"src": "17351:17:20"
															},
															"nativeSrc": "17351:24:20",
															"nodeType": "YulFunctionCall",
															"src": "17351:24:20"
														}
													],
													"functionName": {
														"name": "identity",
														"nativeSrc": "17342:8:20",
														"nodeType": "YulIdentifier",
														"src": "17342:8:20"
													},
													"nativeSrc": "17342:34:20",
													"nodeType": "YulFunctionCall",
													"src": "17342:34:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "17324:17:20",
												"nodeType": "YulIdentifier",
												"src": "17324:17:20"
											},
											"nativeSrc": "17324:53:20",
											"nodeType": "YulFunctionCall",
											"src": "17324:53:20"
										},
										"variableNames": [
											{
												"name": "converted",
												"nativeSrc": "17311:9:20",
												"nodeType": "YulIdentifier",
												"src": "17311:9:20"
											}
										]
									}
								]
							},
							"name": "convert_t_uint256_to_t_uint256",
							"nativeSrc": "17241:142:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "17281:5:20",
									"nodeType": "YulTypedName",
									"src": "17281:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "converted",
									"nativeSrc": "17291:9:20",
									"nodeType": "YulTypedName",
									"src": "17291:9:20",
									"type": ""
								}
							],
							"src": "17241:142:20"
						},
						{
							"body": {
								"nativeSrc": "17436:28:20",
								"nodeType": "YulBlock",
								"src": "17436:28:20",
								"statements": [
									{
										"nativeSrc": "17446:12:20",
										"nodeType": "YulAssignment",
										"src": "17446:12:20",
										"value": {
											"name": "value",
											"nativeSrc": "17453:5:20",
											"nodeType": "YulIdentifier",
											"src": "17453:5:20"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "17446:3:20",
												"nodeType": "YulIdentifier",
												"src": "17446:3:20"
											}
										]
									}
								]
							},
							"name": "prepare_store_t_uint256",
							"nativeSrc": "17389:75:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "17422:5:20",
									"nodeType": "YulTypedName",
									"src": "17422:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "17432:3:20",
									"nodeType": "YulTypedName",
									"src": "17432:3:20",
									"type": ""
								}
							],
							"src": "17389:75:20"
						},
						{
							"body": {
								"nativeSrc": "17546:193:20",
								"nodeType": "YulBlock",
								"src": "17546:193:20",
								"statements": [
									{
										"nativeSrc": "17556:63:20",
										"nodeType": "YulVariableDeclaration",
										"src": "17556:63:20",
										"value": {
											"arguments": [
												{
													"name": "value_0",
													"nativeSrc": "17611:7:20",
													"nodeType": "YulIdentifier",
													"src": "17611:7:20"
												}
											],
											"functionName": {
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "17580:30:20",
												"nodeType": "YulIdentifier",
												"src": "17580:30:20"
											},
											"nativeSrc": "17580:39:20",
											"nodeType": "YulFunctionCall",
											"src": "17580:39:20"
										},
										"variables": [
											{
												"name": "convertedValue_0",
												"nativeSrc": "17560:16:20",
												"nodeType": "YulTypedName",
												"src": "17560:16:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "17635:4:20",
													"nodeType": "YulIdentifier",
													"src": "17635:4:20"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nativeSrc": "17675:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "17675:4:20"
																}
															],
															"functionName": {
																"name": "sload",
																"nativeSrc": "17669:5:20",
																"nodeType": "YulIdentifier",
																"src": "17669:5:20"
															},
															"nativeSrc": "17669:11:20",
															"nodeType": "YulFunctionCall",
															"src": "17669:11:20"
														},
														{
															"name": "offset",
															"nativeSrc": "17682:6:20",
															"nodeType": "YulIdentifier",
															"src": "17682:6:20"
														},
														{
															"arguments": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "17714:16:20",
																	"nodeType": "YulIdentifier",
																	"src": "17714:16:20"
																}
															],
															"functionName": {
																"name": "prepare_store_t_uint256",
																"nativeSrc": "17690:23:20",
																"nodeType": "YulIdentifier",
																"src": "17690:23:20"
															},
															"nativeSrc": "17690:41:20",
															"nodeType": "YulFunctionCall",
															"src": "17690:41:20"
														}
													],
													"functionName": {
														"name": "update_byte_slice_dynamic32",
														"nativeSrc": "17641:27:20",
														"nodeType": "YulIdentifier",
														"src": "17641:27:20"
													},
													"nativeSrc": "17641:91:20",
													"nodeType": "YulFunctionCall",
													"src": "17641:91:20"
												}
											],
											"functionName": {
												"name": "sstore",
												"nativeSrc": "17628:6:20",
												"nodeType": "YulIdentifier",
												"src": "17628:6:20"
											},
											"nativeSrc": "17628:105:20",
											"nodeType": "YulFunctionCall",
											"src": "17628:105:20"
										},
										"nativeSrc": "17628:105:20",
										"nodeType": "YulExpressionStatement",
										"src": "17628:105:20"
									}
								]
							},
							"name": "update_storage_value_t_uint256_to_t_uint256",
							"nativeSrc": "17470:269:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "17523:4:20",
									"nodeType": "YulTypedName",
									"src": "17523:4:20",
									"type": ""
								},
								{
									"name": "offset",
									"nativeSrc": "17529:6:20",
									"nodeType": "YulTypedName",
									"src": "17529:6:20",
									"type": ""
								},
								{
									"name": "value_0",
									"nativeSrc": "17537:7:20",
									"nodeType": "YulTypedName",
									"src": "17537:7:20",
									"type": ""
								}
							],
							"src": "17470:269:20"
						},
						{
							"body": {
								"nativeSrc": "17794:24:20",
								"nodeType": "YulBlock",
								"src": "17794:24:20",
								"statements": [
									{
										"nativeSrc": "17804:8:20",
										"nodeType": "YulAssignment",
										"src": "17804:8:20",
										"value": {
											"kind": "number",
											"nativeSrc": "17811:1:20",
											"nodeType": "YulLiteral",
											"src": "17811:1:20",
											"type": "",
											"value": "0"
										},
										"variableNames": [
											{
												"name": "ret",
												"nativeSrc": "17804:3:20",
												"nodeType": "YulIdentifier",
												"src": "17804:3:20"
											}
										]
									}
								]
							},
							"name": "zero_value_for_split_t_uint256",
							"nativeSrc": "17745:73:20",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "ret",
									"nativeSrc": "17790:3:20",
									"nodeType": "YulTypedName",
									"src": "17790:3:20",
									"type": ""
								}
							],
							"src": "17745:73:20"
						},
						{
							"body": {
								"nativeSrc": "17877:136:20",
								"nodeType": "YulBlock",
								"src": "17877:136:20",
								"statements": [
									{
										"nativeSrc": "17887:46:20",
										"nodeType": "YulVariableDeclaration",
										"src": "17887:46:20",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "17901:30:20",
												"nodeType": "YulIdentifier",
												"src": "17901:30:20"
											},
											"nativeSrc": "17901:32:20",
											"nodeType": "YulFunctionCall",
											"src": "17901:32:20"
										},
										"variables": [
											{
												"name": "zero_0",
												"nativeSrc": "17891:6:20",
												"nodeType": "YulTypedName",
												"src": "17891:6:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "17986:4:20",
													"nodeType": "YulIdentifier",
													"src": "17986:4:20"
												},
												{
													"name": "offset",
													"nativeSrc": "17992:6:20",
													"nodeType": "YulIdentifier",
													"src": "17992:6:20"
												},
												{
													"name": "zero_0",
													"nativeSrc": "18000:6:20",
													"nodeType": "YulIdentifier",
													"src": "18000:6:20"
												}
											],
											"functionName": {
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "17942:43:20",
												"nodeType": "YulIdentifier",
												"src": "17942:43:20"
											},
											"nativeSrc": "17942:65:20",
											"nodeType": "YulFunctionCall",
											"src": "17942:65:20"
										},
										"nativeSrc": "17942:65:20",
										"nodeType": "YulExpressionStatement",
										"src": "17942:65:20"
									}
								]
							},
							"name": "storage_set_to_zero_t_uint256",
							"nativeSrc": "17824:189:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "17863:4:20",
									"nodeType": "YulTypedName",
									"src": "17863:4:20",
									"type": ""
								},
								{
									"name": "offset",
									"nativeSrc": "17869:6:20",
									"nodeType": "YulTypedName",
									"src": "17869:6:20",
									"type": ""
								}
							],
							"src": "17824:189:20"
						},
						{
							"body": {
								"nativeSrc": "18069:136:20",
								"nodeType": "YulBlock",
								"src": "18069:136:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "18136:63:20",
											"nodeType": "YulBlock",
											"src": "18136:63:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "18180:5:20",
																"nodeType": "YulIdentifier",
																"src": "18180:5:20"
															},
															{
																"kind": "number",
																"nativeSrc": "18187:1:20",
																"nodeType": "YulLiteral",
																"src": "18187:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "storage_set_to_zero_t_uint256",
															"nativeSrc": "18150:29:20",
															"nodeType": "YulIdentifier",
															"src": "18150:29:20"
														},
														"nativeSrc": "18150:39:20",
														"nodeType": "YulFunctionCall",
														"src": "18150:39:20"
													},
													"nativeSrc": "18150:39:20",
													"nodeType": "YulExpressionStatement",
													"src": "18150:39:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "start",
													"nativeSrc": "18089:5:20",
													"nodeType": "YulIdentifier",
													"src": "18089:5:20"
												},
												{
													"name": "end",
													"nativeSrc": "18096:3:20",
													"nodeType": "YulIdentifier",
													"src": "18096:3:20"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "18086:2:20",
												"nodeType": "YulIdentifier",
												"src": "18086:2:20"
											},
											"nativeSrc": "18086:14:20",
											"nodeType": "YulFunctionCall",
											"src": "18086:14:20"
										},
										"nativeSrc": "18079:120:20",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "18101:26:20",
											"nodeType": "YulBlock",
											"src": "18101:26:20",
											"statements": [
												{
													"nativeSrc": "18103:22:20",
													"nodeType": "YulAssignment",
													"src": "18103:22:20",
													"value": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "18116:5:20",
																"nodeType": "YulIdentifier",
																"src": "18116:5:20"
															},
															{
																"kind": "number",
																"nativeSrc": "18123:1:20",
																"nodeType": "YulLiteral",
																"src": "18123:1:20",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "18112:3:20",
															"nodeType": "YulIdentifier",
															"src": "18112:3:20"
														},
														"nativeSrc": "18112:13:20",
														"nodeType": "YulFunctionCall",
														"src": "18112:13:20"
													},
													"variableNames": [
														{
															"name": "start",
															"nativeSrc": "18103:5:20",
															"nodeType": "YulIdentifier",
															"src": "18103:5:20"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "18083:2:20",
											"nodeType": "YulBlock",
											"src": "18083:2:20",
											"statements": []
										},
										"src": "18079:120:20"
									}
								]
							},
							"name": "clear_storage_range_t_bytes1",
							"nativeSrc": "18019:186:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "start",
									"nativeSrc": "18057:5:20",
									"nodeType": "YulTypedName",
									"src": "18057:5:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "18064:3:20",
									"nodeType": "YulTypedName",
									"src": "18064:3:20",
									"type": ""
								}
							],
							"src": "18019:186:20"
						},
						{
							"body": {
								"nativeSrc": "18290:464:20",
								"nodeType": "YulBlock",
								"src": "18290:464:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "18316:431:20",
											"nodeType": "YulBlock",
											"src": "18316:431:20",
											"statements": [
												{
													"nativeSrc": "18330:54:20",
													"nodeType": "YulVariableDeclaration",
													"src": "18330:54:20",
													"value": {
														"arguments": [
															{
																"name": "array",
																"nativeSrc": "18378:5:20",
																"nodeType": "YulIdentifier",
																"src": "18378:5:20"
															}
														],
														"functionName": {
															"name": "array_dataslot_t_string_storage",
															"nativeSrc": "18346:31:20",
															"nodeType": "YulIdentifier",
															"src": "18346:31:20"
														},
														"nativeSrc": "18346:38:20",
														"nodeType": "YulFunctionCall",
														"src": "18346:38:20"
													},
													"variables": [
														{
															"name": "dataArea",
															"nativeSrc": "18334:8:20",
															"nodeType": "YulTypedName",
															"src": "18334:8:20",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "18397:63:20",
													"nodeType": "YulVariableDeclaration",
													"src": "18397:63:20",
													"value": {
														"arguments": [
															{
																"name": "dataArea",
																"nativeSrc": "18420:8:20",
																"nodeType": "YulIdentifier",
																"src": "18420:8:20"
															},
															{
																"arguments": [
																	{
																		"name": "startIndex",
																		"nativeSrc": "18448:10:20",
																		"nodeType": "YulIdentifier",
																		"src": "18448:10:20"
																	}
																],
																"functionName": {
																	"name": "divide_by_32_ceil",
																	"nativeSrc": "18430:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "18430:17:20"
																},
																"nativeSrc": "18430:29:20",
																"nodeType": "YulFunctionCall",
																"src": "18430:29:20"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "18416:3:20",
															"nodeType": "YulIdentifier",
															"src": "18416:3:20"
														},
														"nativeSrc": "18416:44:20",
														"nodeType": "YulFunctionCall",
														"src": "18416:44:20"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nativeSrc": "18401:11:20",
															"nodeType": "YulTypedName",
															"src": "18401:11:20",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "18617:27:20",
														"nodeType": "YulBlock",
														"src": "18617:27:20",
														"statements": [
															{
																"nativeSrc": "18619:23:20",
																"nodeType": "YulAssignment",
																"src": "18619:23:20",
																"value": {
																	"name": "dataArea",
																	"nativeSrc": "18634:8:20",
																	"nodeType": "YulIdentifier",
																	"src": "18634:8:20"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nativeSrc": "18619:11:20",
																		"nodeType": "YulIdentifier",
																		"src": "18619:11:20"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nativeSrc": "18601:10:20",
																"nodeType": "YulIdentifier",
																"src": "18601:10:20"
															},
															{
																"kind": "number",
																"nativeSrc": "18613:2:20",
																"nodeType": "YulLiteral",
																"src": "18613:2:20",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "18598:2:20",
															"nodeType": "YulIdentifier",
															"src": "18598:2:20"
														},
														"nativeSrc": "18598:18:20",
														"nodeType": "YulFunctionCall",
														"src": "18598:18:20"
													},
													"nativeSrc": "18595:49:20",
													"nodeType": "YulIf",
													"src": "18595:49:20"
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "deleteStart",
																"nativeSrc": "18686:11:20",
																"nodeType": "YulIdentifier",
																"src": "18686:11:20"
															},
															{
																"arguments": [
																	{
																		"name": "dataArea",
																		"nativeSrc": "18703:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "18703:8:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nativeSrc": "18731:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "18731:3:20"
																			}
																		],
																		"functionName": {
																			"name": "divide_by_32_ceil",
																			"nativeSrc": "18713:17:20",
																			"nodeType": "YulIdentifier",
																			"src": "18713:17:20"
																		},
																		"nativeSrc": "18713:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "18713:22:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "18699:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "18699:3:20"
																},
																"nativeSrc": "18699:37:20",
																"nodeType": "YulFunctionCall",
																"src": "18699:37:20"
															}
														],
														"functionName": {
															"name": "clear_storage_range_t_bytes1",
															"nativeSrc": "18657:28:20",
															"nodeType": "YulIdentifier",
															"src": "18657:28:20"
														},
														"nativeSrc": "18657:80:20",
														"nodeType": "YulFunctionCall",
														"src": "18657:80:20"
													},
													"nativeSrc": "18657:80:20",
													"nodeType": "YulExpressionStatement",
													"src": "18657:80:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nativeSrc": "18307:3:20",
													"nodeType": "YulIdentifier",
													"src": "18307:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "18312:2:20",
													"nodeType": "YulLiteral",
													"src": "18312:2:20",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "18304:2:20",
												"nodeType": "YulIdentifier",
												"src": "18304:2:20"
											},
											"nativeSrc": "18304:11:20",
											"nodeType": "YulFunctionCall",
											"src": "18304:11:20"
										},
										"nativeSrc": "18301:446:20",
										"nodeType": "YulIf",
										"src": "18301:446:20"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_t_string_storage",
							"nativeSrc": "18211:543:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "18266:5:20",
									"nodeType": "YulTypedName",
									"src": "18266:5:20",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "18273:3:20",
									"nodeType": "YulTypedName",
									"src": "18273:3:20",
									"type": ""
								},
								{
									"name": "startIndex",
									"nativeSrc": "18278:10:20",
									"nodeType": "YulTypedName",
									"src": "18278:10:20",
									"type": ""
								}
							],
							"src": "18211:543:20"
						},
						{
							"body": {
								"nativeSrc": "18823:54:20",
								"nodeType": "YulBlock",
								"src": "18823:54:20",
								"statements": [
									{
										"nativeSrc": "18833:37:20",
										"nodeType": "YulAssignment",
										"src": "18833:37:20",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nativeSrc": "18858:4:20",
													"nodeType": "YulIdentifier",
													"src": "18858:4:20"
												},
												{
													"name": "value",
													"nativeSrc": "18864:5:20",
													"nodeType": "YulIdentifier",
													"src": "18864:5:20"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "18854:3:20",
												"nodeType": "YulIdentifier",
												"src": "18854:3:20"
											},
											"nativeSrc": "18854:16:20",
											"nodeType": "YulFunctionCall",
											"src": "18854:16:20"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "18833:8:20",
												"nodeType": "YulIdentifier",
												"src": "18833:8:20"
											}
										]
									}
								]
							},
							"name": "shift_right_unsigned_dynamic",
							"nativeSrc": "18760:117:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nativeSrc": "18798:4:20",
									"nodeType": "YulTypedName",
									"src": "18798:4:20",
									"type": ""
								},
								{
									"name": "value",
									"nativeSrc": "18804:5:20",
									"nodeType": "YulTypedName",
									"src": "18804:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "18814:8:20",
									"nodeType": "YulTypedName",
									"src": "18814:8:20",
									"type": ""
								}
							],
							"src": "18760:117:20"
						},
						{
							"body": {
								"nativeSrc": "18934:118:20",
								"nodeType": "YulBlock",
								"src": "18934:118:20",
								"statements": [
									{
										"nativeSrc": "18944:68:20",
										"nodeType": "YulVariableDeclaration",
										"src": "18944:68:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "18993:1:20",
																	"nodeType": "YulLiteral",
																	"src": "18993:1:20",
																	"type": "",
																	"value": "8"
																},
																{
																	"name": "bytes",
																	"nativeSrc": "18996:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "18996:5:20"
																}
															],
															"functionName": {
																"name": "mul",
																"nativeSrc": "18989:3:20",
																"nodeType": "YulIdentifier",
																"src": "18989:3:20"
															},
															"nativeSrc": "18989:13:20",
															"nodeType": "YulFunctionCall",
															"src": "18989:13:20"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "19008:1:20",
																	"nodeType": "YulLiteral",
																	"src": "19008:1:20",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "19004:3:20",
																"nodeType": "YulIdentifier",
																"src": "19004:3:20"
															},
															"nativeSrc": "19004:6:20",
															"nodeType": "YulFunctionCall",
															"src": "19004:6:20"
														}
													],
													"functionName": {
														"name": "shift_right_unsigned_dynamic",
														"nativeSrc": "18960:28:20",
														"nodeType": "YulIdentifier",
														"src": "18960:28:20"
													},
													"nativeSrc": "18960:51:20",
													"nodeType": "YulFunctionCall",
													"src": "18960:51:20"
												}
											],
											"functionName": {
												"name": "not",
												"nativeSrc": "18956:3:20",
												"nodeType": "YulIdentifier",
												"src": "18956:3:20"
											},
											"nativeSrc": "18956:56:20",
											"nodeType": "YulFunctionCall",
											"src": "18956:56:20"
										},
										"variables": [
											{
												"name": "mask",
												"nativeSrc": "18948:4:20",
												"nodeType": "YulTypedName",
												"src": "18948:4:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "19021:25:20",
										"nodeType": "YulAssignment",
										"src": "19021:25:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "19035:4:20",
													"nodeType": "YulIdentifier",
													"src": "19035:4:20"
												},
												{
													"name": "mask",
													"nativeSrc": "19041:4:20",
													"nodeType": "YulIdentifier",
													"src": "19041:4:20"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "19031:3:20",
												"nodeType": "YulIdentifier",
												"src": "19031:3:20"
											},
											"nativeSrc": "19031:15:20",
											"nodeType": "YulFunctionCall",
											"src": "19031:15:20"
										},
										"variableNames": [
											{
												"name": "result",
												"nativeSrc": "19021:6:20",
												"nodeType": "YulIdentifier",
												"src": "19021:6:20"
											}
										]
									}
								]
							},
							"name": "mask_bytes_dynamic",
							"nativeSrc": "18883:169:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "18911:4:20",
									"nodeType": "YulTypedName",
									"src": "18911:4:20",
									"type": ""
								},
								{
									"name": "bytes",
									"nativeSrc": "18917:5:20",
									"nodeType": "YulTypedName",
									"src": "18917:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nativeSrc": "18927:6:20",
									"nodeType": "YulTypedName",
									"src": "18927:6:20",
									"type": ""
								}
							],
							"src": "18883:169:20"
						},
						{
							"body": {
								"nativeSrc": "19138:214:20",
								"nodeType": "YulBlock",
								"src": "19138:214:20",
								"statements": [
									{
										"nativeSrc": "19271:37:20",
										"nodeType": "YulAssignment",
										"src": "19271:37:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "19298:4:20",
													"nodeType": "YulIdentifier",
													"src": "19298:4:20"
												},
												{
													"name": "len",
													"nativeSrc": "19304:3:20",
													"nodeType": "YulIdentifier",
													"src": "19304:3:20"
												}
											],
											"functionName": {
												"name": "mask_bytes_dynamic",
												"nativeSrc": "19279:18:20",
												"nodeType": "YulIdentifier",
												"src": "19279:18:20"
											},
											"nativeSrc": "19279:29:20",
											"nodeType": "YulFunctionCall",
											"src": "19279:29:20"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "19271:4:20",
												"nodeType": "YulIdentifier",
												"src": "19271:4:20"
											}
										]
									},
									{
										"nativeSrc": "19317:29:20",
										"nodeType": "YulAssignment",
										"src": "19317:29:20",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "19328:4:20",
													"nodeType": "YulIdentifier",
													"src": "19328:4:20"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "19338:1:20",
															"nodeType": "YulLiteral",
															"src": "19338:1:20",
															"type": "",
															"value": "2"
														},
														{
															"name": "len",
															"nativeSrc": "19341:3:20",
															"nodeType": "YulIdentifier",
															"src": "19341:3:20"
														}
													],
													"functionName": {
														"name": "mul",
														"nativeSrc": "19334:3:20",
														"nodeType": "YulIdentifier",
														"src": "19334:3:20"
													},
													"nativeSrc": "19334:11:20",
													"nodeType": "YulFunctionCall",
													"src": "19334:11:20"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "19325:2:20",
												"nodeType": "YulIdentifier",
												"src": "19325:2:20"
											},
											"nativeSrc": "19325:21:20",
											"nodeType": "YulFunctionCall",
											"src": "19325:21:20"
										},
										"variableNames": [
											{
												"name": "used",
												"nativeSrc": "19317:4:20",
												"nodeType": "YulIdentifier",
												"src": "19317:4:20"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nativeSrc": "19057:295:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "19119:4:20",
									"nodeType": "YulTypedName",
									"src": "19119:4:20",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "19125:3:20",
									"nodeType": "YulTypedName",
									"src": "19125:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nativeSrc": "19133:4:20",
									"nodeType": "YulTypedName",
									"src": "19133:4:20",
									"type": ""
								}
							],
							"src": "19057:295:20"
						},
						{
							"body": {
								"nativeSrc": "19449:1303:20",
								"nodeType": "YulBlock",
								"src": "19449:1303:20",
								"statements": [
									{
										"nativeSrc": "19460:51:20",
										"nodeType": "YulVariableDeclaration",
										"src": "19460:51:20",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "19507:3:20",
													"nodeType": "YulIdentifier",
													"src": "19507:3:20"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "19474:32:20",
												"nodeType": "YulIdentifier",
												"src": "19474:32:20"
											},
											"nativeSrc": "19474:37:20",
											"nodeType": "YulFunctionCall",
											"src": "19474:37:20"
										},
										"variables": [
											{
												"name": "newLen",
												"nativeSrc": "19464:6:20",
												"nodeType": "YulTypedName",
												"src": "19464:6:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "19596:22:20",
											"nodeType": "YulBlock",
											"src": "19596:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "19598:16:20",
															"nodeType": "YulIdentifier",
															"src": "19598:16:20"
														},
														"nativeSrc": "19598:18:20",
														"nodeType": "YulFunctionCall",
														"src": "19598:18:20"
													},
													"nativeSrc": "19598:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "19598:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "19568:6:20",
													"nodeType": "YulIdentifier",
													"src": "19568:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "19576:18:20",
													"nodeType": "YulLiteral",
													"src": "19576:18:20",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "19565:2:20",
												"nodeType": "YulIdentifier",
												"src": "19565:2:20"
											},
											"nativeSrc": "19565:30:20",
											"nodeType": "YulFunctionCall",
											"src": "19565:30:20"
										},
										"nativeSrc": "19562:56:20",
										"nodeType": "YulIf",
										"src": "19562:56:20"
									},
									{
										"nativeSrc": "19628:52:20",
										"nodeType": "YulVariableDeclaration",
										"src": "19628:52:20",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "slot",
															"nativeSrc": "19674:4:20",
															"nodeType": "YulIdentifier",
															"src": "19674:4:20"
														}
													],
													"functionName": {
														"name": "sload",
														"nativeSrc": "19668:5:20",
														"nodeType": "YulIdentifier",
														"src": "19668:5:20"
													},
													"nativeSrc": "19668:11:20",
													"nodeType": "YulFunctionCall",
													"src": "19668:11:20"
												}
											],
											"functionName": {
												"name": "extract_byte_array_length",
												"nativeSrc": "19642:25:20",
												"nodeType": "YulIdentifier",
												"src": "19642:25:20"
											},
											"nativeSrc": "19642:38:20",
											"nodeType": "YulFunctionCall",
											"src": "19642:38:20"
										},
										"variables": [
											{
												"name": "oldLen",
												"nativeSrc": "19632:6:20",
												"nodeType": "YulTypedName",
												"src": "19632:6:20",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "19773:4:20",
													"nodeType": "YulIdentifier",
													"src": "19773:4:20"
												},
												{
													"name": "oldLen",
													"nativeSrc": "19779:6:20",
													"nodeType": "YulIdentifier",
													"src": "19779:6:20"
												},
												{
													"name": "newLen",
													"nativeSrc": "19787:6:20",
													"nodeType": "YulIdentifier",
													"src": "19787:6:20"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "19727:45:20",
												"nodeType": "YulIdentifier",
												"src": "19727:45:20"
											},
											"nativeSrc": "19727:67:20",
											"nodeType": "YulFunctionCall",
											"src": "19727:67:20"
										},
										"nativeSrc": "19727:67:20",
										"nodeType": "YulExpressionStatement",
										"src": "19727:67:20"
									},
									{
										"nativeSrc": "19804:18:20",
										"nodeType": "YulVariableDeclaration",
										"src": "19804:18:20",
										"value": {
											"kind": "number",
											"nativeSrc": "19821:1:20",
											"nodeType": "YulLiteral",
											"src": "19821:1:20",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nativeSrc": "19808:9:20",
												"nodeType": "YulTypedName",
												"src": "19808:9:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "19832:17:20",
										"nodeType": "YulAssignment",
										"src": "19832:17:20",
										"value": {
											"kind": "number",
											"nativeSrc": "19845:4:20",
											"nodeType": "YulLiteral",
											"src": "19845:4:20",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nativeSrc": "19832:9:20",
												"nodeType": "YulIdentifier",
												"src": "19832:9:20"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "19896:611:20",
													"nodeType": "YulBlock",
													"src": "19896:611:20",
													"statements": [
														{
															"nativeSrc": "19910:37:20",
															"nodeType": "YulVariableDeclaration",
															"src": "19910:37:20",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "19929:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "19929:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "19941:4:20",
																				"nodeType": "YulLiteral",
																				"src": "19941:4:20",
																				"type": "",
																				"value": "0x1f"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "19937:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "19937:3:20"
																		},
																		"nativeSrc": "19937:9:20",
																		"nodeType": "YulFunctionCall",
																		"src": "19937:9:20"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "19925:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "19925:3:20"
																},
																"nativeSrc": "19925:22:20",
																"nodeType": "YulFunctionCall",
																"src": "19925:22:20"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nativeSrc": "19914:7:20",
																	"nodeType": "YulTypedName",
																	"src": "19914:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "19961:51:20",
															"nodeType": "YulVariableDeclaration",
															"src": "19961:51:20",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "20007:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "20007:4:20"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_string_storage",
																	"nativeSrc": "19975:31:20",
																	"nodeType": "YulIdentifier",
																	"src": "19975:31:20"
																},
																"nativeSrc": "19975:37:20",
																"nodeType": "YulFunctionCall",
																"src": "19975:37:20"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nativeSrc": "19965:6:20",
																	"nodeType": "YulTypedName",
																	"src": "19965:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "20025:10:20",
															"nodeType": "YulVariableDeclaration",
															"src": "20025:10:20",
															"value": {
																"kind": "number",
																"nativeSrc": "20034:1:20",
																"nodeType": "YulLiteral",
																"src": "20034:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "20029:1:20",
																	"nodeType": "YulTypedName",
																	"src": "20029:1:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "20093:163:20",
																"nodeType": "YulBlock",
																"src": "20093:163:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "20118:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "20118:6:20"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "20136:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "20136:3:20"
																								},
																								{
																									"name": "srcOffset",
																									"nativeSrc": "20141:9:20",
																									"nodeType": "YulIdentifier",
																									"src": "20141:9:20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "20132:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "20132:3:20"
																							},
																							"nativeSrc": "20132:19:20",
																							"nodeType": "YulFunctionCall",
																							"src": "20132:19:20"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "20126:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "20126:5:20"
																					},
																					"nativeSrc": "20126:26:20",
																					"nodeType": "YulFunctionCall",
																					"src": "20126:26:20"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "20111:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "20111:6:20"
																			},
																			"nativeSrc": "20111:42:20",
																			"nodeType": "YulFunctionCall",
																			"src": "20111:42:20"
																		},
																		"nativeSrc": "20111:42:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "20111:42:20"
																	},
																	{
																		"nativeSrc": "20170:24:20",
																		"nodeType": "YulAssignment",
																		"src": "20170:24:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "20184:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "20184:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "20192:1:20",
																					"nodeType": "YulLiteral",
																					"src": "20192:1:20",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "20180:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "20180:3:20"
																			},
																			"nativeSrc": "20180:14:20",
																			"nodeType": "YulFunctionCall",
																			"src": "20180:14:20"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nativeSrc": "20170:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "20170:6:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "20211:31:20",
																		"nodeType": "YulAssignment",
																		"src": "20211:31:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nativeSrc": "20228:9:20",
																					"nodeType": "YulIdentifier",
																					"src": "20228:9:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "20239:2:20",
																					"nodeType": "YulLiteral",
																					"src": "20239:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "20224:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "20224:3:20"
																			},
																			"nativeSrc": "20224:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "20224:18:20"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nativeSrc": "20211:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "20211:9:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "20059:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "20059:1:20"
																	},
																	{
																		"name": "loopEnd",
																		"nativeSrc": "20062:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "20062:7:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "20056:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "20056:2:20"
																},
																"nativeSrc": "20056:14:20",
																"nodeType": "YulFunctionCall",
																"src": "20056:14:20"
															},
															"nativeSrc": "20048:208:20",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "20071:21:20",
																"nodeType": "YulBlock",
																"src": "20071:21:20",
																"statements": [
																	{
																		"nativeSrc": "20073:17:20",
																		"nodeType": "YulAssignment",
																		"src": "20073:17:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "20082:1:20",
																					"nodeType": "YulIdentifier",
																					"src": "20082:1:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "20085:4:20",
																					"nodeType": "YulLiteral",
																					"src": "20085:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "20078:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "20078:3:20"
																			},
																			"nativeSrc": "20078:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "20078:12:20"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "20073:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "20073:1:20"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "20052:3:20",
																"nodeType": "YulBlock",
																"src": "20052:3:20",
																"statements": []
															},
															"src": "20048:208:20"
														},
														{
															"body": {
																"nativeSrc": "20292:156:20",
																"nodeType": "YulBlock",
																"src": "20292:156:20",
																"statements": [
																	{
																		"nativeSrc": "20310:43:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "20310:43:20",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "20337:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "20337:3:20"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "20342:9:20",
																							"nodeType": "YulIdentifier",
																							"src": "20342:9:20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "20333:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "20333:3:20"
																					},
																					"nativeSrc": "20333:19:20",
																					"nodeType": "YulFunctionCall",
																					"src": "20333:19:20"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "20327:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "20327:5:20"
																			},
																			"nativeSrc": "20327:26:20",
																			"nodeType": "YulFunctionCall",
																			"src": "20327:26:20"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nativeSrc": "20314:9:20",
																				"nodeType": "YulTypedName",
																				"src": "20314:9:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "20377:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "20377:6:20"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nativeSrc": "20404:9:20",
																							"nodeType": "YulIdentifier",
																							"src": "20404:9:20"
																						},
																						{
																							"arguments": [
																								{
																									"name": "newLen",
																									"nativeSrc": "20419:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "20419:6:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "20427:4:20",
																									"nodeType": "YulLiteral",
																									"src": "20427:4:20",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nativeSrc": "20415:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "20415:3:20"
																							},
																							"nativeSrc": "20415:17:20",
																							"nodeType": "YulFunctionCall",
																							"src": "20415:17:20"
																						}
																					],
																					"functionName": {
																						"name": "mask_bytes_dynamic",
																						"nativeSrc": "20385:18:20",
																						"nodeType": "YulIdentifier",
																						"src": "20385:18:20"
																					},
																					"nativeSrc": "20385:48:20",
																					"nodeType": "YulFunctionCall",
																					"src": "20385:48:20"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "20370:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "20370:6:20"
																			},
																			"nativeSrc": "20370:64:20",
																			"nodeType": "YulFunctionCall",
																			"src": "20370:64:20"
																		},
																		"nativeSrc": "20370:64:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "20370:64:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nativeSrc": "20275:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "20275:7:20"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "20284:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "20284:6:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "20272:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "20272:2:20"
																},
																"nativeSrc": "20272:19:20",
																"nodeType": "YulFunctionCall",
																"src": "20272:19:20"
															},
															"nativeSrc": "20269:179:20",
															"nodeType": "YulIf",
															"src": "20269:179:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "20468:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "20468:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "newLen",
																						"nativeSrc": "20482:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "20482:6:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "20490:1:20",
																						"nodeType": "YulLiteral",
																						"src": "20490:1:20",
																						"type": "",
																						"value": "2"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "20478:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "20478:3:20"
																				},
																				"nativeSrc": "20478:14:20",
																				"nodeType": "YulFunctionCall",
																				"src": "20478:14:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "20494:1:20",
																				"nodeType": "YulLiteral",
																				"src": "20494:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "20474:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "20474:3:20"
																		},
																		"nativeSrc": "20474:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "20474:22:20"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "20461:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "20461:6:20"
																},
																"nativeSrc": "20461:36:20",
																"nodeType": "YulFunctionCall",
																"src": "20461:36:20"
															},
															"nativeSrc": "20461:36:20",
															"nodeType": "YulExpressionStatement",
															"src": "20461:36:20"
														}
													]
												},
												"nativeSrc": "19889:618:20",
												"nodeType": "YulCase",
												"src": "19889:618:20",
												"value": {
													"kind": "number",
													"nativeSrc": "19894:1:20",
													"nodeType": "YulLiteral",
													"src": "19894:1:20",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "20524:222:20",
													"nodeType": "YulBlock",
													"src": "20524:222:20",
													"statements": [
														{
															"nativeSrc": "20538:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "20538:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "20551:1:20",
																"nodeType": "YulLiteral",
																"src": "20551:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "20542:5:20",
																	"nodeType": "YulTypedName",
																	"src": "20542:5:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "20575:67:20",
																"nodeType": "YulBlock",
																"src": "20575:67:20",
																"statements": [
																	{
																		"nativeSrc": "20593:35:20",
																		"nodeType": "YulAssignment",
																		"src": "20593:35:20",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "20612:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "20612:3:20"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "20617:9:20",
																							"nodeType": "YulIdentifier",
																							"src": "20617:9:20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "20608:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "20608:3:20"
																					},
																					"nativeSrc": "20608:19:20",
																					"nodeType": "YulFunctionCall",
																					"src": "20608:19:20"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "20602:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "20602:5:20"
																			},
																			"nativeSrc": "20602:26:20",
																			"nodeType": "YulFunctionCall",
																			"src": "20602:26:20"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "20593:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "20593:5:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nativeSrc": "20568:6:20",
																"nodeType": "YulIdentifier",
																"src": "20568:6:20"
															},
															"nativeSrc": "20565:77:20",
															"nodeType": "YulIf",
															"src": "20565:77:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "20662:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "20662:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "20721:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "20721:5:20"
																			},
																			{
																				"name": "newLen",
																				"nativeSrc": "20728:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "20728:6:20"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nativeSrc": "20668:52:20",
																			"nodeType": "YulIdentifier",
																			"src": "20668:52:20"
																		},
																		"nativeSrc": "20668:67:20",
																		"nodeType": "YulFunctionCall",
																		"src": "20668:67:20"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "20655:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "20655:6:20"
																},
																"nativeSrc": "20655:81:20",
																"nodeType": "YulFunctionCall",
																"src": "20655:81:20"
															},
															"nativeSrc": "20655:81:20",
															"nodeType": "YulExpressionStatement",
															"src": "20655:81:20"
														}
													]
												},
												"nativeSrc": "20516:230:20",
												"nodeType": "YulCase",
												"src": "20516:230:20",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "19869:6:20",
													"nodeType": "YulIdentifier",
													"src": "19869:6:20"
												},
												{
													"kind": "number",
													"nativeSrc": "19877:2:20",
													"nodeType": "YulLiteral",
													"src": "19877:2:20",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "19866:2:20",
												"nodeType": "YulIdentifier",
												"src": "19866:2:20"
											},
											"nativeSrc": "19866:14:20",
											"nodeType": "YulFunctionCall",
											"src": "19866:14:20"
										},
										"nativeSrc": "19859:887:20",
										"nodeType": "YulSwitch",
										"src": "19859:887:20"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nativeSrc": "19357:1395:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "19438:4:20",
									"nodeType": "YulTypedName",
									"src": "19438:4:20",
									"type": ""
								},
								{
									"name": "src",
									"nativeSrc": "19444:3:20",
									"nodeType": "YulTypedName",
									"src": "19444:3:20",
									"type": ""
								}
							],
							"src": "19357:1395:20"
						},
						{
							"body": {
								"nativeSrc": "20884:206:20",
								"nodeType": "YulBlock",
								"src": "20884:206:20",
								"statements": [
									{
										"nativeSrc": "20894:26:20",
										"nodeType": "YulAssignment",
										"src": "20894:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "20906:9:20",
													"nodeType": "YulIdentifier",
													"src": "20906:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "20917:2:20",
													"nodeType": "YulLiteral",
													"src": "20917:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "20902:3:20",
												"nodeType": "YulIdentifier",
												"src": "20902:3:20"
											},
											"nativeSrc": "20902:18:20",
											"nodeType": "YulFunctionCall",
											"src": "20902:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "20894:4:20",
												"nodeType": "YulIdentifier",
												"src": "20894:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "20974:6:20",
													"nodeType": "YulIdentifier",
													"src": "20974:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "20987:9:20",
															"nodeType": "YulIdentifier",
															"src": "20987:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "20998:1:20",
															"nodeType": "YulLiteral",
															"src": "20998:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "20983:3:20",
														"nodeType": "YulIdentifier",
														"src": "20983:3:20"
													},
													"nativeSrc": "20983:17:20",
													"nodeType": "YulFunctionCall",
													"src": "20983:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "20930:43:20",
												"nodeType": "YulIdentifier",
												"src": "20930:43:20"
											},
											"nativeSrc": "20930:71:20",
											"nodeType": "YulFunctionCall",
											"src": "20930:71:20"
										},
										"nativeSrc": "20930:71:20",
										"nodeType": "YulExpressionStatement",
										"src": "20930:71:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "21055:6:20",
													"nodeType": "YulIdentifier",
													"src": "21055:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "21068:9:20",
															"nodeType": "YulIdentifier",
															"src": "21068:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "21079:2:20",
															"nodeType": "YulLiteral",
															"src": "21079:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "21064:3:20",
														"nodeType": "YulIdentifier",
														"src": "21064:3:20"
													},
													"nativeSrc": "21064:18:20",
													"nodeType": "YulFunctionCall",
													"src": "21064:18:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "21011:43:20",
												"nodeType": "YulIdentifier",
												"src": "21011:43:20"
											},
											"nativeSrc": "21011:72:20",
											"nodeType": "YulFunctionCall",
											"src": "21011:72:20"
										},
										"nativeSrc": "21011:72:20",
										"nodeType": "YulExpressionStatement",
										"src": "21011:72:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
							"nativeSrc": "20758:332:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "20848:9:20",
									"nodeType": "YulTypedName",
									"src": "20848:9:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "20860:6:20",
									"nodeType": "YulTypedName",
									"src": "20860:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "20868:6:20",
									"nodeType": "YulTypedName",
									"src": "20868:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "20879:4:20",
									"nodeType": "YulTypedName",
									"src": "20879:4:20",
									"type": ""
								}
							],
							"src": "20758:332:20"
						},
						{
							"body": {
								"nativeSrc": "21124:152:20",
								"nodeType": "YulBlock",
								"src": "21124:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "21141:1:20",
													"nodeType": "YulLiteral",
													"src": "21141:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "21144:77:20",
													"nodeType": "YulLiteral",
													"src": "21144:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "21134:6:20",
												"nodeType": "YulIdentifier",
												"src": "21134:6:20"
											},
											"nativeSrc": "21134:88:20",
											"nodeType": "YulFunctionCall",
											"src": "21134:88:20"
										},
										"nativeSrc": "21134:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "21134:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "21238:1:20",
													"nodeType": "YulLiteral",
													"src": "21238:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "21241:4:20",
													"nodeType": "YulLiteral",
													"src": "21241:4:20",
													"type": "",
													"value": "0x12"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "21231:6:20",
												"nodeType": "YulIdentifier",
												"src": "21231:6:20"
											},
											"nativeSrc": "21231:15:20",
											"nodeType": "YulFunctionCall",
											"src": "21231:15:20"
										},
										"nativeSrc": "21231:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "21231:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "21262:1:20",
													"nodeType": "YulLiteral",
													"src": "21262:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "21265:4:20",
													"nodeType": "YulLiteral",
													"src": "21265:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "21255:6:20",
												"nodeType": "YulIdentifier",
												"src": "21255:6:20"
											},
											"nativeSrc": "21255:15:20",
											"nodeType": "YulFunctionCall",
											"src": "21255:15:20"
										},
										"nativeSrc": "21255:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "21255:15:20"
									}
								]
							},
							"name": "panic_error_0x12",
							"nativeSrc": "21096:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "21096:180:20"
						}
					]
				},
				"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_string_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n}\n",
				"id": 20,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x109 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0xEACABE14 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x34D JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x285 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x20F JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x18B JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x127 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x122 SWAP2 SWAP1 PUSH2 0x1A22 JUMP JUMPDEST PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x145 PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1B0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0x1C0A JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x1C48 JUMP JUMPDEST PUSH2 0x489 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0x1C48 JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x229 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x224 SWAP2 SWAP1 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x5B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x247 PUSH2 0x66E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x251 PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26F PUSH2 0x6A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27C SWAP2 SWAP1 PUSH2 0x1B0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x29F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29A SWAP2 SWAP1 PUSH2 0x1D15 JUMP JUMPDEST PUSH2 0x739 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST PUSH2 0x74F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D2 SWAP2 SWAP1 PUSH2 0x1B5D JUMP JUMPDEST PUSH2 0x774 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E4 SWAP2 SWAP1 PUSH2 0x1B0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x302 SWAP2 SWAP1 PUSH2 0x1EFF JUMP JUMPDEST PUSH2 0x87F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x314 SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x337 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x1FDB JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x344 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x367 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x94D JUMP JUMPDEST STOP JUMPDEST PUSH0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x3C2 JUMPI POP PUSH2 0x3C1 DUP3 PUSH2 0x9D1 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 SLOAD PUSH2 0x3D7 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x403 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x44E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x425 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x44E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x431 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x462 DUP3 PUSH2 0xAB2 JUMP JUMPDEST POP PUSH2 0x46C DUP3 PUSH2 0xB38 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x485 DUP3 DUP3 PUSH2 0x480 PUSH2 0xB71 JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F9 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F0 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x50C DUP4 DUP4 PUSH2 0x507 PUSH2 0xB71 JUMP JUMPDEST PUSH2 0xB8A JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x582 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x579 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2092 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x5A2 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x74F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x5B1 DUP3 PUSH2 0xAB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x629 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x620 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x676 PUSH2 0xD95 JUMP JUMPDEST PUSH2 0x67F PUSH0 PUSH2 0xE1C JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x7 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x6B8 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6E4 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x72F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x706 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x72F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x712 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x74B PUSH2 0x744 PUSH2 0xB71 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xEDF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x75A DUP5 DUP5 DUP5 PUSH2 0x489 JUMP JUMPDEST PUSH2 0x76E PUSH2 0x765 PUSH2 0xB71 JUMP JUMPDEST DUP6 DUP6 DUP6 DUP6 PUSH2 0x1048 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x77F DUP3 PUSH2 0xAB2 JUMP JUMPDEST POP PUSH0 PUSH1 0x6 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH2 0x79D SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7C9 SWAP1 PUSH2 0x2062 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x814 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7EB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x814 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7F7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH0 PUSH2 0x824 PUSH2 0x11F4 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD SUB PUSH2 0x838 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x87A JUMP JUMPDEST PUSH0 DUP3 MLOAD GT ISZERO PUSH2 0x86C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x854 SWAP3 SWAP2 SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x87A JUMP JUMPDEST PUSH2 0x875 DUP5 PUSH2 0x120A JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x916 PUSH2 0xD95 JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x929 SWAP1 PUSH2 0x2151 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0x939 DUP5 DUP3 PUSH2 0x1270 JUMP JUMPDEST PUSH2 0x943 DUP2 DUP5 PUSH2 0x1363 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x955 PUSH2 0xD95 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9C5 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BC SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9CE DUP2 PUSH2 0xE1C JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xA9B JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0xAAB JUMPI POP PUSH2 0xAAA DUP3 PUSH2 0x13BD JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xABD DUP4 PUSH2 0x1426 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB2F JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB26 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x4 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB85 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x145F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB95 DUP5 PUSH2 0x1426 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD6 JUMPI PUSH2 0xBD5 DUP2 DUP5 DUP7 PUSH2 0x161E JUMP JUMPDEST JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC61 JUMPI PUSH2 0xC15 PUSH0 DUP6 PUSH0 DUP1 PUSH2 0x145F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCE0 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD9D PUSH2 0xB71 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDBB PUSH2 0x681 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE1A JUMPI PUSH2 0xDDE PUSH2 0xB71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE11 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x7 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF4F JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF46 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x103B SWAP2 SWAP1 PUSH2 0x1A67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x11ED JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 DUP7 DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10A6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21EA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x10E1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10DE SWAP2 SWAP1 PUSH2 0x2248 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1162 JUMPI RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x110F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1114 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH0 DUP2 MLOAD SUB PUSH2 0x115A JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1151 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x11EB JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11E2 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1215 DUP3 PUSH2 0xAB2 JUMP JUMPDEST POP PUSH0 PUSH2 0x121F PUSH2 0x11F4 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT PUSH2 0x123D JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x1268 JUMP JUMPDEST DUP1 PUSH2 0x1247 DUP5 PUSH2 0x16E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1258 SWAP3 SWAP2 SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x12E0 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D7 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x12EC DUP4 DUP4 PUSH0 PUSH2 0xB8A JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x135E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1355 SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x6 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SWAP1 DUP2 PUSH2 0x1381 SWAP2 SWAP1 PUSH2 0x2410 JUMP JUMPDEST POP PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 DUP3 PUSH1 0x40 MLOAD PUSH2 0x13B1 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x2 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1497 JUMPI POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x15C9 JUMPI PUSH0 PUSH2 0x14A6 DUP5 PUSH2 0xAB2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1510 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1523 JUMPI POP PUSH2 0x1521 DUP2 DUP5 PUSH2 0x87F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1565 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x155C SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x15C7 JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1629 DUP4 DUP4 DUP4 PUSH2 0x17AB JUMP JUMPDEST PUSH2 0x16DC JUMPI PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x169D JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1694 SWAP2 SWAP1 PUSH2 0x1CD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16D3 SWAP3 SWAP2 SWAP1 PUSH2 0x24DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH1 0x1 PUSH2 0x16EF DUP5 PUSH2 0x186B JUMP JUMPDEST ADD SWAP1 POP PUSH0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x170D JUMPI PUSH2 0x170C PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x173F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 DUP3 PUSH1 0x20 DUP4 ADD ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x17A0 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1795 JUMPI PUSH2 0x1794 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH0 DUP6 SUB PUSH2 0x174C JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1862 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1823 JUMPI POP PUSH2 0x1822 DUP5 DUP5 PUSH2 0x87F JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1861 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1849 DUP4 PUSH2 0xB38 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x18C7 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x18BD JUMPI PUSH2 0x18BC PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1904 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x18FA JUMPI PUSH2 0x18F9 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1933 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1929 JUMPI PUSH2 0x1928 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x195C JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1952 JUMPI PUSH2 0x1951 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1981 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1977 JUMPI PUSH2 0x1976 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x19A4 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x199A JUMPI PUSH2 0x1999 PUSH2 0x2506 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x19B3 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A01 DUP2 PUSH2 0x19CD JUMP JUMPDEST DUP2 EQ PUSH2 0x1A0B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A1C DUP2 PUSH2 0x19F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A37 JUMPI PUSH2 0x1A36 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1A44 DUP5 DUP3 DUP6 ADD PUSH2 0x1A0E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A61 DUP2 PUSH2 0x1A4D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A7A PUSH0 DUP4 ADD DUP5 PUSH2 0x1A58 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1AB7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A9C JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1ADC DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x1AE6 DUP2 DUP6 PUSH2 0x1A8A JUMP JUMPDEST SWAP4 POP PUSH2 0x1AF6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A9A JUMP JUMPDEST PUSH2 0x1AFF DUP2 PUSH2 0x1AC2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1B22 DUP2 DUP5 PUSH2 0x1AD2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B3C DUP2 PUSH2 0x1B2A JUMP JUMPDEST DUP2 EQ PUSH2 0x1B46 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B57 DUP2 PUSH2 0x1B33 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B72 JUMPI PUSH2 0x1B71 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1B7F DUP5 DUP3 DUP6 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1BB1 DUP3 PUSH2 0x1B88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC1 DUP2 PUSH2 0x1BA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BDA PUSH0 DUP4 ADD DUP5 PUSH2 0x1BB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BE9 DUP2 PUSH2 0x1BA7 JUMP JUMPDEST DUP2 EQ PUSH2 0x1BF3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C04 DUP2 PUSH2 0x1BE0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C20 JUMPI PUSH2 0x1C1F PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C2D DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1C3E DUP6 DUP3 DUP7 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C5F JUMPI PUSH2 0x1C5E PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C6C DUP7 DUP3 DUP8 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1C7D DUP7 DUP3 DUP8 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1C8E DUP7 DUP3 DUP8 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CAD JUMPI PUSH2 0x1CAC PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1CBA DUP5 DUP3 DUP6 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CCC DUP2 PUSH2 0x1B2A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CE5 PUSH0 DUP4 ADD DUP5 PUSH2 0x1CC3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CF4 DUP2 PUSH2 0x1A4D JUMP JUMPDEST DUP2 EQ PUSH2 0x1CFE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D0F DUP2 PUSH2 0x1CEB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D2B JUMPI PUSH2 0x1D2A PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1D38 DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D49 DUP6 DUP3 DUP7 ADD PUSH2 0x1D01 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x1D91 DUP3 PUSH2 0x1AC2 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1DB0 JUMPI PUSH2 0x1DAF PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1DC2 PUSH2 0x19BC JUMP JUMPDEST SWAP1 POP PUSH2 0x1DCE DUP3 DUP3 PUSH2 0x1D88 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1DED JUMPI PUSH2 0x1DEC PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST PUSH2 0x1DF6 DUP3 PUSH2 0x1AC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1E23 PUSH2 0x1E1E DUP5 PUSH2 0x1DD3 JUMP JUMPDEST PUSH2 0x1DB9 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1E3F JUMPI PUSH2 0x1E3E PUSH2 0x1D57 JUMP JUMPDEST JUMPDEST PUSH2 0x1E4A DUP5 DUP3 DUP6 PUSH2 0x1E03 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E66 JUMPI PUSH2 0x1E65 PUSH2 0x1D53 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1E76 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1E11 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E97 JUMPI PUSH2 0x1E96 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EA4 DUP8 DUP3 DUP9 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1EB5 DUP8 DUP3 DUP9 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1EC6 DUP8 DUP3 DUP9 ADD PUSH2 0x1B49 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EE7 JUMPI PUSH2 0x1EE6 PUSH2 0x19C9 JUMP JUMPDEST JUMPDEST PUSH2 0x1EF3 DUP8 DUP3 DUP9 ADD PUSH2 0x1E52 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F15 JUMPI PUSH2 0x1F14 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F22 DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F33 DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1F57 JUMPI PUSH2 0x1F56 PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST PUSH2 0x1F60 DUP3 PUSH2 0x1AC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1F7F PUSH2 0x1F7A DUP5 PUSH2 0x1F3D JUMP JUMPDEST PUSH2 0x1DB9 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1F9B JUMPI PUSH2 0x1F9A PUSH2 0x1D57 JUMP JUMPDEST JUMPDEST PUSH2 0x1FA6 DUP5 DUP3 DUP6 PUSH2 0x1E03 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1FC2 JUMPI PUSH2 0x1FC1 PUSH2 0x1D53 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1FD2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1F6D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FF1 JUMPI PUSH2 0x1FF0 PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FFE DUP6 DUP3 DUP7 ADD PUSH2 0x1BF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x201F JUMPI PUSH2 0x201E PUSH2 0x19C9 JUMP JUMPDEST JUMPDEST PUSH2 0x202B DUP6 DUP3 DUP7 ADD PUSH2 0x1FAE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2079 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x208C JUMPI PUSH2 0x208B PUSH2 0x2035 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x20A5 PUSH0 DUP4 ADD DUP7 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x20B2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0x20BF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1BB8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x20DB DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x20E5 DUP2 DUP6 PUSH2 0x20C7 JUMP JUMPDEST SWAP4 POP PUSH2 0x20F5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A9A JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x210C DUP3 DUP6 PUSH2 0x20D1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2118 DUP3 DUP5 PUSH2 0x20D1 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x215B DUP3 PUSH2 0x1B2A JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x218D JUMPI PUSH2 0x218C PUSH2 0x2124 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x21BC DUP3 PUSH2 0x2198 JUMP JUMPDEST PUSH2 0x21C6 DUP2 DUP6 PUSH2 0x21A2 JUMP JUMPDEST SWAP4 POP PUSH2 0x21D6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A9A JUMP JUMPDEST PUSH2 0x21DF DUP2 PUSH2 0x1AC2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x21FD PUSH0 DUP4 ADD DUP8 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x220A PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x2217 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1CC3 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2229 DUP2 DUP5 PUSH2 0x21B2 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2242 DUP2 PUSH2 0x19F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x225D JUMPI PUSH2 0x225C PUSH2 0x19C5 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x226A DUP5 DUP3 DUP6 ADD PUSH2 0x2234 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x22CF PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2294 JUMP JUMPDEST PUSH2 0x22D9 DUP7 DUP4 PUSH2 0x2294 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2314 PUSH2 0x230F PUSH2 0x230A DUP5 PUSH2 0x1B2A JUMP JUMPDEST PUSH2 0x22F1 JUMP JUMPDEST PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x232D DUP4 PUSH2 0x22FA JUMP JUMPDEST PUSH2 0x2341 PUSH2 0x2339 DUP3 PUSH2 0x231B JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x22A0 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x2355 PUSH2 0x2349 JUMP JUMPDEST PUSH2 0x2360 DUP2 DUP5 DUP5 PUSH2 0x2324 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2383 JUMPI PUSH2 0x2378 PUSH0 DUP3 PUSH2 0x234D JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2366 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x23C8 JUMPI PUSH2 0x2399 DUP2 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x23A2 DUP5 PUSH2 0x2285 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x23B1 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x23C5 PUSH2 0x23BD DUP6 PUSH2 0x2285 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x2365 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x23E8 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x23CD JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2400 DUP4 DUP4 PUSH2 0x23D9 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2419 DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2432 JUMPI PUSH2 0x2431 PUSH2 0x1D5B JUMP JUMPDEST JUMPDEST PUSH2 0x243C DUP3 SLOAD PUSH2 0x2062 JUMP JUMPDEST PUSH2 0x2447 DUP3 DUP3 DUP6 PUSH2 0x2387 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2478 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x2466 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x2470 DUP6 DUP3 PUSH2 0x23F5 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x24D7 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x2486 DUP7 PUSH2 0x2273 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x24AD JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2488 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x24CA JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x24C6 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x23D9 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x24F2 PUSH0 DUP4 ADD DUP6 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x24FF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CC3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD PUSH12 0xE9930617EF0BF09C87A014F7 PUSH32 0x4AA09785FF7E2F83D13ED49608B2F08EE164736F6C6343000818003300000000 ",
		"sourceMap": "248:475:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;961:207:8;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2263:89:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3299:154;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3152:113;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3852:578;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4464:132;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2103:118;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1861:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:0;;;:::i;:::-;;1638:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2394:93:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3487:144;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4630:233;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1210:593:8;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3665:153:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;458:263:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;961:207:8;1063:4;816:10;809:18;;1086:35;;;:11;:35;;;;:75;;;;1125:36;1149:11;1125:23;:36::i;:::-;1086:75;1079:82;;961:207;;;:::o;2263:89:5:-;2308:13;2340:5;2333:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2263:89;:::o;3299:154::-;3366:7;3385:22;3399:7;3385:13;:22::i;:::-;;3425:21;3438:7;3425:12;:21::i;:::-;3418:28;;3299:154;;;:::o;3152:113::-;3223:35;3232:2;3236:7;3245:12;:10;:12::i;:::-;3223:8;:35::i;:::-;3152:113;;:::o;3852:578::-;3960:1;3946:16;;:2;:16;;;3942:87;;4015:1;3985:33;;;;;;;;;;;:::i;:::-;;;;;;;;3942:87;4247:21;4271:34;4279:2;4283:7;4292:12;:10;:12::i;:::-;4271:7;:34::i;:::-;4247:58;;4336:4;4319:21;;:13;:21;;;4315:109;;4384:4;4390:7;4399:13;4363:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;4315:109;3932:498;3852:578;;;:::o;4464:132::-;4550:39;4567:4;4573:2;4577:7;4550:39;;;;;;;;;;;;:16;:39::i;:::-;4464:132;;;:::o;2103:118::-;2166:7;2192:22;2206:7;2192:13;:22::i;:::-;2185:29;;2103:118;;;:::o;1861:208::-;1924:7;1964:1;1947:19;;:5;:19;;;1943:87;;2016:1;1989:30;;;;;;;;;;;:::i;:::-;;;;;;;;1943:87;2046:9;:16;2056:5;2046:16;;;;;;;;;;;;;;;;2039:23;;1861:208;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1638:85::-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2394:93:5:-;2441:13;2473:7;2466:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2394:93;:::o;3487:144::-;3572:52;3591:12;:10;:12::i;:::-;3605:8;3615;3572:18;:52::i;:::-;3487:144;;:::o;4630:233::-;4743:31;4756:4;4762:2;4766:7;4743:12;:31::i;:::-;4784:72;4818:12;:10;:12::i;:::-;4832:4;4838:2;4842:7;4851:4;4784:33;:72::i;:::-;4630:233;;;;:::o;1210:593:8:-;1283:13;1308:22;1322:7;1308:13;:22::i;:::-;;1341:23;1367:10;:19;1378:7;1367:19;;;;;;;;;;;1341:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1396:18;1417:10;:8;:10::i;:::-;1396:31;;1522:1;1506:4;1500:18;:23;1496:70;;1546:9;1539:16;;;;;;1496:70;1691:1;1671:9;1665:23;:27;1661:95;;;1729:4;1735:9;1715:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1708:37;;;;;;1661:95;1773:23;1788:7;1773:14;:23::i;:::-;1766:30;;;;1210:593;;;;:::o;3665:153:5:-;3753:4;3776:18;:25;3795:5;3776:25;;;;;;;;;;;;;;;:35;3802:8;3776:35;;;;;;;;;;;;;;;;;;;;;;;;;3769:42;;3665:153;;;;:::o;458:263:19:-;560:7;1531:13:0;:11;:13::i;:::-;579:15:19::1;597;;:17;;;;;;;;;:::i;:::-;;;;;579:35;;624:25;630:9;641:7;624:5;:25::i;:::-;659:31;672:7;681:8;659:12;:31::i;:::-;707:7;700:14;;;458:263:::0;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1527:300:5:-;1629:4;1679:25;1664:40;;;:11;:40;;;;:104;;;;1735:33;1720:48;;;:11;:48;;;;1664:104;:156;;;;1784:36;1808:11;1784:23;:36::i;:::-;1664:156;1645:175;;1527:300;;;:::o;15858:241::-;15921:7;15940:13;15956:17;15965:7;15956:8;:17::i;:::-;15940:33;;16004:1;15987:19;;:5;:19;;;15983:88;;16052:7;16029:31;;;;;;;;;;;:::i;:::-;;;;;;;;15983:88;16087:5;16080:12;;;15858:241;;;:::o;5609:127::-;5679:7;5705:15;:24;5721:7;5705:24;;;;;;;;;;;;;;;;;;;;;5698:31;;5609:127;;;:::o;656:96:11:-;709:7;735:10;728:17;;656:96;:::o;14138:120:5:-;14218:33;14227:2;14231:7;14240:4;14246;14218:8;:33::i;:::-;14138:120;;;:::o;8507:795::-;8593:7;8612:12;8627:17;8636:7;8627:8;:17::i;:::-;8612:32;;8720:1;8704:18;;:4;:18;;;8700:86;;8738:37;8755:4;8761;8767:7;8738:16;:37::i;:::-;8700:86;8846:1;8830:18;;:4;:18;;;8826:256;;8946:48;8963:1;8967:7;8984:1;8988:5;8946:8;:48::i;:::-;9056:1;9037:9;:15;9047:4;9037:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;8826:256;9110:1;9096:16;;:2;:16;;;9092:107;;9173:1;9156:9;:13;9166:2;9156:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9092:107;9228:2;9209:7;:16;9217:7;9209:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9265:7;9261:2;9246:27;;9255:4;9246:27;;;;;;;;;;;;9291:4;9284:11;;;8507:795;;;;;:::o;1796:162:0:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2912:187::-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;15311:312:5:-;15438:1;15418:22;;:8;:22;;;15414:91;;15485:8;15463:31;;;;;;;;;;;:::i;:::-;;;;;;;;15414:91;15552:8;15514:18;:25;15533:5;15514:25;;;;;;;;;;;;;;;:35;15540:8;15514:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;15597:8;15575:41;;15590:5;15575:41;;;15607:8;15575:41;;;;;;:::i;:::-;;;;;;;;15311:312;;;:::o;993:926:10:-;1190:1;1173:2;:14;;;:18;1169:744;;;1227:2;1211:36;;;1248:8;1258:4;1264:7;1273:4;1211:67;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1207:696;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1585:1;1568:6;:13;:18;1564:325;;1708:2;1672:39;;;;;;;;;;;:::i;:::-;;;;;;;;1564:325;1841:6;1835:13;1828:4;1820:6;1816:17;1809:40;1207:696;1335:41;;;1325:51;;;:6;:51;;;;1321:182;;1481:2;1445:39;;;;;;;;;;;:::i;:::-;;;;;;;;1321:182;1279:238;1169:744;993:926;;;;;:::o;3026:92:5:-;3077:13;3102:9;;;;;;;;;;;;;;3026:92;:::o;2529:255::-;2593:13;2618:22;2632:7;2618:13;:22::i;:::-;;2651:21;2675:10;:8;:10::i;:::-;2651:34;;2726:1;2708:7;2702:21;:25;:75;;;;;;;;;;;;;;;;;2744:7;2753:18;:7;:16;:18::i;:::-;2730:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2702:75;2695:82;;;2529:255;;;:::o;9624:327::-;9705:1;9691:16;;:2;:16;;;9687:87;;9760:1;9730:33;;;;;;;;;;;:::i;:::-;;;;;;;;9687:87;9783:21;9807:32;9815:2;9819:7;9836:1;9807:7;:32::i;:::-;9783:56;;9878:1;9853:27;;:13;:27;;;9849:96;;9931:1;9903:31;;;;;;;;;;;:::i;:::-;;;;;;;;9849:96;9677:274;9624:327;;:::o;1931:167:8:-;2044:9;2022:10;:19;2033:7;2022:19;;;;;;;;;;;:31;;;;;;:::i;:::-;;2068:23;2083:7;2068:23;;;;;;:::i;:::-;;;;;;;;1931:167;;:::o;730:146:14:-;806:4;844:25;829:40;;;:11;:40;;;;822:47;;730:146;;;:::o;5378:115:5:-;5444:7;5470;:16;5478:7;5470:16;;;;;;;;;;;;;;;;;;;;;5463:23;;5378:115;;;:::o;14440:662::-;14600:9;:31;;;;14629:1;14613:18;;:4;:18;;;;14600:31;14596:460;;;14647:13;14663:22;14677:7;14663:13;:22::i;:::-;14647:38;;14829:1;14813:18;;:4;:18;;;;:35;;;;;14844:4;14835:13;;:5;:13;;;;14813:35;:69;;;;;14853:29;14870:5;14877:4;14853:16;:29::i;:::-;14852:30;14813:69;14809:142;;;14931:4;14909:27;;;;;;;;;;;:::i;:::-;;;;;;;;14809:142;14969:9;14965:81;;;15023:7;15019:2;15003:28;;15012:5;15003:28;;;;;;;;;;;;14965:81;14633:423;14596:460;15093:2;15066:15;:24;15082:7;15066:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;14440:662;;;;:::o;6751:368::-;6863:38;6877:5;6884:7;6893;6863:13;:38::i;:::-;6858:255;;6938:1;6921:19;;:5;:19;;;6917:186;;6990:7;6967:31;;;;;;;;;;;:::i;:::-;;;;;;;;6917:186;7071:7;7080;7044:44;;;;;;;;;;;;:::i;:::-;;;;;;;;6858:255;6751:368;;;:::o;1308:634:13:-;1364:13;1413:14;1450:1;1430:17;1441:5;1430:10;:17::i;:::-;:21;1413:38;;1465:20;1499:6;1488:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1465:41;;1520:11;1618:6;1611:4;1603:6;1599:17;1595:30;1588:37;;1652:247;1659:4;1652:247;;;1683:5;;;;;;;;1787:10;1782:2;1775:5;1771:14;1766:32;1761:3;1753:46;1843:2;1834:11;;;;;;:::i;:::-;;;;;1876:1;1867:5;:10;1652:247;1863:21;1652:247;1919:6;1912:13;;;;;1308:634;;;:::o;6047:272:5:-;6150:4;6204:1;6185:21;;:7;:21;;;;:127;;;;;6232:7;6223:16;;:5;:16;;;:52;;;;6243:32;6260:5;6267:7;6243:16;:32::i;:::-;6223:52;:88;;;;6304:7;6279:32;;:21;6292:7;6279:12;:21::i;:::-;:32;;;6223:88;6185:127;6166:146;;6047:272;;;;;:::o;29154:916:16:-;29207:7;29226:14;29243:1;29226:18;;29291:8;29282:5;:17;29278:103;;29328:8;29319:17;;;;;;:::i;:::-;;;;;29364:2;29354:12;;;;29278:103;29407:8;29398:5;:17;29394:103;;29444:8;29435:17;;;;;;:::i;:::-;;;;;29480:2;29470:12;;;;29394:103;29523:8;29514:5;:17;29510:103;;29560:8;29551:17;;;;;;:::i;:::-;;;;;29596:2;29586:12;;;;29510:103;29639:7;29630:5;:16;29626:100;;29675:7;29666:16;;;;;;:::i;:::-;;;;;29710:1;29700:11;;;;29626:100;29752:7;29743:5;:16;29739:100;;29788:7;29779:16;;;;;;:::i;:::-;;;;;29823:1;29813:11;;;;29739:100;29865:7;29856:5;:16;29852:100;;29901:7;29892:16;;;;;;:::i;:::-;;;;;29936:1;29926:11;;;;29852:100;29978:7;29969:5;:16;29965:66;;30015:1;30005:11;;;;29965:66;30057:6;30050:13;;;29154:916;;;:::o;7:75:20:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:329::-;5574:6;5623:2;5611:9;5602:7;5598:23;5594:32;5591:119;;;5629:79;;:::i;:::-;5591:119;5749:1;5774:53;5819:7;5810:6;5799:9;5795:22;5774:53;:::i;:::-;5764:63;;5720:117;5515:329;;;;:::o;5850:118::-;5937:24;5955:5;5937:24;:::i;:::-;5932:3;5925:37;5850:118;;:::o;5974:222::-;6067:4;6105:2;6094:9;6090:18;6082:26;;6118:71;6186:1;6175:9;6171:17;6162:6;6118:71;:::i;:::-;5974:222;;;;:::o;6202:116::-;6272:21;6287:5;6272:21;:::i;:::-;6265:5;6262:32;6252:60;;6308:1;6305;6298:12;6252:60;6202:116;:::o;6324:133::-;6367:5;6405:6;6392:20;6383:29;;6421:30;6445:5;6421:30;:::i;:::-;6324:133;;;;:::o;6463:468::-;6528:6;6536;6585:2;6573:9;6564:7;6560:23;6556:32;6553:119;;;6591:79;;:::i;:::-;6553:119;6711:1;6736:53;6781:7;6772:6;6761:9;6757:22;6736:53;:::i;:::-;6726:63;;6682:117;6838:2;6864:50;6906:7;6897:6;6886:9;6882:22;6864:50;:::i;:::-;6854:60;;6809:115;6463:468;;;;;:::o;6937:117::-;7046:1;7043;7036:12;7060:117;7169:1;7166;7159:12;7183:180;7231:77;7228:1;7221:88;7328:4;7325:1;7318:15;7352:4;7349:1;7342:15;7369:281;7452:27;7474:4;7452:27;:::i;:::-;7444:6;7440:40;7582:6;7570:10;7567:22;7546:18;7534:10;7531:34;7528:62;7525:88;;;7593:18;;:::i;:::-;7525:88;7633:10;7629:2;7622:22;7412:238;7369:281;;:::o;7656:129::-;7690:6;7717:20;;:::i;:::-;7707:30;;7746:33;7774:4;7766:6;7746:33;:::i;:::-;7656:129;;;:::o;7791:307::-;7852:4;7942:18;7934:6;7931:30;7928:56;;;7964:18;;:::i;:::-;7928:56;8002:29;8024:6;8002:29;:::i;:::-;7994:37;;8086:4;8080;8076:15;8068:23;;7791:307;;;:::o;8104:146::-;8201:6;8196:3;8191;8178:30;8242:1;8233:6;8228:3;8224:16;8217:27;8104:146;;;:::o;8256:423::-;8333:5;8358:65;8374:48;8415:6;8374:48;:::i;:::-;8358:65;:::i;:::-;8349:74;;8446:6;8439:5;8432:21;8484:4;8477:5;8473:16;8522:3;8513:6;8508:3;8504:16;8501:25;8498:112;;;8529:79;;:::i;:::-;8498:112;8619:54;8666:6;8661:3;8656;8619:54;:::i;:::-;8339:340;8256:423;;;;;:::o;8698:338::-;8753:5;8802:3;8795:4;8787:6;8783:17;8779:27;8769:122;;8810:79;;:::i;:::-;8769:122;8927:6;8914:20;8952:78;9026:3;9018:6;9011:4;9003:6;8999:17;8952:78;:::i;:::-;8943:87;;8759:277;8698:338;;;;:::o;9042:943::-;9137:6;9145;9153;9161;9210:3;9198:9;9189:7;9185:23;9181:33;9178:120;;;9217:79;;:::i;:::-;9178:120;9337:1;9362:53;9407:7;9398:6;9387:9;9383:22;9362:53;:::i;:::-;9352:63;;9308:117;9464:2;9490:53;9535:7;9526:6;9515:9;9511:22;9490:53;:::i;:::-;9480:63;;9435:118;9592:2;9618:53;9663:7;9654:6;9643:9;9639:22;9618:53;:::i;:::-;9608:63;;9563:118;9748:2;9737:9;9733:18;9720:32;9779:18;9771:6;9768:30;9765:117;;;9801:79;;:::i;:::-;9765:117;9906:62;9960:7;9951:6;9940:9;9936:22;9906:62;:::i;:::-;9896:72;;9691:287;9042:943;;;;;;;:::o;9991:474::-;10059:6;10067;10116:2;10104:9;10095:7;10091:23;10087:32;10084:119;;;10122:79;;:::i;:::-;10084:119;10242:1;10267:53;10312:7;10303:6;10292:9;10288:22;10267:53;:::i;:::-;10257:63;;10213:117;10369:2;10395:53;10440:7;10431:6;10420:9;10416:22;10395:53;:::i;:::-;10385:63;;10340:118;9991:474;;;;;:::o;10471:308::-;10533:4;10623:18;10615:6;10612:30;10609:56;;;10645:18;;:::i;:::-;10609:56;10683:29;10705:6;10683:29;:::i;:::-;10675:37;;10767:4;10761;10757:15;10749:23;;10471:308;;;:::o;10785:425::-;10863:5;10888:66;10904:49;10946:6;10904:49;:::i;:::-;10888:66;:::i;:::-;10879:75;;10977:6;10970:5;10963:21;11015:4;11008:5;11004:16;11053:3;11044:6;11039:3;11035:16;11032:25;11029:112;;;11060:79;;:::i;:::-;11029:112;11150:54;11197:6;11192:3;11187;11150:54;:::i;:::-;10869:341;10785:425;;;;;:::o;11230:340::-;11286:5;11335:3;11328:4;11320:6;11316:17;11312:27;11302:122;;11343:79;;:::i;:::-;11302:122;11460:6;11447:20;11485:79;11560:3;11552:6;11545:4;11537:6;11533:17;11485:79;:::i;:::-;11476:88;;11292:278;11230:340;;;;:::o;11576:654::-;11654:6;11662;11711:2;11699:9;11690:7;11686:23;11682:32;11679:119;;;11717:79;;:::i;:::-;11679:119;11837:1;11862:53;11907:7;11898:6;11887:9;11883:22;11862:53;:::i;:::-;11852:63;;11808:117;11992:2;11981:9;11977:18;11964:32;12023:18;12015:6;12012:30;12009:117;;;12045:79;;:::i;:::-;12009:117;12150:63;12205:7;12196:6;12185:9;12181:22;12150:63;:::i;:::-;12140:73;;11935:288;11576:654;;;;;:::o;12236:180::-;12284:77;12281:1;12274:88;12381:4;12378:1;12371:15;12405:4;12402:1;12395:15;12422:320;12466:6;12503:1;12497:4;12493:12;12483:22;;12550:1;12544:4;12540:12;12571:18;12561:81;;12627:4;12619:6;12615:17;12605:27;;12561:81;12689:2;12681:6;12678:14;12658:18;12655:38;12652:84;;12708:18;;:::i;:::-;12652:84;12473:269;12422:320;;;:::o;12748:442::-;12897:4;12935:2;12924:9;12920:18;12912:26;;12948:71;13016:1;13005:9;13001:17;12992:6;12948:71;:::i;:::-;13029:72;13097:2;13086:9;13082:18;13073:6;13029:72;:::i;:::-;13111;13179:2;13168:9;13164:18;13155:6;13111:72;:::i;:::-;12748:442;;;;;;:::o;13196:148::-;13298:11;13335:3;13320:18;;13196:148;;;;:::o;13350:390::-;13456:3;13484:39;13517:5;13484:39;:::i;:::-;13539:89;13621:6;13616:3;13539:89;:::i;:::-;13532:96;;13637:65;13695:6;13690:3;13683:4;13676:5;13672:16;13637:65;:::i;:::-;13727:6;13722:3;13718:16;13711:23;;13460:280;13350:390;;;;:::o;13746:435::-;13926:3;13948:95;14039:3;14030:6;13948:95;:::i;:::-;13941:102;;14060:95;14151:3;14142:6;14060:95;:::i;:::-;14053:102;;14172:3;14165:10;;13746:435;;;;;:::o;14187:180::-;14235:77;14232:1;14225:88;14332:4;14329:1;14322:15;14356:4;14353:1;14346:15;14373:233;14412:3;14435:24;14453:5;14435:24;:::i;:::-;14426:33;;14481:66;14474:5;14471:77;14468:103;;14551:18;;:::i;:::-;14468:103;14598:1;14591:5;14587:13;14580:20;;14373:233;;;:::o;14612:98::-;14663:6;14697:5;14691:12;14681:22;;14612:98;;;:::o;14716:168::-;14799:11;14833:6;14828:3;14821:19;14873:4;14868:3;14864:14;14849:29;;14716:168;;;;:::o;14890:373::-;14976:3;15004:38;15036:5;15004:38;:::i;:::-;15058:70;15121:6;15116:3;15058:70;:::i;:::-;15051:77;;15137:65;15195:6;15190:3;15183:4;15176:5;15172:16;15137:65;:::i;:::-;15227:29;15249:6;15227:29;:::i;:::-;15222:3;15218:39;15211:46;;14980:283;14890:373;;;;:::o;15269:640::-;15464:4;15502:3;15491:9;15487:19;15479:27;;15516:71;15584:1;15573:9;15569:17;15560:6;15516:71;:::i;:::-;15597:72;15665:2;15654:9;15650:18;15641:6;15597:72;:::i;:::-;15679;15747:2;15736:9;15732:18;15723:6;15679:72;:::i;:::-;15798:9;15792:4;15788:20;15783:2;15772:9;15768:18;15761:48;15826:76;15897:4;15888:6;15826:76;:::i;:::-;15818:84;;15269:640;;;;;;;:::o;15915:141::-;15971:5;16002:6;15996:13;15987:22;;16018:32;16044:5;16018:32;:::i;:::-;15915:141;;;;:::o;16062:349::-;16131:6;16180:2;16168:9;16159:7;16155:23;16151:32;16148:119;;;16186:79;;:::i;:::-;16148:119;16306:1;16331:63;16386:7;16377:6;16366:9;16362:22;16331:63;:::i;:::-;16321:73;;16277:127;16062:349;;;;:::o;16417:141::-;16466:4;16489:3;16481:11;;16512:3;16509:1;16502:14;16546:4;16543:1;16533:18;16525:26;;16417:141;;;:::o;16564:93::-;16601:6;16648:2;16643;16636:5;16632:14;16628:23;16618:33;;16564:93;;;:::o;16663:107::-;16707:8;16757:5;16751:4;16747:16;16726:37;;16663:107;;;;:::o;16776:393::-;16845:6;16895:1;16883:10;16879:18;16918:97;16948:66;16937:9;16918:97;:::i;:::-;17036:39;17066:8;17055:9;17036:39;:::i;:::-;17024:51;;17108:4;17104:9;17097:5;17093:21;17084:30;;17157:4;17147:8;17143:19;17136:5;17133:30;17123:40;;16852:317;;16776:393;;;;;:::o;17175:60::-;17203:3;17224:5;17217:12;;17175:60;;;:::o;17241:142::-;17291:9;17324:53;17342:34;17351:24;17369:5;17351:24;:::i;:::-;17342:34;:::i;:::-;17324:53;:::i;:::-;17311:66;;17241:142;;;:::o;17389:75::-;17432:3;17453:5;17446:12;;17389:75;;;:::o;17470:269::-;17580:39;17611:7;17580:39;:::i;:::-;17641:91;17690:41;17714:16;17690:41;:::i;:::-;17682:6;17675:4;17669:11;17641:91;:::i;:::-;17635:4;17628:105;17546:193;17470:269;;;:::o;17745:73::-;17790:3;17745:73;:::o;17824:189::-;17901:32;;:::i;:::-;17942:65;18000:6;17992;17986:4;17942:65;:::i;:::-;17877:136;17824:189;;:::o;18019:186::-;18079:120;18096:3;18089:5;18086:14;18079:120;;;18150:39;18187:1;18180:5;18150:39;:::i;:::-;18123:1;18116:5;18112:13;18103:22;;18079:120;;;18019:186;;:::o;18211:543::-;18312:2;18307:3;18304:11;18301:446;;;18346:38;18378:5;18346:38;:::i;:::-;18430:29;18448:10;18430:29;:::i;:::-;18420:8;18416:44;18613:2;18601:10;18598:18;18595:49;;;18634:8;18619:23;;18595:49;18657:80;18713:22;18731:3;18713:22;:::i;:::-;18703:8;18699:37;18686:11;18657:80;:::i;:::-;18316:431;;18301:446;18211:543;;;:::o;18760:117::-;18814:8;18864:5;18858:4;18854:16;18833:37;;18760:117;;;;:::o;18883:169::-;18927:6;18960:51;19008:1;19004:6;18996:5;18993:1;18989:13;18960:51;:::i;:::-;18956:56;19041:4;19035;19031:15;19021:25;;18934:118;18883:169;;;;:::o;19057:295::-;19133:4;19279:29;19304:3;19298:4;19279:29;:::i;:::-;19271:37;;19341:3;19338:1;19334:11;19328:4;19325:21;19317:29;;19057:295;;;;:::o;19357:1395::-;19474:37;19507:3;19474:37;:::i;:::-;19576:18;19568:6;19565:30;19562:56;;;19598:18;;:::i;:::-;19562:56;19642:38;19674:4;19668:11;19642:38;:::i;:::-;19727:67;19787:6;19779;19773:4;19727:67;:::i;:::-;19821:1;19845:4;19832:17;;19877:2;19869:6;19866:14;19894:1;19889:618;;;;20551:1;20568:6;20565:77;;;20617:9;20612:3;20608:19;20602:26;20593:35;;20565:77;20668:67;20728:6;20721:5;20668:67;:::i;:::-;20662:4;20655:81;20524:222;19859:887;;19889:618;19941:4;19937:9;19929:6;19925:22;19975:37;20007:4;19975:37;:::i;:::-;20034:1;20048:208;20062:7;20059:1;20056:14;20048:208;;;20141:9;20136:3;20132:19;20126:26;20118:6;20111:42;20192:1;20184:6;20180:14;20170:24;;20239:2;20228:9;20224:18;20211:31;;20085:4;20082:1;20078:12;20073:17;;20048:208;;;20284:6;20275:7;20272:19;20269:179;;;20342:9;20337:3;20333:19;20327:26;20385:48;20427:4;20419:6;20415:17;20404:9;20385:48;:::i;:::-;20377:6;20370:64;20292:156;20269:179;20494:1;20490;20482:6;20478:14;20474:22;20468:4;20461:36;19896:611;;;19859:887;;19449:1303;;;19357:1395;;:::o;20758:332::-;20879:4;20917:2;20906:9;20902:18;20894:26;;20930:71;20998:1;20987:9;20983:17;20974:6;20930:71;:::i;:::-;21011:72;21079:2;21068:9;21064:18;21055:6;21011:72;:::i;:::-;20758:332;;;;;:::o;21096:180::-;21144:77;21141:1;21134:88;21241:4;21238:1;21231:15;21265:4;21262:1;21255:15"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tcontract CodeQuillNFT is ERC72...\n  PUSH 40\t\t\tcontract CodeQuillNFT is ERC72...\n  MSTORE \t\t\tcontract CodeQuillNFT is ERC72...\n  CALLVALUE \t\t\tconstructor(address initialOwn...\n  DUP1 \t\t\tconstructor(address initialOwn...\n  ISZERO \t\t\tconstructor(address initialOwn...\n  PUSH [tag] 1\t\t\tconstructor(address initialOwn...\n  JUMPI \t\t\tconstructor(address initialOwn...\n  PUSH 0\t\t\tconstructor(address initialOwn...\n  DUP1 \t\t\tconstructor(address initialOwn...\n  REVERT \t\t\tconstructor(address initialOwn...\ntag 1\t\t\tconstructor(address initialOwn...\n  JUMPDEST \t\t\tconstructor(address initialOwn...\n  POP \t\t\tconstructor(address initialOwn...\n  PUSH 40\t\t\tconstructor(address initialOwn...\n  MLOAD \t\t\tconstructor(address initialOwn...\n  PUSHSIZE \t\t\tconstructor(address initialOwn...\n  CODESIZE \t\t\tconstructor(address initialOwn...\n  SUB \t\t\tconstructor(address initialOwn...\n  DUP1 \t\t\tconstructor(address initialOwn...\n  PUSHSIZE \t\t\tconstructor(address initialOwn...\n  DUP4 \t\t\tconstructor(address initialOwn...\n  CODECOPY \t\t\tconstructor(address initialOwn...\n  DUP2 \t\t\tconstructor(address initialOwn...\n  DUP2 \t\t\tconstructor(address initialOwn...\n  ADD \t\t\tconstructor(address initialOwn...\n  PUSH 40\t\t\tconstructor(address initialOwn...\n  MSTORE \t\t\tconstructor(address initialOwn...\n  DUP2 \t\t\tconstructor(address initialOwn...\n  ADD \t\t\tconstructor(address initialOwn...\n  SWAP1 \t\t\tconstructor(address initialOwn...\n  PUSH [tag] 2\t\t\tconstructor(address initialOwn...\n  SWAP2 \t\t\tconstructor(address initialOwn...\n  SWAP1 \t\t\tconstructor(address initialOwn...\n  PUSH [tag] 3\t\t\tconstructor(address initialOwn...\n  JUMP \t\t\tconstructor(address initialOwn...\ntag 2\t\t\tconstructor(address initialOwn...\n  JUMPDEST \t\t\tconstructor(address initialOwn...\n  DUP1 \t\t\tinitialOwner\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH E\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 436F6465205175696C6C204E4654000000000000000000000000000000000000\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 9\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 434F44455155494C4C0000000000000000000000000000000000000000000000\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 8\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 9\t\t\t\n  JUMP \t\t\t\ntag 8\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  PUSH 1\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 10\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 9\t\t\t\n  JUMP \t\t\t\ntag 10\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 0\t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  DUP2 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  SUB \t\t\t\n  PUSH [tag] 12\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 1E4FBDF700000000000000000000000000000000000000000000000000000000\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 4\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 13\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 14\t\t\t\n  JUMP \t\t\t\ntag 13\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  REVERT \t\t\t\ntag 12\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 15\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 16\t\t\t\n  PUSH 20\t\t\t\n  SHL \t\t\t\n  PUSH 20\t\t\t\n  SHR \t\t\t\n  JUMP \t\t\t\ntag 15\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\tconstructor(address initialOwn...\n  PUSH [tag] 18\t\t\tcontract CodeQuillNFT is ERC72...\n  JUMP \t\t\tcontract CodeQuillNFT is ERC72...\ntag 16\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 7\t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  SLOAD \t\t\t\n  SWAP1 \t\t\t\n  PUSH 100\t\t\t\n  EXP \t\t\t\n  SWAP1 \t\t\t\n  DIV \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 7\t\t\t\n  PUSH 0\t\t\t\n  PUSH 100\t\t\t\n  EXP \t\t\t\n  DUP2 \t\t\t\n  SLOAD \t\t\t\n  DUP2 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  MUL \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  SWAP1 \t\t\t\n  DUP4 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  MUL \t\t\t\n  OR \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  DUP2 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  LOG3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 21\t\t\t/token/ERC721/ERC721.sol\";\\nim...\n  JUMPDEST \t\t\t/token/ERC721/ERC721.sol\";\\nim...\n  PUSH 0\t\t\to\n  DUP1 \t\t\ti\n  REVERT \t\t\t.sol\";\\nimpor\ntag 23\t\t\tter;\\n\\n    constructor(addres...\n  JUMPDEST \t\t\tter;\\n\\n    constructor(addres...\n  PUSH 0\t\t\tOwner)\\n\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tEQUILL\")\\n    Ownable(initialO...\n  DUP3 \t\t\t\", \"C\n  AND \t\t\t NFT\", \"CODEQUILL\")\\n    Ownab...\n  SWAP1 \t\t\t\"Code Quill NFT\", \"CODEQUILL\")...\n  POP \t\t\t\"Code Quill NFT\", \"CODEQUILL\")...\n  SWAP2 \t\t\tter;\\n\\n    constructor(addres...\n  SWAP1 \t\t\tter;\\n\\n    constructor(addres...\n  POP \t\t\tter;\\n\\n    constructor(addres...\n  JUMP \t\t\tter;\\n\\n    constructor(addres...\ntag 24\t\t\t mintNFT(address recipient,\\n ...\n  JUMPDEST \t\t\t mintNFT(address recipient,\\n ...\n  PUSH 0\t\t\ttring m\n  PUSH [tag] 54\t\t\tblic onlyOwner\\n    retur\n  DUP3 \t\t\t retu\n  PUSH [tag] 23\t\t\tblic onlyOwner\\n    retur\n  JUMP \t\t\tblic onlyOwner\\n    retur\ntag 54\t\t\tblic onlyOwner\\n    retur\n  JUMPDEST \t\t\tblic onlyOwner\\n    retur\n  SWAP1 \t\t\tURI)\\n    public onlyOwner\\n  ...\n  POP \t\t\tURI)\\n    public onlyOwner\\n  ...\n  SWAP2 \t\t\t mintNFT(address recipient,\\n ...\n  SWAP1 \t\t\t mintNFT(address recipient,\\n ...\n  POP \t\t\t mintNFT(address recipient,\\n ...\n  JUMP \t\t\t mintNFT(address recipient,\\n ...\ntag 25\t\t\t {\\n        uint256 tokenId = ...\n  JUMPDEST \t\t\t {\\n        uint256 tokenId = ...\n  PUSH [tag] 56\t\t\ttokenId);\\n        _setTo\n  DUP2 \t\t\t_setT\n  PUSH [tag] 24\t\t\ttokenId);\\n        _setTo\n  JUMP \t\t\ttokenId);\\n        _setTo\ntag 56\t\t\ttokenId);\\n        _setTo\n  JUMPDEST \t\t\ttokenId);\\n        _setTo\n  DUP2 \t\t\tpient\n  EQ \t\t\tecipient, tokenId);\\n        _...\n  PUSH [tag] 57\t\t\t   _mint(recipient, tokenId);\\...\n  JUMPI \t\t\t   _mint(recipient, tokenId);\\...\n  PUSH 0\t\t\t \n  DUP1 \t\t\tI\n  REVERT \t\t\tI(tokenId, t\ntag 57\t\t\t   _mint(recipient, tokenId);\\...\n  JUMPDEST \t\t\t   _mint(recipient, tokenId);\\...\n  POP \t\t\t {\\n        uint256 tokenId = ...\n  JUMP \t\t\t {\\n        uint256 tokenId = ...\ntag 26\t\t\t    return tokenId;\\n    }\\n}\n  JUMPDEST \t\t\t    return tokenId;\\n    }\\n}\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 59\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 25\t\t\t\n  JUMP \t\t\t\ntag 59\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t    return tokenId;\\n    }\\n}\n  SWAP2 \t\t\t    return tokenId;\\n    }\\n}\n  POP \t\t\t    return tokenId;\\n    }\\n}\n  POP \t\t\t    return tokenId;\\n    }\\n}\n  JUMP \t\t\t    return tokenId;\\n    }\\n}\ntag 3\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  DUP5 \t\t\t\n  SUB \t\t\t\n  SLT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 61\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 62\t\t\t\n  PUSH [tag] 21\t\t\t\n  JUMP \t\t\t\ntag 62\t\t\t\n  JUMPDEST \t\t\t\ntag 61\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 63\t\t\t\n  DUP5 \t\t\t\n  DUP3 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 26\t\t\t\n  JUMP \t\t\t\ntag 63\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 27\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 28\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 41\t\t\t\n  PUSH 4\t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  PUSH 0\t\t\t\n  REVERT \t\t\t\ntag 29\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 22\t\t\t\n  PUSH 4\t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  PUSH 0\t\t\t\n  REVERT \t\t\t\ntag 30\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 2\t\t\t\n  DUP3 \t\t\t\n  DIV \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  DUP1 \t\t\t\n  PUSH [tag] 68\t\t\t\n  JUMPI \t\t\t\n  PUSH 7F\t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\ntag 68\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  LT \t\t\t\n  DUP2 \t\t\t\n  SUB \t\t\t\n  PUSH [tag] 69\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 70\t\t\t\n  PUSH [tag] 29\t\t\t\n  JUMP \t\t\t\ntag 70\t\t\t\n  JUMPDEST \t\t\t\ntag 69\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 31\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  PUSH 0\t\t\t\n  KECCAK256 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 32\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DIV \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 33\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SHL \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 34\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 8\t\t\t\n  DUP4 \t\t\t\n  MUL \t\t\t\n  PUSH [tag] 75\t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 75\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 76\t\t\t\n  DUP7 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 76\t\t\t\n  JUMPDEST \t\t\t\n  SWAP6 \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  SWAP4 \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  DUP7 \t\t\t\n  AND \t\t\t\n  DUP5 \t\t\t\n  OR \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 35\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 36\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 37\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 80\t\t\t\n  PUSH [tag] 81\t\t\t\n  PUSH [tag] 82\t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 35\t\t\t\n  JUMP \t\t\t\ntag 82\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 36\t\t\t\n  JUMP \t\t\t\ntag 81\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 35\t\t\t\n  JUMP \t\t\t\ntag 80\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 38\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 39\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 85\t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 37\t\t\t\n  JUMP \t\t\t\ntag 85\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 86\t\t\t\n  PUSH [tag] 87\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 38\t\t\t\n  JUMP \t\t\t\ntag 87\t\t\t\n  JUMPDEST \t\t\t\n  DUP5 \t\t\t\n  DUP5 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 34\t\t\t\n  JUMP \t\t\t\ntag 86\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 40\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 41\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 90\t\t\t\n  PUSH [tag] 40\t\t\t\n  JUMP \t\t\t\ntag 90\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 91\t\t\t\n  DUP2 \t\t\t\n  DUP5 \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 39\t\t\t\n  JUMP \t\t\t\ntag 91\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 42\t\t\t\n  JUMPDEST \t\t\t\ntag 93\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 95\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 96\t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 41\t\t\t\n  JUMP \t\t\t\ntag 96\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 93\t\t\t\n  JUMP \t\t\t\ntag 95\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 43\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 98\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 99\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMP \t\t\t\ntag 99\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 100\t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 32\t\t\t\n  JUMP \t\t\t\ntag 100\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 101\t\t\t\n  JUMPI \t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 101\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 102\t\t\t\n  PUSH [tag] 103\t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 32\t\t\t\n  JUMP \t\t\t\ntag 103\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 42\t\t\t\n  JUMP \t\t\t\ntag 102\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 98\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 44\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SHR \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 45\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 106\t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  PUSH 8\t\t\t\n  MUL \t\t\t\n  PUSH [tag] 44\t\t\t\n  JUMP \t\t\t\ntag 106\t\t\t\n  JUMPDEST \t\t\t\n  NOT \t\t\t\n  DUP1 \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 46\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 108\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 45\t\t\t\n  JUMP \t\t\t\ntag 108\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  DUP3 \t\t\t\n  PUSH 2\t\t\t\n  MUL \t\t\t\n  DUP3 \t\t\t\n  OR \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 9\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 110\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 27\t\t\t\n  JUMP \t\t\t\ntag 110\t\t\t\n  JUMPDEST \t\t\t\n  PUSH FFFFFFFFFFFFFFFF\t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 111\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 112\t\t\t\n  PUSH [tag] 28\t\t\t\n  JUMP \t\t\t\ntag 112\t\t\t\n  JUMPDEST \t\t\t\ntag 111\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 113\t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 30\t\t\t\n  JUMP \t\t\t\ntag 113\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 114\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMP \t\t\t\ntag 114\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  GT \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 116\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP5 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 117\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  DUP8 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 117\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 118\t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 46\t\t\t\n  JUMP \t\t\t\ntag 118\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 115\t\t\t\n  JUMP \t\t\t\ntag 116\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 119\t\t\t\n  DUP7 \t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMP \t\t\t\ntag 119\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\ntag 120\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 122\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  PUSH 1\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  SWAP5 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 120\t\t\t\n  JUMP \t\t\t\ntag 122\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  DUP4 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 123\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 124\t\t\t\n  PUSH 1F\t\t\t\n  DUP10 \t\t\t\n  AND \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 45\t\t\t\n  JUMP \t\t\t\ntag 124\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\ntag 123\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 2\t\t\t\n  DUP9 \t\t\t\n  MUL \t\t\t\n  ADD \t\t\t\n  DUP9 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 115\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 47\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 126\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 24\t\t\t\n  JUMP \t\t\t\ntag 126\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 14\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 128\t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 47\t\t\t\n  JUMP \t\t\t\ntag 128\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 18\t\t\tcontract CodeQuillNFT is ERC72...\n  JUMPDEST \t\t\tcontract CodeQuillNFT is ERC72...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract CodeQuillNFT is ERC72...\n  DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract CodeQuillNFT is ERC72...\n  PUSH 0\t\t\tcontract CodeQuillNFT is ERC72...\n  CODECOPY \t\t\tcontract CodeQuillNFT is ERC72...\n  PUSH 0\t\t\tcontract CodeQuillNFT is ERC72...\n  RETURN \t\t\tcontract CodeQuillNFT is ERC72...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 40\t\t\tcontract CodeQuillNFT is ERC72...\n      MSTORE \t\t\tcontract CodeQuillNFT is ERC72...\n      CALLVALUE \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      ISZERO \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 1\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 0\t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      REVERT \t\t\tcontract CodeQuillNFT is ERC72...\n    tag 1\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPDEST \t\t\tcontract CodeQuillNFT is ERC72...\n      POP \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 4\t\t\tcontract CodeQuillNFT is ERC72...\n      CALLDATASIZE \t\t\tcontract CodeQuillNFT is ERC72...\n      LT \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 2\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 0\t\t\tcontract CodeQuillNFT is ERC72...\n      CALLDATALOAD \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH E0\t\t\tcontract CodeQuillNFT is ERC72...\n      SHR \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 715018A6\t\t\tcontract CodeQuillNFT is ERC72...\n      GT \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 20\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH B88D4FDE\t\t\tcontract CodeQuillNFT is ERC72...\n      GT \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 21\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH B88D4FDE\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 15\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH C87B56DD\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 16\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH E985E9C5\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 17\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH EACABE14\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 18\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH F2FDE38B\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 19\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 2\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMP \t\t\tcontract CodeQuillNFT is ERC72...\n    tag 21\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPDEST \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 715018A6\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 11\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 8DA5CB5B\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 12\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 95D89B41\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 13\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH A22CB465\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 14\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 2\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMP \t\t\tcontract CodeQuillNFT is ERC72...\n    tag 20\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPDEST \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 23B872DD\t\t\tcontract CodeQuillNFT is ERC72...\n      GT \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 22\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 23B872DD\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 7\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 42842E0E\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 8\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 6352211E\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 9\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 70A08231\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 10\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 2\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMP \t\t\tcontract CodeQuillNFT is ERC72...\n    tag 22\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPDEST \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 1FFC9A7\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 3\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 6FDDE03\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 4\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 81812FC\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 5\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 95EA7B3\t\t\tcontract CodeQuillNFT is ERC72...\n      EQ \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH [tag] 6\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPI \t\t\tcontract CodeQuillNFT is ERC72...\n    tag 2\t\t\tcontract CodeQuillNFT is ERC72...\n      JUMPDEST \t\t\tcontract CodeQuillNFT is ERC72...\n      PUSH 0\t\t\tcontract CodeQuillNFT is ERC72...\n      DUP1 \t\t\tcontract CodeQuillNFT is ERC72...\n      REVERT \t\t\tcontract CodeQuillNFT is ERC72...\n    tag 3\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 23\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 24\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 25\t\t\t\n      JUMP \t\t\t\n    tag 24\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 26\t\t\t\n      JUMP \t\t\t\n    tag 23\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 27\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 28\t\t\t\n      JUMP \t\t\t\n    tag 27\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 4\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 29\t\t\t\n      PUSH [tag] 30\t\t\t\n      JUMP \t\t\t\n    tag 29\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 31\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 32\t\t\t\n      JUMP \t\t\t\n    tag 31\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 5\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 33\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 34\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 35\t\t\t\n      JUMP \t\t\t\n    tag 34\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 36\t\t\t\n      JUMP \t\t\t\n    tag 33\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 37\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 37\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 6\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 39\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 40\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 41\t\t\t\n      JUMP \t\t\t\n    tag 40\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 39\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 7\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 43\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 44\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 45\t\t\t\n      JUMP \t\t\t\n    tag 44\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 46\t\t\t\n      JUMP \t\t\t\n    tag 43\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 8\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 47\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 48\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 45\t\t\t\n      JUMP \t\t\t\n    tag 48\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 49\t\t\t\n      JUMP \t\t\t\n    tag 47\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 9\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 50\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 51\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 35\t\t\t\n      JUMP \t\t\t\n    tag 51\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 52\t\t\t\n      JUMP \t\t\t\n    tag 50\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 53\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 53\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 10\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 54\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 55\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 56\t\t\t\n      JUMP \t\t\t\n    tag 55\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 57\t\t\t\n      JUMP \t\t\t\n    tag 54\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 58\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 59\t\t\t\n      JUMP \t\t\t\n    tag 58\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 11\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 60\t\t\t\n      PUSH [tag] 61\t\t\t\n      JUMP \t\t\t\n    tag 60\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 12\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 62\t\t\t\n      PUSH [tag] 63\t\t\t\n      JUMP \t\t\t\n    tag 62\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 64\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 64\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 13\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 65\t\t\t\n      PUSH [tag] 66\t\t\t\n      JUMP \t\t\t\n    tag 65\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 67\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 32\t\t\t\n      JUMP \t\t\t\n    tag 67\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 14\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 68\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 69\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 70\t\t\t\n      JUMP \t\t\t\n    tag 69\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 71\t\t\t\n      JUMP \t\t\t\n    tag 68\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 15\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 72\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 73\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 74\t\t\t\n      JUMP \t\t\t\n    tag 73\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 75\t\t\t\n      JUMP \t\t\t\n    tag 72\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 16\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 76\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 77\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 35\t\t\t\n      JUMP \t\t\t\n    tag 77\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 78\t\t\t\n      JUMP \t\t\t\n    tag 76\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 79\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 32\t\t\t\n      JUMP \t\t\t\n    tag 79\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 17\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 80\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 81\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 82\t\t\t\n      JUMP \t\t\t\n    tag 81\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 83\t\t\t\n      JUMP \t\t\t\n    tag 80\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 84\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 28\t\t\t\n      JUMP \t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 18\t\t\tfunction mintNFT(address recip...\n      JUMPDEST \t\t\tfunction mintNFT(address recip...\n      PUSH [tag] 85\t\t\tfunction mintNFT(address recip...\n      PUSH 4\t\t\tfunction mintNFT(address recip...\n      DUP1 \t\t\tfunction mintNFT(address recip...\n      CALLDATASIZE \t\t\tfunction mintNFT(address recip...\n      SUB \t\t\tfunction mintNFT(address recip...\n      DUP2 \t\t\tfunction mintNFT(address recip...\n      ADD \t\t\tfunction mintNFT(address recip...\n      SWAP1 \t\t\tfunction mintNFT(address recip...\n      PUSH [tag] 86\t\t\tfunction mintNFT(address recip...\n      SWAP2 \t\t\tfunction mintNFT(address recip...\n      SWAP1 \t\t\tfunction mintNFT(address recip...\n      PUSH [tag] 87\t\t\tfunction mintNFT(address recip...\n      JUMP \t\t\tfunction mintNFT(address recip...\n    tag 86\t\t\tfunction mintNFT(address recip...\n      JUMPDEST \t\t\tfunction mintNFT(address recip...\n      PUSH [tag] 88\t\t\tfunction mintNFT(address recip...\n      JUMP \t\t\tfunction mintNFT(address recip...\n    tag 85\t\t\tfunction mintNFT(address recip...\n      JUMPDEST \t\t\tfunction mintNFT(address recip...\n      PUSH 40\t\t\tfunction mintNFT(address recip...\n      MLOAD \t\t\tfunction mintNFT(address recip...\n      PUSH [tag] 89\t\t\tfunction mintNFT(address recip...\n      SWAP2 \t\t\tfunction mintNFT(address recip...\n      SWAP1 \t\t\tfunction mintNFT(address recip...\n      PUSH [tag] 59\t\t\tfunction mintNFT(address recip...\n      JUMP \t\t\tfunction mintNFT(address recip...\n    tag 89\t\t\tfunction mintNFT(address recip...\n      JUMPDEST \t\t\tfunction mintNFT(address recip...\n      PUSH 40\t\t\tfunction mintNFT(address recip...\n      MLOAD \t\t\tfunction mintNFT(address recip...\n      DUP1 \t\t\tfunction mintNFT(address recip...\n      SWAP2 \t\t\tfunction mintNFT(address recip...\n      SUB \t\t\tfunction mintNFT(address recip...\n      SWAP1 \t\t\tfunction mintNFT(address recip...\n      RETURN \t\t\tfunction mintNFT(address recip...\n    tag 19\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 90\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 91\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 56\t\t\t\n      JUMP \t\t\t\n    tag 91\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 92\t\t\t\n      JUMP \t\t\t\n    tag 90\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 26\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 49064906\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 94\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH [tag] 95\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 96\t\t\t\n      JUMP \t\t\t\n    tag 95\t\t\t\n      JUMPDEST \t\t\t\n    tag 94\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 30\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 98\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 99\t\t\t\n      JUMP \t\t\t\n    tag 98\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 100\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 99\t\t\t\n      JUMP \t\t\t\n    tag 100\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 101\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 102\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 101\t\t\t\n      JUMP \t\t\t\n    tag 102\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 103\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 103\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 101\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 36\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 105\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 106\t\t\t\n      JUMP \t\t\t\n    tag 105\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 107\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 108\t\t\t\n      JUMP \t\t\t\n    tag 107\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 42\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 110\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 111\t\t\t\n      PUSH [tag] 112\t\t\t\n      JUMP \t\t\t\n    tag 111\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 113\t\t\t\n      JUMP \t\t\t\n    tag 110\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 46\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 115\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 64A0AE9200000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 116\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 116\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 115\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 117\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 118\t\t\t\n      PUSH [tag] 112\t\t\t\n      JUMP \t\t\t\n    tag 118\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 119\t\t\t\n      JUMP \t\t\t\n    tag 117\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 120\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 64283D7B00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 121\t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 122\t\t\t\n      JUMP \t\t\t\n    tag 121\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 120\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 49\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 124\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 75\t\t\t\n      JUMP \t\t\t\n    tag 124\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 52\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 126\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 106\t\t\t\n      JUMP \t\t\t\n    tag 126\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 57\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 128\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 89C62B6400000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 129\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 129\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 128\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 3\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 61\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 131\t\t\t\n      PUSH [tag] 132\t\t\t\n      JUMP \t\t\t\n    tag 131\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 134\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 134\t\t\t\n      JUMPDEST \t\t\t\n      JUMP \t\t\t\n    tag 63\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 7\t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 66\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 1\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 138\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 99\t\t\t\n      JUMP \t\t\t\n    tag 138\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 139\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 99\t\t\t\n      JUMP \t\t\t\n    tag 139\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 140\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 141\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 140\t\t\t\n      JUMP \t\t\t\n    tag 141\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 142\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 142\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 140\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 71\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 144\t\t\t\n      PUSH [tag] 145\t\t\t\n      PUSH [tag] 112\t\t\t\n      JUMP \t\t\t\n    tag 145\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 146\t\t\t\n      JUMP \t\t\t\n    tag 144\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 75\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 148\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 46\t\t\t\n      JUMP \t\t\t\n    tag 148\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 149\t\t\t\n      PUSH [tag] 150\t\t\t\n      PUSH [tag] 112\t\t\t\n      JUMP \t\t\t\n    tag 150\t\t\t\n      JUMPDEST \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 151\t\t\t\n      JUMP \t\t\t\n    tag 149\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 78\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 153\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 106\t\t\t\n      JUMP \t\t\t\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH 6\t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 154\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 99\t\t\t\n      JUMP \t\t\t\n    tag 154\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 155\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 99\t\t\t\n      JUMP \t\t\t\n    tag 155\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 157\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 158\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 159\t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP \t\t\t\n    tag 159\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 161\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH [tag] 152\t\t\t\n      JUMP \t\t\t\n    tag 161\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      MLOAD \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 162\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 163\t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 163\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH [tag] 152\t\t\t\n      JUMP \t\t\t\n    tag 162\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 165\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 166\t\t\t\n      JUMP \t\t\t\n    tag 165\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 152\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 83\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 5\t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH FF\t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 88\t\t\tfunction mintNFT(address recip...\n      JUMPDEST \t\t\tfunction mintNFT(address recip...\n      PUSH 0\t\t\tuint256\n      PUSH [tag] 169\t\t\t\n      PUSH [tag] 132\t\t\t\n      JUMP \t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\tuint256 tokenId\n      PUSH 8\t\t\t_tokenIdCounter\n      PUSH 0\t\t\t_tokenIdCounter\n      DUP2 \t\t\t_tokenIdCounter++\n      SLOAD \t\t\t_tokenIdCounter++\n      DUP1 \t\t\t_tokenIdCounter++\n      SWAP3 \t\t\t_tokenIdCounter++\n      SWAP2 \t\t\t_tokenIdCounter++\n      SWAP1 \t\t\t_tokenIdCounter++\n      PUSH [tag] 171\t\t\t_tokenIdCounter++\n      SWAP1 \t\t\t_tokenIdCounter++\n      PUSH [tag] 172\t\t\t_tokenIdCounter++\n      JUMP \t\t\t_tokenIdCounter++\n    tag 171\t\t\t_tokenIdCounter++\n      JUMPDEST \t\t\t_tokenIdCounter++\n      SWAP2 \t\t\t_tokenIdCounter++\n      SWAP1 \t\t\t_tokenIdCounter++\n      POP \t\t\t_tokenIdCounter++\n      SSTORE \t\t\t_tokenIdCounter++\n      SWAP1 \t\t\tuint256 tokenId = _tokenIdCoun...\n      POP \t\t\tuint256 tokenId = _tokenIdCoun...\n      PUSH [tag] 173\t\t\t_mint(recipient, tokenId)\n      DUP5 \t\t\trecipient\n      DUP3 \t\t\ttokenId\n      PUSH [tag] 174\t\t\t_mint\n      JUMP \t\t\t_mint(recipient, tokenId)\n    tag 173\t\t\t_mint(recipient, tokenId)\n      JUMPDEST \t\t\t_mint(recipient, tokenId)\n      PUSH [tag] 175\t\t\t_setTokenURI(tokenId, tokenURI...\n      DUP2 \t\t\ttokenId\n      DUP5 \t\t\ttokenURI\n      PUSH [tag] 176\t\t\t_setTokenURI\n      JUMP \t\t\t_setTokenURI(tokenId, tokenURI...\n    tag 175\t\t\t_setTokenURI(tokenId, tokenURI...\n      JUMPDEST \t\t\t_setTokenURI(tokenId, tokenURI...\n      DUP1 \t\t\ttokenId\n      SWAP2 \t\t\treturn tokenId\n      POP \t\t\treturn tokenId\n      POP \t\t\treturn tokenId\n      SWAP3 \t\t\tfunction mintNFT(address recip...\n      SWAP2 \t\t\tfunction mintNFT(address recip...\n      POP \t\t\tfunction mintNFT(address recip...\n      POP \t\t\tfunction mintNFT(address recip...\n      JUMP \t\t\tfunction mintNFT(address recip...\n    tag 92\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 178\t\t\t\n      PUSH [tag] 132\t\t\t\n      JUMP \t\t\t\n    tag 178\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 180\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1E4FBDF700000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 181\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 181\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 180\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 182\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 182\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 96\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 80AC58CD00000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 184\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 5B5E139F00000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n    tag 184\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 185\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH [tag] 186\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n    tag 185\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 106\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 189\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMP \t\t\t\n    tag 189\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7E27328900000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 192\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 59\t\t\t\n      JUMP \t\t\t\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 191\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 108\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 112\t\t\t   _setTokenURI(tokenId, token...\n      JUMPDEST \t\t\t   _setTokenURI(tokenId, token...\n      PUSH 0\t\t\tkenId;\\n\n      CALLER \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t   _setTokenURI(tokenId, token...\n      JUMP \t\t\t   _setTokenURI(tokenId, token...\n    tag 113\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 196\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 196\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 119\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 199\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMP \t\t\t\n    tag 199\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 200\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 201\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 202\t\t\t\n      JUMP \t\t\t\n    tag 201\t\t\t\n      JUMPDEST \t\t\t\n    tag 200\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 203\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 204\t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 3\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      SUB \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n    tag 203\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 3\t\t\t\n      PUSH 0\t\t\t\n      DUP8 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n    tag 205\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP7 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      MUL \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      MUL \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG4 \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 132\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 207\t\t\t\n      PUSH [tag] 112\t\t\t\n      JUMP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH [tag] 208\t\t\t\n      PUSH [tag] 63\t\t\t\n      JUMP \t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 210\t\t\t\n      PUSH [tag] 112\t\t\t\n      JUMP \t\t\t\n    tag 210\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 118CDAA700000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 211\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 211\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 209\t\t\t\n      JUMPDEST \t\t\t\n      JUMP \t\t\t\n    tag 135\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 7\t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH 7\t\t\t\n      PUSH 0\t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      MUL \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      MUL \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 146\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 214\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 5B08BA1800000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 215\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 215\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 5\t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      PUSH FF\t\t\t\n      MUL \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      MUL \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31\t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 216\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 28\t\t\t\n      JUMP \t\t\t\n    tag 216\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 151\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EXTCODESIZE \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 218\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 150B7A02\t\t\t\n      DUP7 \t\t\t\n      DUP7 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 219\t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 220\t\t\t\n      JUMP \t\t\t\n    tag 219\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      PUSH 0\t\t\t\n      DUP8 \t\t\t\n      GAS \t\t\t\n      CALL \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 221\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 1F\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 222\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 223\t\t\t\n      JUMP \t\t\t\n    tag 222\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n    tag 221\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 224\t\t\t\n      JUMPI \t\t\t\n      RETURNDATASIZE \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 229\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 3F\t\t\t\n      RETURNDATASIZE \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      RETURNDATASIZE \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      RETURNDATACOPY \t\t\t\n      PUSH [tag] 228\t\t\t\n      JUMP \t\t\t\n    tag 229\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 228\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 230\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 64A0AE9200000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 231\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 231\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 230\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      REVERT \t\t\t\n    tag 224\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 150B7A02\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 234\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 64A0AE9200000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 235\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 235\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 234\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 160\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 166\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 238\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 106\t\t\t\n      JUMP \t\t\t\n    tag 238\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 239\t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP \t\t\t\n    tag 239\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      GT \t\t\t\n      PUSH [tag] 240\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 241\t\t\t\n      JUMP \t\t\t\n    tag 240\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 242\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 243\t\t\t\n      JUMP \t\t\t\n    tag 242\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 244\t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 244\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n    tag 241\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 246\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 64A0AE9200000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 247\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 247\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 246\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 248\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 119\t\t\t\n      JUMP \t\t\t\n    tag 248\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 73C6AC6E00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 250\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 250\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 249\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 176\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 6\t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 252\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 253\t\t\t\n      JUMP \t\t\t\n    tag 252\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH F8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7\t\t\t\n      DUP3 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 254\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 59\t\t\t\n      JUMP \t\t\t\n    tag 254\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG1 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 187\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1FFC9A700000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 190\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 197\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 258\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      ISZERO \t\t\t\n    tag 258\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 259\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 260\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 106\t\t\t\n      JUMP \t\t\t\n    tag 260\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      ISZERO \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 262\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH [tag] 263\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 83\t\t\t\n      JUMP \t\t\t\n    tag 263\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 264\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH A9FBF51F00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 265\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 265\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 264\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 266\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG4 \t\t\t\n    tag 266\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n    tag 259\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      PUSH 4\t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 100\t\t\t\n      EXP \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      MUL \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      MUL \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 202\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 268\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMP \t\t\t\n    tag 268\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 270\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 271\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7E27328900000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 272\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 59\t\t\t\n      JUMP \t\t\t\n    tag 272\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 271\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 177E802F00000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 274\t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 275\t\t\t\n      JUMP \t\t\t\n    tag 274\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 270\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 243\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 277\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 278\t\t\t\n      JUMP \t\t\t\n    tag 277\t\t\t\n      JUMPDEST \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 280\t\t\t\n      PUSH [tag] 281\t\t\t\n      JUMP \t\t\t\n    tag 280\t\t\t\n      JUMPDEST \t\t\t\n    tag 279\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 282\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      DUP4 \t\t\t\n      CALLDATACOPY \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 282\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 283\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 284\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      DUP1 \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 3031323334353637383961626364656600000000000000000000000000000000\t\t\t\n      PUSH A\t\t\t\n      DUP7 \t\t\t\n      MOD \t\t\t\n      BYTE \t\t\t\n      DUP2 \t\t\t\n      MSTORE8 \t\t\t\n      PUSH A\t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 285\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 286\t\t\t\n      PUSH [tag] 287\t\t\t\n      JUMP \t\t\t\n    tag 286\t\t\t\n      JUMPDEST \t\t\t\n    tag 285\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 283\t\t\t\n      JUMPI \t\t\t\n    tag 284\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 269\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 290\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 291\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH [tag] 292\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 83\t\t\t\n      JUMP \t\t\t\n    tag 292\t\t\t\n      JUMPDEST \t\t\t\n    tag 291\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 293\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH [tag] 294\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 108\t\t\t\n      JUMP \t\t\t\n    tag 294\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n    tag 293\t\t\t\n      JUMPDEST \t\t\t\n    tag 290\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 278\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 296\t\t\t\n      JUMPI \t\t\t\n      PUSH 184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000\t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 297\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 298\t\t\t\n      PUSH [tag] 287\t\t\t\n      JUMP \t\t\t\n    tag 298\t\t\t\n      JUMPDEST \t\t\t\n    tag 297\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 296\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4EE2D6D415B85ACEF8100000000\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 299\t\t\t\n      JUMPI \t\t\t\n      PUSH 4EE2D6D415B85ACEF8100000000\t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 300\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 301\t\t\t\n      PUSH [tag] 287\t\t\t\n      JUMP \t\t\t\n    tag 301\t\t\t\n      JUMPDEST \t\t\t\n    tag 300\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 299\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2386F26FC10000\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 302\t\t\t\n      JUMPI \t\t\t\n      PUSH 2386F26FC10000\t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 303\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 304\t\t\t\n      PUSH [tag] 287\t\t\t\n      JUMP \t\t\t\n    tag 304\t\t\t\n      JUMPDEST \t\t\t\n    tag 303\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 10\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 302\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5F5E100\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 305\t\t\t\n      JUMPI \t\t\t\n      PUSH 5F5E100\t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 306\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 307\t\t\t\n      PUSH [tag] 287\t\t\t\n      JUMP \t\t\t\n    tag 307\t\t\t\n      JUMPDEST \t\t\t\n    tag 306\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 8\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 305\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2710\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 308\t\t\t\n      JUMPI \t\t\t\n      PUSH 2710\t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 309\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 310\t\t\t\n      PUSH [tag] 287\t\t\t\n      JUMP \t\t\t\n    tag 310\t\t\t\n      JUMPDEST \t\t\t\n    tag 309\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 308\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 64\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 311\t\t\t\n      JUMPI \t\t\t\n      PUSH 64\t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 312\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 313\t\t\t\n      PUSH [tag] 287\t\t\t\n      JUMP \t\t\t\n    tag 313\t\t\t\n      JUMPDEST \t\t\t\n    tag 312\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 2\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 311\t\t\t\n      JUMPDEST \t\t\t\n      PUSH A\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 314\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 314\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 315\t\t\t-License-Identifier: MIT\\nprag...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\nprag...\n      PUSH 0\t\t\tolidit\n      PUSH 40\t\t\tpe\n      MLOAD \t\t\tpenzeppel\n      SWAP1 \t\t\timport \"@openzeppel\n      POP \t\t\timport \"@openzeppel\n      SWAP1 \t\t\t-License-Identifier: MIT\\nprag...\n      JUMP \t\t\t-License-Identifier: MIT\\nprag...\n    tag 316\t\t\t/token/ERC721/ERC721.sol\";\\nim...\n      JUMPDEST \t\t\t/token/ERC721/ERC721.sol\";\\nim...\n      PUSH 0\t\t\to\n      DUP1 \t\t\ti\n      REVERT \t\t\t.sol\";\\nimpor\n    tag 317\t\t\telin/contracts/access/Ownable....\n      JUMPDEST \t\t\telin/contracts/access/Ownable....\n      PUSH 0\t\t\te\n      DUP1 \t\t\tv\n      REVERT \t\t\t256 private \n    tag 318\t\t\tter;\\n\\n    constructor(addres...\n      JUMPDEST \t\t\tter;\\n\\n    constructor(addres...\n      PUSH 0\t\t\tlOwner)\n      PUSH FFFFFFFF00000000000000000000000000000000000000000000000000000000\t\t\tDEQUILL\")\\n    Ownable(initial...\n      DUP3 \t\t\tT\", \"\n      AND \t\t\tl NFT\", \"CODEQUILL\")\\n    Owna...\n      SWAP1 \t\t\t(\"Code Quill NFT\", \"CODEQUILL\"...\n      POP \t\t\t(\"Code Quill NFT\", \"CODEQUILL\"...\n      SWAP2 \t\t\tter;\\n\\n    constructor(addres...\n      SWAP1 \t\t\tter;\\n\\n    constructor(addres...\n      POP \t\t\tter;\\n\\n    constructor(addres...\n      JUMP \t\t\tter;\\n\\n    constructor(addres...\n    tag 319\t\t\tent,\\n        string memory to...\n      JUMPDEST \t\t\tent,\\n        string memory to...\n      PUSH [tag] 379\t\t\tint256) {\\n        uint2\n      DUP2 \t\t\t uint\n      PUSH [tag] 318\t\t\tint256) {\\n        uint2\n      JUMP \t\t\tint256) {\\n        uint2\n    tag 379\t\t\tint256) {\\n        uint2\n      JUMPDEST \t\t\tint256) {\\n        uint2\n      DUP2 \t\t\turns \n      EQ \t\t\treturns (uint256) {\\n        u...\n      PUSH [tag] 380\t\t\tOwner\\n    returns (uint256) {...\n      JUMPI \t\t\tOwner\\n    returns (uint256) {...\n      PUSH 0\t\t\to\n      DUP1 \t\t\t \n      REVERT \t\t\tkenId = _tok\n    tag 380\t\t\tOwner\\n    returns (uint256) {...\n      JUMPDEST \t\t\tOwner\\n    returns (uint256) {...\n      POP \t\t\tent,\\n        string memory to...\n      JUMP \t\t\tent,\\n        string memory to...\n    tag 320\t\t\t\\n        _mint(recipient, tok...\n      JUMPDEST \t\t\t\\n        _mint(recipient, tok...\n      PUSH 0\t\t\tsetTo\n      DUP2 \t\t\t  retu\n      CALLDATALOAD \t\t\tnURI);\\n        retur\n      SWAP1 \t\t\tnId, tokenURI);\\n        retur\n      POP \t\t\tnId, tokenURI);\\n        retur\n      PUSH [tag] 382\t\t\t;\\n    }\\n}\n      DUP2 \t\t\t\n      PUSH [tag] 319\t\t\t;\\n    }\\n}\n      JUMP \t\t\t;\\n    }\\n}\n    tag 382\t\t\t;\\n    }\\n}\n      JUMPDEST \t\t\t;\\n    }\\n}\n      SWAP3 \t\t\t\\n        _mint(recipient, tok...\n      SWAP2 \t\t\t\\n        _mint(recipient, tok...\n      POP \t\t\t\\n        _mint(recipient, tok...\n      POP \t\t\t\\n        _mint(recipient, tok...\n      JUMP \t\t\t\\n        _mint(recipient, tok...\n    tag 25\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 384\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 385\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 385\t\t\t\n      JUMPDEST \t\t\t\n    tag 384\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 386\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 320\t\t\t\n      JUMP \t\t\t\n    tag 386\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 321\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 322\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 389\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 321\t\t\t\n      JUMP \t\t\t\n    tag 389\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 28\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 391\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 322\t\t\t\n      JUMP \t\t\t\n    tag 391\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 323\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 324\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 325\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n    tag 395\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 397\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 395\t\t\t\n      JUMP \t\t\t\n    tag 397\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 326\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 327\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 400\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 323\t\t\t\n      JUMP \t\t\t\n    tag 400\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 401\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 324\t\t\t\n      JUMP \t\t\t\n    tag 401\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 402\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 325\t\t\t\n      JUMP \t\t\t\n    tag 402\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 403\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 326\t\t\t\n      JUMP \t\t\t\n    tag 403\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 32\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 405\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 327\t\t\t\n      JUMP \t\t\t\n    tag 405\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 328\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 329\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 408\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 328\t\t\t\n      JUMP \t\t\t\n    tag 408\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 409\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 330\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 411\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 329\t\t\t\n      JUMP \t\t\t\n    tag 411\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 35\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 413\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 414\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 414\t\t\t\n      JUMPDEST \t\t\t\n    tag 413\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 415\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 330\t\t\t\n      JUMP \t\t\t\n    tag 415\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 331\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 332\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 418\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 331\t\t\t\n      JUMP \t\t\t\n    tag 418\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 333\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 420\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 332\t\t\t\n      JUMP \t\t\t\n    tag 420\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 38\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 422\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMP \t\t\t\n    tag 422\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 334\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 424\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 332\t\t\t\n      JUMP \t\t\t\n    tag 424\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 425\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 425\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 335\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 427\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 334\t\t\t\n      JUMP \t\t\t\n    tag 427\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 41\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 429\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 430\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 430\t\t\t\n      JUMPDEST \t\t\t\n    tag 429\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 431\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 431\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 432\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 330\t\t\t\n      JUMP \t\t\t\n    tag 432\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 45\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 434\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 435\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 435\t\t\t\n      JUMPDEST \t\t\t\n    tag 434\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 436\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 436\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 437\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 437\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      PUSH [tag] 438\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 330\t\t\t\n      JUMP \t\t\t\n    tag 438\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      JUMP \t\t\t\n    tag 56\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 440\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 441\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 441\t\t\t\n      JUMPDEST \t\t\t\n    tag 440\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 442\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 442\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 336\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 444\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 328\t\t\t\n      JUMP \t\t\t\n    tag 444\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 59\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 446\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 336\t\t\t\n      JUMP \t\t\t\n    tag 446\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 337\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 448\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 321\t\t\t\n      JUMP \t\t\t\n    tag 448\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 449\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 449\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 338\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 451\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 337\t\t\t\n      JUMP \t\t\t\n    tag 451\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 70\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 453\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 454\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 454\t\t\t\n      JUMPDEST \t\t\t\n    tag 453\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 455\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 455\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 456\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 338\t\t\t\n      JUMP \t\t\t\n    tag 456\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 339\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 340\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 281\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 41\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 341\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 461\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 326\t\t\t\n      JUMP \t\t\t\n    tag 461\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      OR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 462\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 463\t\t\t\n      PUSH [tag] 281\t\t\t\n      JUMP \t\t\t\n    tag 463\t\t\t\n      JUMPDEST \t\t\t\n    tag 462\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 342\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 465\t\t\t\n      PUSH [tag] 315\t\t\t\n      JUMP \t\t\t\n    tag 465\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 466\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 341\t\t\t\n      JUMP \t\t\t\n    tag 466\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 343\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 468\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 469\t\t\t\n      PUSH [tag] 281\t\t\t\n      JUMP \t\t\t\n    tag 469\t\t\t\n      JUMPDEST \t\t\t\n    tag 468\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 470\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 326\t\t\t\n      JUMP \t\t\t\n    tag 470\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 344\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      CALLDATACOPY \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 345\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 473\t\t\t\n      PUSH [tag] 474\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 343\t\t\t\n      JUMP \t\t\t\n    tag 474\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 342\t\t\t\n      JUMP \t\t\t\n    tag 473\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 475\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 476\t\t\t\n      PUSH [tag] 340\t\t\t\n      JUMP \t\t\t\n    tag 476\t\t\t\n      JUMPDEST \t\t\t\n    tag 475\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 477\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 344\t\t\t\n      JUMP \t\t\t\n    tag 477\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 346\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SLT \t\t\t\n      PUSH [tag] 479\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 480\t\t\t\n      PUSH [tag] 339\t\t\t\n      JUMP \t\t\t\n    tag 480\t\t\t\n      JUMPDEST \t\t\t\n    tag 479\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 481\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 345\t\t\t\n      JUMP \t\t\t\n    tag 481\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 74\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 80\t\t\t\n      DUP6 \t\t\t\n      DUP8 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 483\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 484\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 484\t\t\t\n      JUMPDEST \t\t\t\n    tag 483\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 485\t\t\t\n      DUP8 \t\t\t\n      DUP3 \t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 485\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 486\t\t\t\n      DUP8 \t\t\t\n      DUP3 \t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 486\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      PUSH [tag] 487\t\t\t\n      DUP8 \t\t\t\n      DUP3 \t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 330\t\t\t\n      JUMP \t\t\t\n    tag 487\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 60\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 488\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 489\t\t\t\n      PUSH [tag] 317\t\t\t\n      JUMP \t\t\t\n    tag 489\t\t\t\n      JUMPDEST \t\t\t\n    tag 488\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 490\t\t\t\n      DUP8 \t\t\t\n      DUP3 \t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 346\t\t\t\n      JUMP \t\t\t\n    tag 490\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      SWAP2 \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 82\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 492\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 493\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 493\t\t\t\n      JUMPDEST \t\t\t\n    tag 492\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 494\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 494\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 495\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 495\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 347\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 497\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 498\t\t\t\n      PUSH [tag] 281\t\t\t\n      JUMP \t\t\t\n    tag 498\t\t\t\n      JUMPDEST \t\t\t\n    tag 497\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 499\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 326\t\t\t\n      JUMP \t\t\t\n    tag 499\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 348\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 501\t\t\t\n      PUSH [tag] 502\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 347\t\t\t\n      JUMP \t\t\t\n    tag 502\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 342\t\t\t\n      JUMP \t\t\t\n    tag 501\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 503\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 504\t\t\t\n      PUSH [tag] 340\t\t\t\n      JUMP \t\t\t\n    tag 504\t\t\t\n      JUMPDEST \t\t\t\n    tag 503\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 505\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 344\t\t\t\n      JUMP \t\t\t\n    tag 505\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 349\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SLT \t\t\t\n      PUSH [tag] 507\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 508\t\t\t\n      PUSH [tag] 339\t\t\t\n      JUMP \t\t\t\n    tag 508\t\t\t\n      JUMPDEST \t\t\t\n    tag 507\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH [tag] 509\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 348\t\t\t\n      JUMP \t\t\t\n    tag 509\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 87\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 511\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 512\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 512\t\t\t\n      JUMPDEST \t\t\t\n    tag 511\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 513\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMP \t\t\t\n    tag 513\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 514\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 515\t\t\t\n      PUSH [tag] 317\t\t\t\n      JUMP \t\t\t\n    tag 515\t\t\t\n      JUMPDEST \t\t\t\n    tag 514\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 516\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 349\t\t\t\n      JUMP \t\t\t\n    tag 516\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 350\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 99\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 519\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 519\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 520\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 521\t\t\t\n      PUSH [tag] 350\t\t\t\n      JUMP \t\t\t\n    tag 521\t\t\t\n      JUMPDEST \t\t\t\n    tag 520\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 122\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 523\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMP \t\t\t\n    tag 523\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 524\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 336\t\t\t\n      JUMP \t\t\t\n    tag 524\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 525\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMP \t\t\t\n    tag 525\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 351\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 352\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 528\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 323\t\t\t\n      JUMP \t\t\t\n    tag 528\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 529\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 351\t\t\t\n      JUMP \t\t\t\n    tag 529\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 530\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 325\t\t\t\n      JUMP \t\t\t\n    tag 530\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 164\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 532\t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 532\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 533\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 352\t\t\t\n      JUMP \t\t\t\n    tag 533\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 353\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 536\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 328\t\t\t\n      JUMP \t\t\t\n    tag 536\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 537\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 538\t\t\t\n      PUSH [tag] 353\t\t\t\n      JUMP \t\t\t\n    tag 538\t\t\t\n      JUMPDEST \t\t\t\n    tag 537\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 354\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 355\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 356\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 542\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 354\t\t\t\n      JUMP \t\t\t\n    tag 542\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 543\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 355\t\t\t\n      JUMP \t\t\t\n    tag 543\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 544\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 325\t\t\t\n      JUMP \t\t\t\n    tag 544\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 545\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 326\t\t\t\n      JUMP \t\t\t\n    tag 545\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 220\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 80\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 547\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMP \t\t\t\n    tag 547\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 548\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMP \t\t\t\n    tag 548\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 549\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 336\t\t\t\n      JUMP \t\t\t\n    tag 549\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 60\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 550\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 356\t\t\t\n      JUMP \t\t\t\n    tag 550\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 357\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 552\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 319\t\t\t\n      JUMP \t\t\t\n    tag 552\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 223\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 554\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 555\t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 555\t\t\t\n      JUMPDEST \t\t\t\n    tag 554\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 556\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 357\t\t\t\n      JUMP \t\t\t\n    tag 556\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 358\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 359\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 360\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 361\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 8\t\t\t\n      DUP4 \t\t\t\n      MUL \t\t\t\n      PUSH [tag] 561\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 360\t\t\t\n      JUMP \t\t\t\n    tag 561\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 562\t\t\t\n      DUP7 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 360\t\t\t\n      JUMP \t\t\t\n    tag 562\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      NOT \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      OR \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 362\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 363\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 565\t\t\t\n      PUSH [tag] 566\t\t\t\n      PUSH [tag] 567\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 328\t\t\t\n      JUMP \t\t\t\n    tag 567\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 362\t\t\t\n      JUMP \t\t\t\n    tag 566\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 328\t\t\t\n      JUMP \t\t\t\n    tag 565\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 364\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 365\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 570\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 363\t\t\t\n      JUMP \t\t\t\n    tag 570\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 571\t\t\t\n      PUSH [tag] 572\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 364\t\t\t\n      JUMP \t\t\t\n    tag 572\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 361\t\t\t\n      JUMP \t\t\t\n    tag 571\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 366\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 367\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 575\t\t\t\n      PUSH [tag] 366\t\t\t\n      JUMP \t\t\t\n    tag 575\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 576\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 365\t\t\t\n      JUMP \t\t\t\n    tag 576\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 368\t\t\t\n      JUMPDEST \t\t\t\n    tag 578\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 580\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 581\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 367\t\t\t\n      JUMP \t\t\t\n    tag 581\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 578\t\t\t\n      JUMP \t\t\t\n    tag 580\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 369\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1F\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 583\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 584\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 358\t\t\t\n      JUMP \t\t\t\n    tag 584\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 585\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 359\t\t\t\n      JUMP \t\t\t\n    tag 585\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP6 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 586\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 586\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 587\t\t\t\n      PUSH [tag] 588\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 359\t\t\t\n      JUMP \t\t\t\n    tag 588\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 368\t\t\t\n      JUMP \t\t\t\n    tag 587\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 583\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 370\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 371\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 591\t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      DUP5 \t\t\t\n      PUSH 8\t\t\t\n      MUL \t\t\t\n      PUSH [tag] 370\t\t\t\n      JUMP \t\t\t\n    tag 591\t\t\t\n      JUMPDEST \t\t\t\n      NOT \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 372\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 593\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 371\t\t\t\n      JUMP \t\t\t\n    tag 593\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH 2\t\t\t\n      MUL \t\t\t\n      DUP3 \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 253\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 595\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 323\t\t\t\n      JUMP \t\t\t\n    tag 595\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 596\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 597\t\t\t\n      PUSH [tag] 281\t\t\t\n      JUMP \t\t\t\n    tag 597\t\t\t\n      JUMPDEST \t\t\t\n    tag 596\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 598\t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 99\t\t\t\n      JUMP \t\t\t\n    tag 598\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 599\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 369\t\t\t\n      JUMP \t\t\t\n    tag 599\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 601\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 602\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 602\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 603\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 372\t\t\t\n      JUMP \t\t\t\n    tag 603\t\t\t\n      JUMPDEST \t\t\t\n      DUP7 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 600\t\t\t\n      JUMP \t\t\t\n    tag 601\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 604\t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 358\t\t\t\n      JUMP \t\t\t\n    tag 604\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n    tag 605\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 607\t\t\t\n      JUMPI \t\t\t\n      DUP5 \t\t\t\n      DUP10 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      DUP3 \t\t\t\n      SSTORE \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 605\t\t\t\n      JUMP \t\t\t\n    tag 607\t\t\t\n      JUMPDEST \t\t\t\n      DUP7 \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 608\t\t\t\n      JUMPI \t\t\t\n      DUP5 \t\t\t\n      DUP10 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 609\t\t\t\n      PUSH 1F\t\t\t\n      DUP10 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 371\t\t\t\n      JUMP \t\t\t\n    tag 609\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n    tag 608\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 2\t\t\t\n      DUP9 \t\t\t\n      MUL \t\t\t\n      ADD \t\t\t\n      DUP9 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 600\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 275\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 611\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMP \t\t\t\n    tag 611\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 612\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 336\t\t\t\n      JUMP \t\t\t\n    tag 612\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 287\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 12\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    .data\n"
}